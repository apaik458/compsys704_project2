
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a4f8  0800a4f8  0000a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a810  0800a810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a818  0800a818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a81c  0800a81c  0000a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800a820  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000079c  20000080  0800a8a0  00010080  2**2
                  ALLOC
  8 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  9 .bss2         00000000  20000080  20000080  00010080  2**0
                  CONTENTS
 10 ._user_heap_stack 00003000  2000081c  2000081c  0001081c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 12 .debug_line   00028bc5  00000000  00000000  000100ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000240f4  00000000  00000000  00038c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041ac  00000000  00000000  0005cd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00060f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011e5ba  00000000  00000000  00062830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001808  00000000  00000000  00180df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00017f9b  00000000  00000000  001825f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fc44  00000000  00000000  0019a593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ca1d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ca8  00000000  00000000  001ca228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000080 	.word	0x20000080
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800a4dc 	.word	0x0800a4dc

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	20000084 	.word	0x20000084
 80041cc:	0800a4dc 	.word	0x0800a4dc

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_uldivmod>:
 8004270:	b953      	cbnz	r3, 8004288 <__aeabi_uldivmod+0x18>
 8004272:	b94a      	cbnz	r2, 8004288 <__aeabi_uldivmod+0x18>
 8004274:	2900      	cmp	r1, #0
 8004276:	bf08      	it	eq
 8004278:	2800      	cmpeq	r0, #0
 800427a:	bf1c      	itt	ne
 800427c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8004280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004284:	f000 b974 	b.w	8004570 <__aeabi_idiv0>
 8004288:	f1ad 0c08 	sub.w	ip, sp, #8
 800428c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004290:	f000 f806 	bl	80042a0 <__udivmoddi4>
 8004294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429c:	b004      	add	sp, #16
 800429e:	4770      	bx	lr

080042a0 <__udivmoddi4>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	9d08      	ldr	r5, [sp, #32]
 80042a6:	4604      	mov	r4, r0
 80042a8:	468e      	mov	lr, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d14d      	bne.n	800434a <__udivmoddi4+0xaa>
 80042ae:	428a      	cmp	r2, r1
 80042b0:	4694      	mov	ip, r2
 80042b2:	d969      	bls.n	8004388 <__udivmoddi4+0xe8>
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b152      	cbz	r2, 80042d0 <__udivmoddi4+0x30>
 80042ba:	fa01 f302 	lsl.w	r3, r1, r2
 80042be:	f1c2 0120 	rsb	r1, r2, #32
 80042c2:	fa20 f101 	lsr.w	r1, r0, r1
 80042c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80042ca:	ea41 0e03 	orr.w	lr, r1, r3
 80042ce:	4094      	lsls	r4, r2
 80042d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80042d4:	0c21      	lsrs	r1, r4, #16
 80042d6:	fbbe f6f8 	udiv	r6, lr, r8
 80042da:	fa1f f78c 	uxth.w	r7, ip
 80042de:	fb08 e316 	mls	r3, r8, r6, lr
 80042e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80042e6:	fb06 f107 	mul.w	r1, r6, r7
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d90a      	bls.n	8004304 <__udivmoddi4+0x64>
 80042ee:	eb1c 0303 	adds.w	r3, ip, r3
 80042f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80042f6:	f080 811f 	bcs.w	8004538 <__udivmoddi4+0x298>
 80042fa:	4299      	cmp	r1, r3
 80042fc:	f240 811c 	bls.w	8004538 <__udivmoddi4+0x298>
 8004300:	3e02      	subs	r6, #2
 8004302:	4463      	add	r3, ip
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	b2a4      	uxth	r4, r4
 8004308:	fbb3 f0f8 	udiv	r0, r3, r8
 800430c:	fb08 3310 	mls	r3, r8, r0, r3
 8004310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004314:	fb00 f707 	mul.w	r7, r0, r7
 8004318:	42a7      	cmp	r7, r4
 800431a:	d90a      	bls.n	8004332 <__udivmoddi4+0x92>
 800431c:	eb1c 0404 	adds.w	r4, ip, r4
 8004320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004324:	f080 810a 	bcs.w	800453c <__udivmoddi4+0x29c>
 8004328:	42a7      	cmp	r7, r4
 800432a:	f240 8107 	bls.w	800453c <__udivmoddi4+0x29c>
 800432e:	4464      	add	r4, ip
 8004330:	3802      	subs	r0, #2
 8004332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004336:	1be4      	subs	r4, r4, r7
 8004338:	2600      	movs	r6, #0
 800433a:	b11d      	cbz	r5, 8004344 <__udivmoddi4+0xa4>
 800433c:	40d4      	lsrs	r4, r2
 800433e:	2300      	movs	r3, #0
 8004340:	e9c5 4300 	strd	r4, r3, [r5]
 8004344:	4631      	mov	r1, r6
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434a:	428b      	cmp	r3, r1
 800434c:	d909      	bls.n	8004362 <__udivmoddi4+0xc2>
 800434e:	2d00      	cmp	r5, #0
 8004350:	f000 80ef 	beq.w	8004532 <__udivmoddi4+0x292>
 8004354:	2600      	movs	r6, #0
 8004356:	e9c5 0100 	strd	r0, r1, [r5]
 800435a:	4630      	mov	r0, r6
 800435c:	4631      	mov	r1, r6
 800435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004362:	fab3 f683 	clz	r6, r3
 8004366:	2e00      	cmp	r6, #0
 8004368:	d14a      	bne.n	8004400 <__udivmoddi4+0x160>
 800436a:	428b      	cmp	r3, r1
 800436c:	d302      	bcc.n	8004374 <__udivmoddi4+0xd4>
 800436e:	4282      	cmp	r2, r0
 8004370:	f200 80f9 	bhi.w	8004566 <__udivmoddi4+0x2c6>
 8004374:	1a84      	subs	r4, r0, r2
 8004376:	eb61 0303 	sbc.w	r3, r1, r3
 800437a:	2001      	movs	r0, #1
 800437c:	469e      	mov	lr, r3
 800437e:	2d00      	cmp	r5, #0
 8004380:	d0e0      	beq.n	8004344 <__udivmoddi4+0xa4>
 8004382:	e9c5 4e00 	strd	r4, lr, [r5]
 8004386:	e7dd      	b.n	8004344 <__udivmoddi4+0xa4>
 8004388:	b902      	cbnz	r2, 800438c <__udivmoddi4+0xec>
 800438a:	deff      	udf	#255	; 0xff
 800438c:	fab2 f282 	clz	r2, r2
 8004390:	2a00      	cmp	r2, #0
 8004392:	f040 8092 	bne.w	80044ba <__udivmoddi4+0x21a>
 8004396:	eba1 010c 	sub.w	r1, r1, ip
 800439a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800439e:	fa1f fe8c 	uxth.w	lr, ip
 80043a2:	2601      	movs	r6, #1
 80043a4:	0c20      	lsrs	r0, r4, #16
 80043a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80043aa:	fb07 1113 	mls	r1, r7, r3, r1
 80043ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80043b2:	fb0e f003 	mul.w	r0, lr, r3
 80043b6:	4288      	cmp	r0, r1
 80043b8:	d908      	bls.n	80043cc <__udivmoddi4+0x12c>
 80043ba:	eb1c 0101 	adds.w	r1, ip, r1
 80043be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80043c2:	d202      	bcs.n	80043ca <__udivmoddi4+0x12a>
 80043c4:	4288      	cmp	r0, r1
 80043c6:	f200 80cb 	bhi.w	8004560 <__udivmoddi4+0x2c0>
 80043ca:	4643      	mov	r3, r8
 80043cc:	1a09      	subs	r1, r1, r0
 80043ce:	b2a4      	uxth	r4, r4
 80043d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80043d4:	fb07 1110 	mls	r1, r7, r0, r1
 80043d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80043dc:	fb0e fe00 	mul.w	lr, lr, r0
 80043e0:	45a6      	cmp	lr, r4
 80043e2:	d908      	bls.n	80043f6 <__udivmoddi4+0x156>
 80043e4:	eb1c 0404 	adds.w	r4, ip, r4
 80043e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80043ec:	d202      	bcs.n	80043f4 <__udivmoddi4+0x154>
 80043ee:	45a6      	cmp	lr, r4
 80043f0:	f200 80bb 	bhi.w	800456a <__udivmoddi4+0x2ca>
 80043f4:	4608      	mov	r0, r1
 80043f6:	eba4 040e 	sub.w	r4, r4, lr
 80043fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80043fe:	e79c      	b.n	800433a <__udivmoddi4+0x9a>
 8004400:	f1c6 0720 	rsb	r7, r6, #32
 8004404:	40b3      	lsls	r3, r6
 8004406:	fa22 fc07 	lsr.w	ip, r2, r7
 800440a:	ea4c 0c03 	orr.w	ip, ip, r3
 800440e:	fa20 f407 	lsr.w	r4, r0, r7
 8004412:	fa01 f306 	lsl.w	r3, r1, r6
 8004416:	431c      	orrs	r4, r3
 8004418:	40f9      	lsrs	r1, r7
 800441a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800441e:	fa00 f306 	lsl.w	r3, r0, r6
 8004422:	fbb1 f8f9 	udiv	r8, r1, r9
 8004426:	0c20      	lsrs	r0, r4, #16
 8004428:	fa1f fe8c 	uxth.w	lr, ip
 800442c:	fb09 1118 	mls	r1, r9, r8, r1
 8004430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004434:	fb08 f00e 	mul.w	r0, r8, lr
 8004438:	4288      	cmp	r0, r1
 800443a:	fa02 f206 	lsl.w	r2, r2, r6
 800443e:	d90b      	bls.n	8004458 <__udivmoddi4+0x1b8>
 8004440:	eb1c 0101 	adds.w	r1, ip, r1
 8004444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8004448:	f080 8088 	bcs.w	800455c <__udivmoddi4+0x2bc>
 800444c:	4288      	cmp	r0, r1
 800444e:	f240 8085 	bls.w	800455c <__udivmoddi4+0x2bc>
 8004452:	f1a8 0802 	sub.w	r8, r8, #2
 8004456:	4461      	add	r1, ip
 8004458:	1a09      	subs	r1, r1, r0
 800445a:	b2a4      	uxth	r4, r4
 800445c:	fbb1 f0f9 	udiv	r0, r1, r9
 8004460:	fb09 1110 	mls	r1, r9, r0, r1
 8004464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004468:	fb00 fe0e 	mul.w	lr, r0, lr
 800446c:	458e      	cmp	lr, r1
 800446e:	d908      	bls.n	8004482 <__udivmoddi4+0x1e2>
 8004470:	eb1c 0101 	adds.w	r1, ip, r1
 8004474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8004478:	d26c      	bcs.n	8004554 <__udivmoddi4+0x2b4>
 800447a:	458e      	cmp	lr, r1
 800447c:	d96a      	bls.n	8004554 <__udivmoddi4+0x2b4>
 800447e:	3802      	subs	r0, #2
 8004480:	4461      	add	r1, ip
 8004482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004486:	fba0 9402 	umull	r9, r4, r0, r2
 800448a:	eba1 010e 	sub.w	r1, r1, lr
 800448e:	42a1      	cmp	r1, r4
 8004490:	46c8      	mov	r8, r9
 8004492:	46a6      	mov	lr, r4
 8004494:	d356      	bcc.n	8004544 <__udivmoddi4+0x2a4>
 8004496:	d053      	beq.n	8004540 <__udivmoddi4+0x2a0>
 8004498:	b15d      	cbz	r5, 80044b2 <__udivmoddi4+0x212>
 800449a:	ebb3 0208 	subs.w	r2, r3, r8
 800449e:	eb61 010e 	sbc.w	r1, r1, lr
 80044a2:	fa01 f707 	lsl.w	r7, r1, r7
 80044a6:	fa22 f306 	lsr.w	r3, r2, r6
 80044aa:	40f1      	lsrs	r1, r6
 80044ac:	431f      	orrs	r7, r3
 80044ae:	e9c5 7100 	strd	r7, r1, [r5]
 80044b2:	2600      	movs	r6, #0
 80044b4:	4631      	mov	r1, r6
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	f1c2 0320 	rsb	r3, r2, #32
 80044be:	40d8      	lsrs	r0, r3
 80044c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80044c4:	fa21 f303 	lsr.w	r3, r1, r3
 80044c8:	4091      	lsls	r1, r2
 80044ca:	4301      	orrs	r1, r0
 80044cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80044d0:	fa1f fe8c 	uxth.w	lr, ip
 80044d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80044d8:	fb07 3610 	mls	r6, r7, r0, r3
 80044dc:	0c0b      	lsrs	r3, r1, #16
 80044de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80044e2:	fb00 f60e 	mul.w	r6, r0, lr
 80044e6:	429e      	cmp	r6, r3
 80044e8:	fa04 f402 	lsl.w	r4, r4, r2
 80044ec:	d908      	bls.n	8004500 <__udivmoddi4+0x260>
 80044ee:	eb1c 0303 	adds.w	r3, ip, r3
 80044f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80044f6:	d22f      	bcs.n	8004558 <__udivmoddi4+0x2b8>
 80044f8:	429e      	cmp	r6, r3
 80044fa:	d92d      	bls.n	8004558 <__udivmoddi4+0x2b8>
 80044fc:	3802      	subs	r0, #2
 80044fe:	4463      	add	r3, ip
 8004500:	1b9b      	subs	r3, r3, r6
 8004502:	b289      	uxth	r1, r1
 8004504:	fbb3 f6f7 	udiv	r6, r3, r7
 8004508:	fb07 3316 	mls	r3, r7, r6, r3
 800450c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004510:	fb06 f30e 	mul.w	r3, r6, lr
 8004514:	428b      	cmp	r3, r1
 8004516:	d908      	bls.n	800452a <__udivmoddi4+0x28a>
 8004518:	eb1c 0101 	adds.w	r1, ip, r1
 800451c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8004520:	d216      	bcs.n	8004550 <__udivmoddi4+0x2b0>
 8004522:	428b      	cmp	r3, r1
 8004524:	d914      	bls.n	8004550 <__udivmoddi4+0x2b0>
 8004526:	3e02      	subs	r6, #2
 8004528:	4461      	add	r1, ip
 800452a:	1ac9      	subs	r1, r1, r3
 800452c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004530:	e738      	b.n	80043a4 <__udivmoddi4+0x104>
 8004532:	462e      	mov	r6, r5
 8004534:	4628      	mov	r0, r5
 8004536:	e705      	b.n	8004344 <__udivmoddi4+0xa4>
 8004538:	4606      	mov	r6, r0
 800453a:	e6e3      	b.n	8004304 <__udivmoddi4+0x64>
 800453c:	4618      	mov	r0, r3
 800453e:	e6f8      	b.n	8004332 <__udivmoddi4+0x92>
 8004540:	454b      	cmp	r3, r9
 8004542:	d2a9      	bcs.n	8004498 <__udivmoddi4+0x1f8>
 8004544:	ebb9 0802 	subs.w	r8, r9, r2
 8004548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800454c:	3801      	subs	r0, #1
 800454e:	e7a3      	b.n	8004498 <__udivmoddi4+0x1f8>
 8004550:	4646      	mov	r6, r8
 8004552:	e7ea      	b.n	800452a <__udivmoddi4+0x28a>
 8004554:	4620      	mov	r0, r4
 8004556:	e794      	b.n	8004482 <__udivmoddi4+0x1e2>
 8004558:	4640      	mov	r0, r8
 800455a:	e7d1      	b.n	8004500 <__udivmoddi4+0x260>
 800455c:	46d0      	mov	r8, sl
 800455e:	e77b      	b.n	8004458 <__udivmoddi4+0x1b8>
 8004560:	3b02      	subs	r3, #2
 8004562:	4461      	add	r1, ip
 8004564:	e732      	b.n	80043cc <__udivmoddi4+0x12c>
 8004566:	4630      	mov	r0, r6
 8004568:	e709      	b.n	800437e <__udivmoddi4+0xde>
 800456a:	4464      	add	r4, ip
 800456c:	3802      	subs	r0, #2
 800456e:	e742      	b.n	80043f6 <__udivmoddi4+0x156>

08004570 <__aeabi_idiv0>:
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004578:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800457a:	e003      	b.n	8004584 <LoopCopyDataInit>

0800457c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800457e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004580:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004582:	3104      	adds	r1, #4

08004584 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004584:	480b      	ldr	r0, [pc, #44]	; (80045b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004588:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800458a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800458c:	d3f6      	bcc.n	800457c <CopyDataInit>
	ldr	r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8004590:	e002      	b.n	8004598 <LoopFillZerobss>

08004592 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004592:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004594:	f842 3b04 	str.w	r3, [r2], #4

08004598 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <LoopForever+0x16>)
	cmp	r2, r3
 800459a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800459c:	d3f9      	bcc.n	8004592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800459e:	f001 fbf7 	bl	8005d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f005 fb01 	bl	8009ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045a6:	f001 f8cf 	bl	8005748 <main>

080045aa <LoopForever>:

LoopForever:
    b LoopForever
 80045aa:	e7fe      	b.n	80045aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80045b0:	0800a820 	.word	0x0800a820
	ldr	r0, =_sdata
 80045b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80045b8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80045bc:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80045c0:	2000081c 	.word	0x2000081c

080045c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_2_IRQHandler>
	...

080045c8 <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <GAP_ConnectionComplete_CB+0x10>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80045ce:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <GAP_ConnectionComplete_CB+0x14>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
  


}
 80045d6:	4770      	bx	lr
 80045d8:	2000009c 	.word	0x2000009c
 80045dc:	2000044c 	.word	0x2000044c

080045e0 <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 80045e0:	b500      	push	{lr}
 80045e2:	b0c1      	sub	sp, #260	; 0x104
  if (att_data[0] == 01) {
 80045e4:	7803      	ldrb	r3, [r0, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d011      	beq.n	800460e <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 80045ea:	b32b      	cbz	r3, 8004638 <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 80045ec:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <AccGyroMag_AttributeModified_CB+0x78>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f013 0f04 	tst.w	r3, #4
 80045f4:	d02e      	beq.n	8004654 <AccGyroMag_AttributeModified_CB+0x74>
 80045f6:	4a19      	ldr	r2, [pc, #100]	; (800465c <AccGyroMag_AttributeModified_CB+0x7c>)
 80045f8:	4919      	ldr	r1, [pc, #100]	; (8004660 <AccGyroMag_AttributeModified_CB+0x80>)
 80045fa:	4668      	mov	r0, sp
 80045fc:	f005 fb0e 	bl	8009c1c <siprintf>
 8004600:	b281      	uxth	r1, r0
 8004602:	4668      	mov	r0, sp
 8004604:	f000 fc9c 	bl	8004f40 <UART5_Transmit>

}
 8004608:	b041      	add	sp, #260	; 0x104
 800460a:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <AccGyroMag_AttributeModified_CB+0x78>)
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004618:	210c      	movs	r1, #12
 800461a:	4812      	ldr	r0, [pc, #72]	; (8004664 <AccGyroMag_AttributeModified_CB+0x84>)
 800461c:	f003 ff44 	bl	80084a8 <HAL_TIM_OC_Start_IT>
 8004620:	b938      	cbnz	r0, 8004632 <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <AccGyroMag_AttributeModified_CB+0x84>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004628:	490f      	ldr	r1, [pc, #60]	; (8004668 <AccGyroMag_AttributeModified_CB+0x88>)
 800462a:	6809      	ldr	r1, [r1, #0]
 800462c:	440b      	add	r3, r1
 800462e:	6413      	str	r3, [r2, #64]	; 0x40
 8004630:	e7dc      	b.n	80045ec <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004632:	f000 fff1 	bl	8005618 <Error_Handler>
 8004636:	e7f4      	b.n	8004622 <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <AccGyroMag_AttributeModified_CB+0x78>)
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004642:	210c      	movs	r1, #12
 8004644:	4807      	ldr	r0, [pc, #28]	; (8004664 <AccGyroMag_AttributeModified_CB+0x84>)
 8004646:	f004 f801 	bl	800864c <HAL_TIM_OC_Stop_IT>
 800464a:	2800      	cmp	r0, #0
 800464c:	d0ce      	beq.n	80045ec <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 800464e:	f000 ffe3 	bl	8005618 <Error_Handler>
 8004652:	e7cb      	b.n	80045ec <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004654:	4a05      	ldr	r2, [pc, #20]	; (800466c <AccGyroMag_AttributeModified_CB+0x8c>)
 8004656:	e7cf      	b.n	80045f8 <AccGyroMag_AttributeModified_CB+0x18>
 8004658:	2000044c 	.word	0x2000044c
 800465c:	0800a56c 	.word	0x0800a56c
 8004660:	0800a574 	.word	0x0800a574
 8004664:	20000260 	.word	0x20000260
 8004668:	20000004 	.word	0x20000004
 800466c:	0800a564 	.word	0x0800a564

08004670 <GAP_DisconnectionComplete_CB>:
{
 8004670:	b530      	push	{r4, r5, lr}
 8004672:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8004674:	2500      	movs	r5, #0
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <GAP_DisconnectionComplete_CB+0x48>)
 8004678:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 800467a:	46ec      	mov	ip, sp
 800467c:	4c0f      	ldr	r4, [pc, #60]	; (80046bc <GAP_DisconnectionComplete_CB+0x4c>)
 800467e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004688:	f84c 0b04 	str.w	r0, [ip], #4
 800468c:	f88c 1000 	strb.w	r1, [ip]
 8004690:	2114      	movs	r1, #20
 8004692:	4668      	mov	r0, sp
 8004694:	f000 fc54 	bl	8004f40 <UART5_Transmit>
  set_connectable = TRUE;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <GAP_DisconnectionComplete_CB+0x50>)
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <GAP_DisconnectionComplete_CB+0x54>)
 80046a0:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 80046a2:	210c      	movs	r1, #12
 80046a4:	4808      	ldr	r0, [pc, #32]	; (80046c8 <GAP_DisconnectionComplete_CB+0x58>)
 80046a6:	f003 ffd1 	bl	800864c <HAL_TIM_OC_Stop_IT>
 80046aa:	b908      	cbnz	r0, 80046b0 <GAP_DisconnectionComplete_CB+0x40>
}
 80046ac:	b041      	add	sp, #260	; 0x104
 80046ae:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80046b0:	f000 ffb2 	bl	8005618 <Error_Handler>
}
 80046b4:	e7fa      	b.n	80046ac <GAP_DisconnectionComplete_CB+0x3c>
 80046b6:	bf00      	nop
 80046b8:	2000009c 	.word	0x2000009c
 80046bc:	0800a588 	.word	0x0800a588
 80046c0:	20000000 	.word	0x20000000
 80046c4:	2000044c 	.word	0x2000044c
 80046c8:	20000260 	.word	0x20000260

080046cc <safe_aci_gatt_update_char_value>:
{
 80046cc:	b510      	push	{r4, lr}
 80046ce:	b082      	sub	sp, #8
  if (breath > 0) {
 80046d0:	4c09      	ldr	r4, [pc, #36]	; (80046f8 <safe_aci_gatt_update_char_value+0x2c>)
 80046d2:	68a4      	ldr	r4, [r4, #8]
 80046d4:	2c00      	cmp	r4, #0
 80046d6:	dd05      	ble.n	80046e4 <safe_aci_gatt_update_char_value+0x18>
    breath--;
 80046d8:	3c01      	subs	r4, #1
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <safe_aci_gatt_update_char_value+0x2c>)
 80046dc:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 80046de:	2064      	movs	r0, #100	; 0x64
}
 80046e0:	b002      	add	sp, #8
 80046e2:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 80046e4:	9c04      	ldr	r4, [sp, #16]
 80046e6:	9400      	str	r4, [sp, #0]
 80046e8:	f004 fea6 	bl	8009438 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d0f7      	beq.n	80046e0 <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <safe_aci_gatt_update_char_value+0x2c>)
 80046f2:	221e      	movs	r2, #30
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	e7f3      	b.n	80046e0 <safe_aci_gatt_update_char_value+0x14>
 80046f8:	2000009c 	.word	0x2000009c

080046fc <Add_HW_SW_ServW2ST_Service>:
{
 80046fc:	b530      	push	{r4, r5, lr}
 80046fe:	b0cb      	sub	sp, #300	; 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004700:	231b      	movs	r3, #27
 8004702:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004706:	23c5      	movs	r3, #197	; 0xc5
 8004708:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 800470c:	23d5      	movs	r3, #213	; 0xd5
 800470e:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004712:	23a5      	movs	r3, #165	; 0xa5
 8004714:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004718:	2002      	movs	r0, #2
 800471a:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
 800471e:	2300      	movs	r3, #0
 8004720:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004724:	22b4      	movs	r2, #180	; 0xb4
 8004726:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 800472a:	229a      	movs	r2, #154	; 0x9a
 800472c:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004730:	22e1      	movs	r2, #225	; 0xe1
 8004732:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004736:	2211      	movs	r2, #17
 8004738:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 800473c:	2201      	movs	r2, #1
 800473e:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004742:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004746:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 800474a:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 800474e:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
 8004752:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004756:	4b35      	ldr	r3, [pc, #212]	; (800482c <Add_HW_SW_ServW2ST_Service+0x130>)
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	230d      	movs	r3, #13
 800475c:	a946      	add	r1, sp, #280	; 0x118
 800475e:	f004 fdc0 	bl	80092e2 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 8004762:	2800      	cmp	r0, #0
 8004764:	d13e      	bne.n	80047e4 <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004766:	231b      	movs	r3, #27
 8004768:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 800476c:	23c5      	movs	r3, #197	; 0xc5
 800476e:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004772:	23d5      	movs	r3, #213	; 0xd5
 8004774:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004778:	23a5      	movs	r3, #165	; 0xa5
 800477a:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 800477e:	2102      	movs	r1, #2
 8004780:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 8004784:	2300      	movs	r3, #0
 8004786:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 800478a:	2236      	movs	r2, #54	; 0x36
 800478c:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004790:	22ac      	movs	r2, #172	; 0xac
 8004792:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004796:	22e1      	movs	r2, #225	; 0xe1
 8004798:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 800479c:	2211      	movs	r2, #17
 800479e:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 80047a2:	2201      	movs	r2, #1
 80047a4:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 80047a8:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 80047ac:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 80047b0:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 80047b4:	22e0      	movs	r2, #224	; 0xe0
 80047b6:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 80047ba:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 80047be:	481c      	ldr	r0, [pc, #112]	; (8004830 <Add_HW_SW_ServW2ST_Service+0x134>)
 80047c0:	f100 020e 	add.w	r2, r0, #14
 80047c4:	9205      	str	r2, [sp, #20]
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	2210      	movs	r2, #16
 80047ca:	9203      	str	r2, [sp, #12]
 80047cc:	2404      	movs	r4, #4
 80047ce:	9402      	str	r4, [sp, #8]
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	9200      	str	r2, [sp, #0]
 80047d4:	2314      	movs	r3, #20
 80047d6:	aa46      	add	r2, sp, #280	; 0x118
 80047d8:	8980      	ldrh	r0, [r0, #12]
 80047da:	f004 fdc7 	bl	800936c <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 80047de:	b9a0      	cbnz	r0, 800480a <Add_HW_SW_ServW2ST_Service+0x10e>
}
 80047e0:	b04b      	add	sp, #300	; 0x12c
 80047e2:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 80047e4:	f10d 0c18 	add.w	ip, sp, #24
 80047e8:	4c12      	ldr	r4, [pc, #72]	; (8004834 <Add_HW_SW_ServW2ST_Service+0x138>)
 80047ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80047f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80047f4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80047f8:	f88c 2000 	strb.w	r2, [ip]
 80047fc:	2118      	movs	r1, #24
 80047fe:	eb0d 0001 	add.w	r0, sp, r1
 8004802:	f000 fb9d 	bl	8004f40 <UART5_Transmit>
  return BLE_STATUS_ERROR;
 8004806:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004808:	e7ea      	b.n	80047e0 <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 800480a:	ac06      	add	r4, sp, #24
 800480c:	4d0a      	ldr	r5, [pc, #40]	; (8004838 <Add_HW_SW_ServW2ST_Service+0x13c>)
 800480e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004812:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004816:	c407      	stmia	r4!, {r0, r1, r2}
 8004818:	f824 3b02 	strh.w	r3, [r4], #2
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	7023      	strb	r3, [r4, #0]
 8004820:	211e      	movs	r1, #30
 8004822:	a806      	add	r0, sp, #24
 8004824:	f000 fb8c 	bl	8004f40 <UART5_Transmit>
  return BLE_STATUS_ERROR;
 8004828:	2047      	movs	r0, #71	; 0x47
    goto fail;
 800482a:	e7d9      	b.n	80047e0 <Add_HW_SW_ServW2ST_Service+0xe4>
 800482c:	200000a8 	.word	0x200000a8
 8004830:	2000009c 	.word	0x2000009c
 8004834:	0800a5a0 	.word	0x0800a5a0
 8004838:	0800a5bc 	.word	0x0800a5bc

0800483c <AccGyroMag_Update>:
{  
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	b0c8      	sub	sp, #288	; 0x120
 8004840:	4606      	mov	r6, r0
 8004842:	460d      	mov	r5, r1
 8004844:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8004846:	f001 fb0d 	bl	8005e64 <HAL_GetTick>
 800484a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800484e:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 8004852:	f001 fb07 	bl	8005e64 <HAL_GetTick>
 8004856:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 800485a:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 800485e:	6833      	ldr	r3, [r6, #0]
 8004860:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
 8004864:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004868:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 800486c:	6873      	ldr	r3, [r6, #4]
 800486e:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 8004872:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004876:	f88d 3111 	strb.w	r3, [sp, #273]	; 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 800487a:	68b3      	ldr	r3, [r6, #8]
 800487c:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
 8004880:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004884:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	f88d 2114 	strb.w	r2, [sp, #276]	; 0x114
 8004894:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004898:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 800489c:	f88d 3115 	strb.w	r3, [sp, #277]	; 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 80048a0:	686b      	ldr	r3, [r5, #4]
 80048a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80048a6:	0052      	lsls	r2, r2, #1
 80048a8:	f88d 2116 	strb.w	r2, [sp, #278]	; 0x116
 80048ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80048b0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80048b4:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
  STORE_LE_16(buff+12,Gyro->z);
 80048b8:	68ab      	ldr	r3, [r5, #8]
 80048ba:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 80048be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048c2:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
  STORE_LE_16(buff+14,Mag->x);
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 80048cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048d0:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
  STORE_LE_16(buff+16,Mag->y);
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 80048da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048de:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
  STORE_LE_16(buff+18,Mag->z);
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	f88d 311e 	strb.w	r3, [sp, #286]	; 0x11e
 80048e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048ec:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 80048f0:	480e      	ldr	r0, [pc, #56]	; (800492c <AccGyroMag_Update+0xf0>)
 80048f2:	ab43      	add	r3, sp, #268	; 0x10c
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2314      	movs	r3, #20
 80048f8:	2200      	movs	r2, #0
 80048fa:	89c1      	ldrh	r1, [r0, #14]
 80048fc:	8980      	ldrh	r0, [r0, #12]
 80048fe:	f7ff fee5 	bl	80046cc <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8004902:	b908      	cbnz	r0, 8004908 <AccGyroMag_Update+0xcc>
}
 8004904:	b048      	add	sp, #288	; 0x120
 8004906:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8004908:	ac03      	add	r4, sp, #12
 800490a:	4d09      	ldr	r5, [pc, #36]	; (8004930 <AccGyroMag_Update+0xf4>)
 800490c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800490e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	f824 3b02 	strh.w	r3, [r4], #2
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	7023      	strb	r3, [r4, #0]
 800491e:	2122      	movs	r1, #34	; 0x22
 8004920:	a803      	add	r0, sp, #12
 8004922:	f000 fb0d 	bl	8004f40 <UART5_Transmit>
    return BLE_STATUS_ERROR;
 8004926:	2047      	movs	r0, #71	; 0x47
 8004928:	e7ec      	b.n	8004904 <AccGyroMag_Update+0xc8>
 800492a:	bf00      	nop
 800492c:	2000009c 	.word	0x2000009c
 8004930:	0800a5dc 	.word	0x0800a5dc

08004934 <setConnectable>:
{  
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	b092      	sub	sp, #72	; 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 8004938:	2609      	movs	r6, #9
 800493a:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800493e:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <setConnectable+0xe8>)
 8004940:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004944:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
 8004948:	f893 c002 	ldrb.w	ip, [r3, #2]
 800494c:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
 8004950:	78dc      	ldrb	r4, [r3, #3]
 8004952:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
 8004956:	7918      	ldrb	r0, [r3, #4]
 8004958:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 800495c:	7959      	ldrb	r1, [r3, #5]
 800495e:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8004962:	799a      	ldrb	r2, [r3, #6]
 8004964:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8004968:	79db      	ldrb	r3, [r3, #7]
 800496a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  manuf_data[0 ] = 8U;
 800496e:	2508      	movs	r5, #8
 8004970:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  manuf_data[1 ] = 0x09U;
 8004974:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 8004978:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
  manuf_data[3 ] = NodeName[2];
 800497c:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
  manuf_data[4 ] = NodeName[3];
 8004980:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  manuf_data[5 ] = NodeName[4];
 8004984:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  manuf_data[6 ] = NodeName[5];
 8004988:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  manuf_data[7 ] = NodeName[6];
 800498c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  manuf_data[8 ] = NodeName[7];           
 8004990:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  manuf_data[9 ] = 15U;
 8004994:	230f      	movs	r3, #15
 8004996:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  manuf_data[10] = 0xFFU;
 800499a:	23ff      	movs	r3, #255	; 0xff
 800499c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 80049a0:	2330      	movs	r3, #48	; 0x30
 80049a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  manuf_data[12] = 0x00U;
 80049a6:	2400      	movs	r4, #0
 80049a8:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  manuf_data[13] = 0x02U;
 80049ac:	2302      	movs	r3, #2
 80049ae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 80049b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 80049b6:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  manuf_data[16] = 0x00U;
 80049ba:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  manuf_data[17] = 0x00U;
 80049be:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  manuf_data[18] = 0x00U;
 80049c2:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  manuf_data[19] = bdaddr[5];
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <setConnectable+0xec>)
 80049c8:	795a      	ldrb	r2, [r3, #5]
 80049ca:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  manuf_data[20] = bdaddr[4];
 80049ce:	791a      	ldrb	r2, [r3, #4]
 80049d0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[3];
 80049d4:	78da      	ldrb	r2, [r3, #3]
 80049d6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[2];
 80049da:	789a      	ldrb	r2, [r3, #2]
 80049dc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[1];
 80049e0:	785a      	ldrb	r2, [r3, #1]
 80049e2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[0];
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 80049ec:	4621      	mov	r1, r4
 80049ee:	4620      	mov	r0, r4
 80049f0:	f004 fe9b 	bl	800972a <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 80049f4:	9406      	str	r4, [sp, #24]
 80049f6:	9405      	str	r4, [sp, #20]
 80049f8:	9404      	str	r4, [sp, #16]
 80049fa:	9403      	str	r4, [sp, #12]
 80049fc:	ab10      	add	r3, sp, #64	; 0x40
 80049fe:	9302      	str	r3, [sp, #8]
 8004a00:	9501      	str	r5, [sp, #4]
 8004a02:	9400      	str	r4, [sp, #0]
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f004 fb71 	bl	80090f2 <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 8004a10:	a909      	add	r1, sp, #36	; 0x24
 8004a12:	2019      	movs	r0, #25
 8004a14:	f004 fc14 	bl	8009240 <aci_gap_update_adv_data>
}
 8004a18:	b012      	add	sp, #72	; 0x48
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	20000300 	.word	0x20000300
 8004a20:	20000258 	.word	0x20000258

08004a24 <Read_Request_CB>:
{
 8004a24:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 8004a26:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <Read_Request_CB+0x10>)
 8004a28:	8898      	ldrh	r0, [r3, #4]
 8004a2a:	b900      	cbnz	r0, 8004a2e <Read_Request_CB+0xa>
}
 8004a2c:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 8004a2e:	f004 fd3b 	bl	80094a8 <aci_gatt_allow_read>
}
 8004a32:	e7fb      	b.n	8004a2c <Read_Request_CB+0x8>
 8004a34:	2000009c 	.word	0x2000009c

08004a38 <Attribute_Modified_CB>:
{
 8004a38:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <Attribute_Modified_CB+0x18>)
 8004a3c:	89db      	ldrh	r3, [r3, #14]
 8004a3e:	3302      	adds	r3, #2
 8004a40:	4298      	cmp	r0, r3
 8004a42:	d000      	beq.n	8004a46 <Attribute_Modified_CB+0xe>
}
 8004a44:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 8004a46:	4608      	mov	r0, r1
 8004a48:	f7ff fdca 	bl	80045e0 <AccGyroMag_AttributeModified_CB>
}
 8004a4c:	e7fa      	b.n	8004a44 <Attribute_Modified_CB+0xc>
 8004a4e:	bf00      	nop
 8004a50:	2000009c 	.word	0x2000009c

08004a54 <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8004a54:	b530      	push	{r4, r5, lr}
 8004a56:	b0c1      	sub	sp, #260	; 0x104
 8004a58:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 8004a5a:	46ec      	mov	ip, sp
 8004a5c:	4c1d      	ldr	r4, [pc, #116]	; (8004ad4 <HCI_Event_CB+0x80>)
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	f88c 3000 	strb.w	r3, [ip]
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	4668      	mov	r0, sp
 8004a6e:	f000 fa67 	bl	8004f40 <UART5_Transmit>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 8004a72:	782b      	ldrb	r3, [r5, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d106      	bne.n	8004a86 <HCI_Event_CB+0x32>
    return;
  }
  
  switch(event_pckt->evt){
 8004a78:	786b      	ldrb	r3, [r5, #1]
 8004a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7c:	d008      	beq.n	8004a90 <HCI_Event_CB+0x3c>
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d010      	beq.n	8004aa4 <HCI_Event_CB+0x50>
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d001      	beq.n	8004a8a <HCI_Event_CB+0x36>
        break;
      }
    }
    break;
  }
}
 8004a86:	b041      	add	sp, #260	; 0x104
 8004a88:	bd30      	pop	{r4, r5, pc}
      GAP_DisconnectionComplete_CB();
 8004a8a:	f7ff fdf1 	bl	8004670 <GAP_DisconnectionComplete_CB>
    break;
 8004a8e:	e7fa      	b.n	8004a86 <HCI_Event_CB+0x32>
      switch(evt->subevent){
 8004a90:	78eb      	ldrb	r3, [r5, #3]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d1f7      	bne.n	8004a86 <HCI_Event_CB+0x32>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8004a96:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 8004a9a:	f105 0009 	add.w	r0, r5, #9
 8004a9e:	f7ff fd93 	bl	80045c8 <GAP_ConnectionComplete_CB>
        break;
 8004aa2:	e7f0      	b.n	8004a86 <HCI_Event_CB+0x32>
      switch(blue_evt->ecode){
 8004aa4:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8004aa8:	f640 4201 	movw	r2, #3073	; 0xc01
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d008      	beq.n	8004ac2 <HCI_Event_CB+0x6e>
 8004ab0:	f640 4214 	movw	r2, #3092	; 0xc14
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d1e6      	bne.n	8004a86 <HCI_Event_CB+0x32>
          Read_Request_CB(pr->attr_handle);                    
 8004ab8:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8004abc:	f7ff ffb2 	bl	8004a24 <Read_Request_CB>
        break;
 8004ac0:	e7e1      	b.n	8004a86 <HCI_Event_CB+0x32>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8004ac2:	7a6a      	ldrb	r2, [r5, #9]
 8004ac4:	f105 010c 	add.w	r1, r5, #12
 8004ac8:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8004acc:	f7ff ffb4 	bl	8004a38 <Attribute_Modified_CB>
        break;
 8004ad0:	e7d9      	b.n	8004a86 <HCI_Event_CB+0x32>
 8004ad2:	bf00      	nop
 8004ad4:	0800a600 	.word	0x0800a600

08004ad8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b0c9      	sub	sp, #292	; 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 8004adc:	f001 fc3c 	bl	8006358 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HCI_TL_SPI_Init+0xb4>)
 8004ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af6:	f042 0204 	orr.w	r2, r2, #4
 8004afa:	64da      	str	r2, [r3, #76]	; 0x4c
 8004afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004afe:	f002 0204 	and.w	r2, r2, #4
 8004b02:	9201      	str	r2, [sp, #4]
 8004b04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b08:	f042 0202 	orr.w	r2, r2, #2
 8004b0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004b18:	4e1d      	ldr	r6, [pc, #116]	; (8004b90 <HCI_TL_SPI_Init+0xb8>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f001 fbed 	bl	80062fe <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8004b24:	2320      	movs	r3, #32
 8004b26:	9343      	str	r3, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HCI_TL_SPI_Init+0xbc>)
 8004b2a:	9344      	str	r3, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2c:	2400      	movs	r4, #0
 8004b2e:	9445      	str	r4, [sp, #276]	; 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8004b30:	a943      	add	r1, sp, #268	; 0x10c
 8004b32:	4819      	ldr	r0, [pc, #100]	; (8004b98 <HCI_TL_SPI_Init+0xc0>)
 8004b34:	f001 fa56 	bl	8005fe4 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004b38:	2501      	movs	r5, #1
 8004b3a:	9543      	str	r5, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3c:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b40:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8004b42:	a943      	add	r1, sp, #268	; 0x10c
 8004b44:	4815      	ldr	r0, [pc, #84]	; (8004b9c <HCI_TL_SPI_Init+0xc4>)
 8004b46:	f001 fa4d 	bl	8005fe4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004b4a:	2704      	movs	r7, #4
 8004b4c:	9743      	str	r7, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4e:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b52:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8004b54:	a943      	add	r1, sp, #268	; 0x10c
 8004b56:	4630      	mov	r0, r6
 8004b58:	f001 fa44 	bl	8005fe4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4630      	mov	r0, r6
 8004b62:	f001 fbcc 	bl	80062fe <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 8004b66:	f10d 0c0c 	add.w	ip, sp, #12
 8004b6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <HCI_TL_SPI_Init+0xc8>)
 8004b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b76:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004b7a:	2117      	movs	r1, #23
 8004b7c:	a803      	add	r0, sp, #12
 8004b7e:	f000 f9df 	bl	8004f40 <UART5_Transmit>
    
  return BSP_SPI1_Init();
 8004b82:	f001 f897 	bl	8005cb4 <BSP_SPI1_Init>
}
 8004b86:	b049      	add	sp, #292	; 0x124
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	48000400 	.word	0x48000400
 8004b94:	10110000 	.word	0x10110000
 8004b98:	48000800 	.word	0x48000800
 8004b9c:	48001c00 	.word	0x48001c00
 8004ba0:	0800a614 	.word	0x0800a614

08004ba4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8004ba4:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	4806      	ldr	r0, [pc, #24]	; (8004bc4 <HCI_TL_SPI_DeInit+0x20>)
 8004baa:	f001 fb09 	bl	80061c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8004bae:	2104      	movs	r1, #4
 8004bb0:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <HCI_TL_SPI_DeInit+0x24>)
 8004bb2:	f001 fb05 	bl	80061c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4804      	ldr	r0, [pc, #16]	; (8004bcc <HCI_TL_SPI_DeInit+0x28>)
 8004bba:	f001 fb01 	bl	80061c0 <HAL_GPIO_DeInit>
  return 0;
}
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bd08      	pop	{r3, pc}
 8004bc2:	bf00      	nop
 8004bc4:	48000800 	.word	0x48000800
 8004bc8:	48000400 	.word	0x48000400
 8004bcc:	48001c00 	.word	0x48001c00

08004bd0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8004bd0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8004bd2:	4c09      	ldr	r4, [pc, #36]	; (8004bf8 <HCI_TL_SPI_Reset+0x28>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f001 fb90 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8004bde:	2005      	movs	r0, #5
 8004be0:	f000 fd0a 	bl	80055f8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8004be4:	2201      	movs	r2, #1
 8004be6:	4611      	mov	r1, r2
 8004be8:	4620      	mov	r0, r4
 8004bea:	f001 fb88 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8004bee:	2005      	movs	r0, #5
 8004bf0:	f000 fd02 	bl	80055f8 <HAL_Delay>
  return 0;
}  
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	bd10      	pop	{r4, pc}
 8004bf8:	48001c00 	.word	0x48001c00

08004bfc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	4606      	mov	r6, r0
 8004c02:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8004c04:	23ff      	movs	r3, #255	; 0xff
 8004c06:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HCI_TL_SPI_Receive+0x84>)
 8004c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2104      	movs	r1, #4
 8004c1a:	481a      	ldr	r0, [pc, #104]	; (8004c84 <HCI_TL_SPI_Receive+0x88>)
 8004c1c:	f001 fb6f 	bl	80062fe <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8004c20:	2205      	movs	r2, #5
 8004c22:	4669      	mov	r1, sp
 8004c24:	a802      	add	r0, sp, #8
 8004c26:	f001 f809 	bl	8005c3c <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8004c2a:	f89d 3000 	ldrb.w	r3, [sp]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d008      	beq.n	8004c44 <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 8004c32:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004c34:	2201      	movs	r2, #1
 8004c36:	2104      	movs	r1, #4
 8004c38:	4812      	ldr	r0, [pc, #72]	; (8004c84 <HCI_TL_SPI_Receive+0x88>)
 8004c3a:	f001 fb60 	bl	80062fe <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8004c3e:	4620      	mov	r0, r4
 8004c40:	b004      	add	sp, #16
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8004c44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8004c4c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8004c50:	d014      	beq.n	8004c7c <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	d800      	bhi.n	8004c58 <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8004c56:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 8004c58:	2400      	movs	r4, #0
 8004c5a:	e00b      	b.n	8004c74 <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f10d 010e 	add.w	r1, sp, #14
 8004c62:	f10d 000f 	add.w	r0, sp, #15
 8004c66:	f000 ffe9 	bl	8005c3c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8004c6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004c6e:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8004c70:	3401      	adds	r4, #1
 8004c72:	b2e4      	uxtb	r4, r4
 8004c74:	b2a3      	uxth	r3, r4
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	d3f0      	bcc.n	8004c5c <HCI_TL_SPI_Receive+0x60>
 8004c7a:	e7db      	b.n	8004c34 <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8004c7c:	2400      	movs	r4, #0
 8004c7e:	e7d9      	b.n	8004c34 <HCI_TL_SPI_Receive+0x38>
 8004c80:	0800a4f8 	.word	0x0800a4f8
 8004c84:	48000400 	.word	0x48000400

08004c88 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8004c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <HCI_TL_SPI_Send+0x7c>)
 8004c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c96:	9002      	str	r0, [sp, #8]
 8004c98:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f001 f8e2 	bl	8005e64 <HAL_GetTick>
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	e011      	b.n	8004cc8 <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8004ca4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004ca8:	42b3      	cmp	r3, r6
 8004caa:	d21e      	bcs.n	8004cea <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8004cac:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	4814      	ldr	r0, [pc, #80]	; (8004d08 <HCI_TL_SPI_Send+0x80>)
 8004cb6:	f001 fb22 	bl	80062fe <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8004cba:	f001 f8d3 	bl	8005e64 <HAL_GetTick>
 8004cbe:	1b40      	subs	r0, r0, r5
 8004cc0:	280f      	cmp	r0, #15
 8004cc2:	d819      	bhi.n	8004cf8 <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	da19      	bge.n	8004cfc <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2104      	movs	r1, #4
 8004ccc:	480e      	ldr	r0, [pc, #56]	; (8004d08 <HCI_TL_SPI_Send+0x80>)
 8004cce:	f001 fb16 	bl	80062fe <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	4669      	mov	r1, sp
 8004cd6:	a802      	add	r0, sp, #8
 8004cd8:	f000 ffb0 	bl	8005c3c <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8004cdc:	f89d 3000 	ldrb.w	r3, [sp]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d0df      	beq.n	8004ca4 <HCI_TL_SPI_Send+0x1c>
      result = -1;
 8004ce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ce8:	e7e2      	b.n	8004cb0 <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8004cea:	4632      	mov	r2, r6
 8004cec:	4907      	ldr	r1, [pc, #28]	; (8004d0c <HCI_TL_SPI_Send+0x84>)
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f000 ffa4 	bl	8005c3c <BSP_SPI1_SendRecv>
    result = 0;
 8004cf4:	2400      	movs	r4, #0
 8004cf6:	e7db      	b.n	8004cb0 <HCI_TL_SPI_Send+0x28>
      result = -3;
 8004cf8:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	b005      	add	sp, #20
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	0800a500 	.word	0x0800a500
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	200000b0 	.word	0x200000b0

08004d10 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8004d10:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8004d12:	2120      	movs	r1, #32
 8004d14:	4803      	ldr	r0, [pc, #12]	; (8004d24 <IsDataAvailable+0x14>)
 8004d16:	f001 faeb 	bl	80062f0 <HAL_GPIO_ReadPin>
} 
 8004d1a:	2801      	cmp	r0, #1
 8004d1c:	bf14      	ite	ne
 8004d1e:	2000      	movne	r0, #0
 8004d20:	2001      	moveq	r0, #1
 8004d22:	bd08      	pop	{r3, pc}
 8004d24:	48000800 	.word	0x48000800

08004d28 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8004d28:	b500      	push	{lr}
 8004d2a:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <hci_tl_lowlevel_init+0x38>)
 8004d2e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <hci_tl_lowlevel_init+0x3c>)
 8004d32:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <hci_tl_lowlevel_init+0x40>)
 8004d36:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <hci_tl_lowlevel_init+0x44>)
 8004d3a:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <hci_tl_lowlevel_init+0x48>)
 8004d3e:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <hci_tl_lowlevel_init+0x4c>)
 8004d42:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 8004d44:	a801      	add	r0, sp, #4
 8004d46:	f004 fdb1 	bl	80098ac <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	2017      	movs	r0, #23
 8004d50:	f001 f8a0 	bl	8005e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d54:	2017      	movs	r0, #23
 8004d56:	f001 f8d5 	bl	8005f04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8004d5a:	b009      	add	sp, #36	; 0x24
 8004d5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d60:	08004ad9 	.word	0x08004ad9
 8004d64:	08004ba5 	.word	0x08004ba5
 8004d68:	08004c89 	.word	0x08004c89
 8004d6c:	08004bfd 	.word	0x08004bfd
 8004d70:	08004bd1 	.word	0x08004bd1
 8004d74:	08005c69 	.word	0x08005c69

08004d78 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8004d78:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8004d7a:	f7ff ffc9 	bl	8004d10 <IsDataAvailable>
 8004d7e:	b120      	cbz	r0, 8004d8a <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8004d80:	2000      	movs	r0, #0
 8004d82:	f004 fe6d 	bl	8009a60 <hci_notify_asynch_evt>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0f7      	beq.n	8004d7a <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8004d8a:	bd08      	pop	{r3, pc}

08004d8c <readMag>:
static void readMag() {

	//#CS704 - Read Magnetometer Data over SPI

	//#CS704 - store sensor values into the variables below
	MAG_Value.x=100;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <readMag+0x14>)
 8004d8e:	2264      	movs	r2, #100	; 0x64
 8004d90:	601a      	str	r2, [r3, #0]
	MAG_Value.y=200;
 8004d92:	22c8      	movs	r2, #200	; 0xc8
 8004d94:	605a      	str	r2, [r3, #4]
	MAG_Value.z=1000;
 8004d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d9a:	609a      	str	r2, [r3, #8]

//	XPRINTF("MAG=%d,%d,%d\r\n",magx,magy,magz);
}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	200001b0 	.word	0x200001b0

08004da4 <readAcc>:
static void readAcc() {

	//#CS704 - Read Accelerometer Data over SPI

	//#CS704 - store sensor values into the variables below
	ACC_Value.x=100;
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <readAcc+0x14>)
 8004da6:	2264      	movs	r2, #100	; 0x64
 8004da8:	60da      	str	r2, [r3, #12]
	ACC_Value.y=200;
 8004daa:	22c8      	movs	r2, #200	; 0xc8
 8004dac:	611a      	str	r2, [r3, #16]
	ACC_Value.z=1000;
 8004dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004db2:	615a      	str	r2, [r3, #20]

//	XPRINTF("ACC=%d,%d,%d\r\n",accx,accy,accz);
}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	200001b0 	.word	0x200001b0

08004dbc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dc0:	2400      	movs	r4, #0
 8004dc2:	9435      	str	r4, [sp, #212]	; 0xd4
 8004dc4:	9436      	str	r4, [sp, #216]	; 0xd8
 8004dc6:	9437      	str	r4, [sp, #220]	; 0xdc
 8004dc8:	9438      	str	r4, [sp, #224]	; 0xe0
 8004dca:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dcc:	2244      	movs	r2, #68	; 0x44
 8004dce:	4621      	mov	r1, r4
 8004dd0:	a824      	add	r0, sp, #144	; 0x90
 8004dd2:	f004 ff1b 	bl	8009c0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dd6:	2288      	movs	r2, #136	; 0x88
 8004dd8:	4621      	mov	r1, r4
 8004dda:	a802      	add	r0, sp, #8
 8004ddc:	f004 ff16 	bl	8009c0c <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <SystemClock_Config+0xc0>)
 8004de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004de8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 8004df4:	f001 faa0 	bl	8006338 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8004e00:	a824      	add	r0, sp, #144	; 0x90
 8004e02:	f001 fb53 	bl	80064ac <HAL_RCC_OscConfig>
 8004e06:	b100      	cbz	r0, 8004e0a <SystemClock_Config+0x4e>
    while(1);
 8004e08:	e7fe      	b.n	8004e08 <SystemClock_Config+0x4c>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8004e0a:	f002 fac5 	bl	8007398 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004e0e:	2310      	movs	r3, #16
 8004e10:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004e12:	2301      	movs	r3, #1
 8004e14:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004e16:	2200      	movs	r2, #0
 8004e18:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004e1a:	22b0      	movs	r2, #176	; 0xb0
 8004e1c:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004e1e:	2202      	movs	r2, #2
 8004e20:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8004e22:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8004e24:	2306      	movs	r3, #6
 8004e26:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8004e28:	2328      	movs	r3, #40	; 0x28
 8004e2a:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004e30:	2304      	movs	r3, #4
 8004e32:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8004e34:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8004e36:	a824      	add	r0, sp, #144	; 0x90
 8004e38:	f001 fb38 	bl	80064ac <HAL_RCC_OscConfig>
 8004e3c:	b100      	cbz	r0, 8004e40 <SystemClock_Config+0x84>
    while(1);
 8004e3e:	e7fe      	b.n	8004e3e <SystemClock_Config+0x82>
  }
  
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e44:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e4a:	9323      	str	r3, [sp, #140]	; 0x8c
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e4c:	a802      	add	r0, sp, #8
 8004e4e:	f002 f879 	bl	8006f44 <HAL_RCCEx_PeriphCLKConfig>
 8004e52:	b100      	cbz	r0, 8004e56 <SystemClock_Config+0x9a>
  {
    while(1);
 8004e54:	e7fe      	b.n	8004e54 <SystemClock_Config+0x98>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8004e56:	f002 faad 	bl	80073b4 <HAL_RCCEx_EnableMSIPLLMode>
//  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
//  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004e5a:	230f      	movs	r3, #15
 8004e5c:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e62:	2300      	movs	r3, #0
 8004e64:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e66:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e68:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	a835      	add	r0, sp, #212	; 0xd4
 8004e6e:	f001 fe33 	bl	8006ad8 <HAL_RCC_ClockConfig>
 8004e72:	b100      	cbz	r0, 8004e76 <SystemClock_Config+0xba>
    while(1);
 8004e74:	e7fe      	b.n	8004e74 <SystemClock_Config+0xb8>
  }
}
 8004e76:	b03a      	add	sp, #232	; 0xe8
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000

08004e80 <BSP_LSM303AGR_WriteReg_Acc>:
{
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	460d      	mov	r5, r1
 8004e86:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8004e88:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_ACC_CS_LOW();
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2110      	movs	r1, #16
 8004e90:	480f      	ldr	r0, [pc, #60]	; (8004ed0 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8004e92:	f001 fa34 	bl	80062fe <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8004e96:	2101      	movs	r1, #1
 8004e98:	f10d 0007 	add.w	r0, sp, #7
 8004e9c:	f000 febc 	bl	8005c18 <BSP_SPI2_Send>
 8004ea0:	2801      	cmp	r0, #1
 8004ea2:	d00f      	beq.n	8004ec4 <BSP_LSM303AGR_WriteReg_Acc+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ea4:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 feb4 	bl	8005c18 <BSP_SPI2_Send>
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d109      	bne.n	8004ec8 <BSP_LSM303AGR_WriteReg_Acc+0x48>
  LSM_ACC_CS_HIGH();
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	4805      	ldr	r0, [pc, #20]	; (8004ed0 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8004eba:	f001 fa20 	bl	80062fe <HAL_GPIO_WritePin>
}
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	e7ef      	b.n	8004ea8 <BSP_LSM303AGR_WriteReg_Acc+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ec8:	f06f 0605 	mvn.w	r6, #5
 8004ecc:	e7f2      	b.n	8004eb4 <BSP_LSM303AGR_WriteReg_Acc+0x34>
 8004ece:	bf00      	nop
 8004ed0:	48000800 	.word	0x48000800

08004ed4 <BSP_LSM303AGR_WriteReg_Mag>:
{
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	460d      	mov	r5, r1
 8004eda:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8004edc:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_MAG_CS_LOW();
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	480f      	ldr	r0, [pc, #60]	; (8004f24 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 8004ee6:	f001 fa0a 	bl	80062fe <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8004eea:	2101      	movs	r1, #1
 8004eec:	f10d 0007 	add.w	r0, sp, #7
 8004ef0:	f000 fe92 	bl	8005c18 <BSP_SPI2_Send>
 8004ef4:	2801      	cmp	r0, #1
 8004ef6:	d00f      	beq.n	8004f18 <BSP_LSM303AGR_WriteReg_Mag+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ef8:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fe8a 	bl	8005c18 <BSP_SPI2_Send>
 8004f04:	42a0      	cmp	r0, r4
 8004f06:	d109      	bne.n	8004f1c <BSP_LSM303AGR_WriteReg_Mag+0x48>
  LSM_MAG_CS_HIGH();
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	4805      	ldr	r0, [pc, #20]	; (8004f24 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 8004f0e:	f001 f9f6 	bl	80062fe <HAL_GPIO_WritePin>
}
 8004f12:	4630      	mov	r0, r6
 8004f14:	b002      	add	sp, #8
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8004f18:	2600      	movs	r6, #0
 8004f1a:	e7ef      	b.n	8004efc <BSP_LSM303AGR_WriteReg_Mag+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004f1c:	f06f 0605 	mvn.w	r6, #5
 8004f20:	e7f2      	b.n	8004f08 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 8004f22:	bf00      	nop
 8004f24:	48000400 	.word	0x48000400

08004f28 <SendMotionData>:
{
 8004f28:	b508      	push	{r3, lr}
  AccGyroMag_Update(&ACC_Value,(BSP_MOTION_SENSOR_Axes_t*)&COMP_Value,&MAG_Value);
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <SendMotionData+0x14>)
 8004f2c:	f102 0118 	add.w	r1, r2, #24
 8004f30:	f102 000c 	add.w	r0, r2, #12
 8004f34:	f7ff fc82 	bl	800483c <AccGyroMag_Update>
}
 8004f38:	bd08      	pop	{r3, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200001b0 	.word	0x200001b0

08004f40 <UART5_Transmit>:
void UART5_Transmit(uint8_t* BufferToWrite, uint16_t BytesToWrite) {
 8004f40:	b508      	push	{r3, lr}
 8004f42:	460a      	mov	r2, r1
	HAL_UART_Transmit(&UartHandle, (uint8_t*)BufferToWrite, BytesToWrite,1000);
 8004f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f48:	4601      	mov	r1, r0
 8004f4a:	4802      	ldr	r0, [pc, #8]	; (8004f54 <UART5_Transmit+0x14>)
 8004f4c:	f003 ffc3 	bl	8008ed6 <HAL_UART_Transmit>
}
 8004f50:	bd08      	pop	{r3, pc}
 8004f52:	bf00      	nop
 8004f54:	200001d4 	.word	0x200001d4

08004f58 <Init_BlueNRG_Stack>:
{
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b0d3      	sub	sp, #332	; 0x14c
  char customName[8] = "CSys704";
 8004f5c:	4a70      	ldr	r2, [pc, #448]	; (8005120 <Init_BlueNRG_Stack+0x1c8>)
 8004f5e:	ab4e      	add	r3, sp, #312	; 0x138
 8004f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f64:	e883 0003 	stmia.w	r3, {r0, r1}
  for(int i=0; i<7; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	dc08      	bgt.n	8004f80 <Init_BlueNRG_Stack+0x28>
    BoardName[i]= customName[i];
 8004f6e:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8004f72:	446a      	add	r2, sp
 8004f74:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8004f78:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(int i=0; i<7; i++)
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	e7f4      	b.n	8004f6a <Init_BlueNRG_Stack+0x12>
  BoardName[7]= 0;
 8004f80:	2100      	movs	r1, #0
 8004f82:	f88d 1147 	strb.w	r1, [sp, #327]	; 0x147
  hci_init(HCI_Event_CB, NULL);
 8004f86:	4867      	ldr	r0, [pc, #412]	; (8005124 <Init_BlueNRG_Stack+0x1cc>)
 8004f88:	f004 fc66 	bl	8009858 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8004f8c:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 8004f90:	a84c      	add	r0, sp, #304	; 0x130
 8004f92:	f004 fb47 	bl	8009624 <getBlueNRGVersion>
  aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 8004f96:	4c64      	ldr	r4, [pc, #400]	; (8005128 <Init_BlueNRG_Stack+0x1d0>)
 8004f98:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8004f9c:	f20d 1231 	addw	r2, sp, #305	; 0x131
 8004fa0:	2106      	movs	r1, #6
 8004fa2:	2080      	movs	r0, #128	; 0x80
 8004fa4:	f004 fada 	bl	800955c <aci_hal_read_config_data>
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8004fa8:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 8004fac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fb0:	2bc0      	cmp	r3, #192	; 0xc0
 8004fb2:	d016      	beq.n	8004fe2 <Init_BlueNRG_Stack+0x8a>
    XPRINTF("\r\nStatic Random address not well formed.\r\n");
 8004fb4:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8004fb8:	4c5c      	ldr	r4, [pc, #368]	; (800512c <Init_BlueNRG_Stack+0x1d4>)
 8004fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fc6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004fca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004fce:	f82c 2b02 	strh.w	r2, [ip], #2
 8004fd2:	0c12      	lsrs	r2, r2, #16
 8004fd4:	f88c 2000 	strb.w	r2, [ip]
 8004fd8:	212a      	movs	r1, #42	; 0x2a
 8004fda:	a80b      	add	r0, sp, #44	; 0x2c
 8004fdc:	f7ff ffb0 	bl	8004f40 <UART5_Transmit>
    while(1);
 8004fe0:	e7fe      	b.n	8004fe0 <Init_BlueNRG_Stack+0x88>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 8004fe2:	4a53      	ldr	r2, [pc, #332]	; (8005130 <Init_BlueNRG_Stack+0x1d8>)
 8004fe4:	f89d 1131 	ldrb.w	r1, [sp, #305]	; 0x131
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f004 fa84 	bl	80094f6 <aci_hal_write_config_data>
  hci_reset();
 8004fee:	f004 fb43 	bl	8009678 <hci_reset>
  ret = aci_gatt_init();    
 8004ff2:	f004 f955 	bl	80092a0 <aci_gatt_init>
  if(ret){
 8004ff6:	bb38      	cbnz	r0, 8005048 <Init_BlueNRG_Stack+0xf0>
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8004ff8:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	ab4d      	add	r3, sp, #308	; 0x134
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 8005006:	2207      	movs	r2, #7
 8005008:	2100      	movs	r1, #0
 800500a:	2001      	movs	r0, #1
 800500c:	f004 f839 	bl	8009082 <aci_gap_init_IDB05A1>
  if(ret != BLE_STATUS_SUCCESS){
 8005010:	bb48      	cbnz	r0, 8005066 <Init_BlueNRG_Stack+0x10e>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8005012:	ab50      	add	r3, sp, #320	; 0x140
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2307      	movs	r3, #7
 8005018:	2200      	movs	r2, #0
 800501a:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 800501e:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 8005022:	f004 fa09 	bl	8009438 <aci_gatt_update_char_value>
  if(ret){
 8005026:	b348      	cbz	r0, 800507c <Init_BlueNRG_Stack+0x124>
     XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8005028:	ac0b      	add	r4, sp, #44	; 0x2c
 800502a:	4d42      	ldr	r5, [pc, #264]	; (8005134 <Init_BlueNRG_Stack+0x1dc>)
 800502c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800502e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005034:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005038:	f844 0b04 	str.w	r0, [r4], #4
 800503c:	8021      	strh	r1, [r4, #0]
 800503e:	2125      	movs	r1, #37	; 0x25
 8005040:	a80b      	add	r0, sp, #44	; 0x2c
 8005042:	f7ff ff7d 	bl	8004f40 <UART5_Transmit>
    while(1);
 8005046:	e7fe      	b.n	8005046 <Init_BlueNRG_Stack+0xee>
     XPRINTF("\r\nGATT_Init failed\r\n");
 8005048:	ac0b      	add	r4, sp, #44	; 0x2c
 800504a:	4d3b      	ldr	r5, [pc, #236]	; (8005138 <Init_BlueNRG_Stack+0x1e0>)
 800504c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005050:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005054:	f844 0b04 	str.w	r0, [r4], #4
 8005058:	7021      	strb	r1, [r4, #0]
 800505a:	2114      	movs	r1, #20
 800505c:	a80b      	add	r0, sp, #44	; 0x2c
 800505e:	f7ff ff6f 	bl	8004f40 <UART5_Transmit>
}
 8005062:	b053      	add	sp, #332	; 0x14c
 8005064:	bdf0      	pop	{r4, r5, r6, r7, pc}
     XPRINTF("\r\nGAP_Init failed\r\n");
 8005066:	ac0b      	add	r4, sp, #44	; 0x2c
 8005068:	4d34      	ldr	r5, [pc, #208]	; (800513c <Init_BlueNRG_Stack+0x1e4>)
 800506a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800506c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2113      	movs	r1, #19
 8005074:	a80b      	add	r0, sp, #44	; 0x2c
 8005076:	f7ff ff63 	bl	8004f40 <UART5_Transmit>
     goto fail;
 800507a:	e7f2      	b.n	8005062 <Init_BlueNRG_Stack+0x10a>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800507c:	2001      	movs	r0, #1
 800507e:	9003      	str	r0, [sp, #12]
 8005080:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <Init_BlueNRG_Stack+0x1e8>)
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	2100      	movs	r1, #0
 8005086:	9101      	str	r1, [sp, #4]
 8005088:	2310      	movs	r3, #16
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2307      	movs	r3, #7
 800508e:	460a      	mov	r2, r1
 8005090:	f004 f88f 	bl	80091b2 <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) {
 8005094:	2800      	cmp	r0, #0
 8005096:	d132      	bne.n	80050fe <Init_BlueNRG_Stack+0x1a6>
  XPRINTF("SERVER: BLE Stack Initialized \r\n"
 8005098:	f89d 2130 	ldrb.w	r2, [sp, #304]	; 0x130
 800509c:	f8bd 112e 	ldrh.w	r1, [sp, #302]	; 0x12e
 80050a0:	f001 000f 	and.w	r0, r1, #15
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <Init_BlueNRG_Stack+0x1d0>)
 80050a6:	f893 40ad 	ldrb.w	r4, [r3, #173]	; 0xad
 80050aa:	f893 70ac 	ldrb.w	r7, [r3, #172]	; 0xac
 80050ae:	f893 e0ab 	ldrb.w	lr, [r3, #171]	; 0xab
 80050b2:	f893 50aa 	ldrb.w	r5, [r3, #170]	; 0xaa
 80050b6:	f893 60a9 	ldrb.w	r6, [r3, #169]	; 0xa9
 80050ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80050be:	9309      	str	r3, [sp, #36]	; 0x24
 80050c0:	9608      	str	r6, [sp, #32]
 80050c2:	9507      	str	r5, [sp, #28]
 80050c4:	f8cd e018 	str.w	lr, [sp, #24]
 80050c8:	9705      	str	r7, [sp, #20]
 80050ca:	9404      	str	r4, [sp, #16]
 80050cc:	ab50      	add	r3, sp, #320	; 0x140
 80050ce:	9303      	str	r3, [sp, #12]
 80050d0:	3061      	adds	r0, #97	; 0x61
 80050d2:	9002      	str	r0, [sp, #8]
 80050d4:	f3c1 1303 	ubfx	r3, r1, #4, #4
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	0a09      	lsrs	r1, r1, #8
 80050dc:	9100      	str	r1, [sp, #0]
 80050de:	f002 030f 	and.w	r3, r2, #15
 80050e2:	0912      	lsrs	r2, r2, #4
 80050e4:	4917      	ldr	r1, [pc, #92]	; (8005144 <Init_BlueNRG_Stack+0x1ec>)
 80050e6:	a80b      	add	r0, sp, #44	; 0x2c
 80050e8:	f004 fd98 	bl	8009c1c <siprintf>
 80050ec:	b281      	uxth	r1, r0
 80050ee:	a80b      	add	r0, sp, #44	; 0x2c
 80050f0:	f7ff ff26 	bl	8004f40 <UART5_Transmit>
  aci_hal_set_tx_power_level(1,4);
 80050f4:	2104      	movs	r1, #4
 80050f6:	2001      	movs	r0, #1
 80050f8:	f004 fa6c 	bl	80095d4 <aci_hal_set_tx_power_level>
  return;
 80050fc:	e7b1      	b.n	8005062 <Init_BlueNRG_Stack+0x10a>
     XPRINTF("\r\nGAP setting Authentication failed\r\n");
 80050fe:	ac0b      	add	r4, sp, #44	; 0x2c
 8005100:	4d11      	ldr	r5, [pc, #68]	; (8005148 <Init_BlueNRG_Stack+0x1f0>)
 8005102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800510a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800510e:	f844 0b04 	str.w	r0, [r4], #4
 8005112:	8021      	strh	r1, [r4, #0]
 8005114:	2125      	movs	r1, #37	; 0x25
 8005116:	a80b      	add	r0, sp, #44	; 0x2c
 8005118:	f7ff ff12 	bl	8004f40 <UART5_Transmit>
     goto fail;
 800511c:	e7a1      	b.n	8005062 <Init_BlueNRG_Stack+0x10a>
 800511e:	bf00      	nop
 8005120:	0800a748 	.word	0x0800a748
 8005124:	08004a55 	.word	0x08004a55
 8005128:	200001b0 	.word	0x200001b0
 800512c:	0800a62c 	.word	0x0800a62c
 8005130:	20000258 	.word	0x20000258
 8005134:	0800a684 	.word	0x0800a684
 8005138:	0800a658 	.word	0x0800a658
 800513c:	0800a670 	.word	0x0800a670
 8005140:	0001e240 	.word	0x0001e240
 8005144:	0800a6d4 	.word	0x0800a6d4
 8005148:	0800a6ac 	.word	0x0800a6ac

0800514c <Init_BlueNRG_Custom_Services>:
{
 800514c:	b510      	push	{r4, lr}
 800514e:	b0c0      	sub	sp, #256	; 0x100
  ret = Add_HW_SW_ServW2ST_Service();
 8005150:	f7ff fad4 	bl	80046fc <Add_HW_SW_ServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS)
 8005154:	b998      	cbnz	r0, 800517e <Init_BlueNRG_Custom_Services+0x32>
     XPRINTF("HW & SW Service W2ST added successfully\r\n");
 8005156:	46ec      	mov	ip, sp
 8005158:	4c11      	ldr	r4, [pc, #68]	; (80051a0 <Init_BlueNRG_Custom_Services+0x54>)
 800515a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800515c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005166:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800516a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800516e:	f8ac 2000 	strh.w	r2, [ip]
 8005172:	2129      	movs	r1, #41	; 0x29
 8005174:	4668      	mov	r0, sp
 8005176:	f7ff fee3 	bl	8004f40 <UART5_Transmit>
}
 800517a:	b040      	add	sp, #256	; 0x100
 800517c:	bd10      	pop	{r4, pc}
     XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 800517e:	46ec      	mov	ip, sp
 8005180:	4c08      	ldr	r4, [pc, #32]	; (80051a4 <Init_BlueNRG_Custom_Services+0x58>)
 8005182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800518a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800518e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005192:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005196:	212b      	movs	r1, #43	; 0x2b
 8005198:	4668      	mov	r0, sp
 800519a:	f7ff fed1 	bl	8004f40 <UART5_Transmit>
}
 800519e:	e7ec      	b.n	800517a <Init_BlueNRG_Custom_Services+0x2e>
 80051a0:	0800a750 	.word	0x0800a750
 80051a4:	0800a77c 	.word	0x0800a77c

080051a8 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80051a8:	b508      	push	{r3, lr}
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80051aa:	7f03      	ldrb	r3, [r0, #28]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d000      	beq.n	80051b2 <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 80051b0:	bd08      	pop	{r3, pc}
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80051b2:	210c      	movs	r1, #12
 80051b4:	f002 ff40 	bl	8008038 <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80051ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80051be:	4905      	ldr	r1, [pc, #20]	; (80051d4 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 80051c0:	6809      	ldr	r1, [r1, #0]
 80051c2:	4408      	add	r0, r1
 80051c4:	6410      	str	r0, [r2, #64]	; 0x40
    SendAccGyroMag=1;
 80051c6:	2201      	movs	r2, #1
 80051c8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 80051cc:	e7f0      	b.n	80051b0 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 80051ce:	bf00      	nop
 80051d0:	200001b0 	.word	0x200001b0
 80051d4:	20000004 	.word	0x20000004

080051d8 <HAL_TIM_PeriodElapsedCallback>:
  if(htim == (&TimEnvHandle)) {
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_TIM_PeriodElapsedCallback+0x14>)
 80051da:	4283      	cmp	r3, r0
 80051dc:	d000      	beq.n	80051e0 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 80051de:	4770      	bx	lr
	  ReadSensor=1;
 80051e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
 80051ea:	e7f8      	b.n	80051de <HAL_TIM_PeriodElapsedCallback+0x6>
 80051ec:	200002b0 	.word	0x200002b0

080051f0 <Sensor_IO_SPI_CS_Init_All>:
{
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	b08b      	sub	sp, #44	; 0x2c
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 80051f6:	4b72      	ldr	r3, [pc, #456]	; (80053c0 <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 80051f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051fa:	f042 0202 	orr.w	r2, r2, #2
 80051fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8005200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005202:	f002 0202 	and.w	r2, r2, #2
 8005206:	9200      	str	r2, [sp, #0]
 8005208:	9a00      	ldr	r2, [sp, #0]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 800520a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800520c:	f042 0202 	orr.w	r2, r2, #2
 8005210:	64da      	str	r2, [r3, #76]	; 0x4c
 8005212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005214:	f002 0202 	and.w	r2, r2, #2
 8005218:	9201      	str	r2, [sp, #4]
 800521a:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 800521c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800521e:	f042 0204 	orr.w	r2, r2, #4
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c
 8005224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005226:	f002 0204 	and.w	r2, r2, #4
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	9a02      	ldr	r2, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800522e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	64da      	str	r2, [r3, #76]	; 0x4c
 8005236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	9303      	str	r3, [sp, #12]
 800523e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005240:	4d60      	ldr	r5, [pc, #384]	; (80053c4 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 8005242:	2201      	movs	r2, #1
 8005244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005248:	4628      	mov	r0, r5
 800524a:	f001 f858 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 800524e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80053c8 <Sensor_IO_SPI_CS_Init_All+0x1d8>
 8005252:	2201      	movs	r2, #1
 8005254:	2110      	movs	r1, #16
 8005256:	4640      	mov	r0, r8
 8005258:	f001 f851 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 800525c:	2201      	movs	r2, #1
 800525e:	2102      	movs	r1, #2
 8005260:	4628      	mov	r0, r5
 8005262:	f001 f84c 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005266:	2201      	movs	r2, #1
 8005268:	2108      	movs	r1, #8
 800526a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800526e:	f001 f846 	bl	80062fe <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005272:	2303      	movs	r3, #3
 8005274:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005276:	2600      	movs	r6, #0
 8005278:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800527a:	2401      	movs	r4, #1
 800527c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 800527e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005282:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8005286:	a905      	add	r1, sp, #20
 8005288:	4628      	mov	r0, r5
 800528a:	f000 feab 	bl	8005fe4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800528e:	4622      	mov	r2, r4
 8005290:	4649      	mov	r1, r9
 8005292:	4628      	mov	r0, r5
 8005294:	f001 f833 	bl	80062fe <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8005298:	2710      	movs	r7, #16
 800529a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 800529c:	a905      	add	r1, sp, #20
 800529e:	4640      	mov	r0, r8
 80052a0:	f000 fea0 	bl	8005fe4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 80052a4:	4622      	mov	r2, r4
 80052a6:	4639      	mov	r1, r7
 80052a8:	4640      	mov	r0, r8
 80052aa:	f001 f828 	bl	80062fe <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 80052ae:	f04f 0b02 	mov.w	fp, #2
 80052b2:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 80052b6:	a905      	add	r1, sp, #20
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 fe93 	bl	8005fe4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 80052be:	4622      	mov	r2, r4
 80052c0:	4659      	mov	r1, fp
 80052c2:	4628      	mov	r0, r5
 80052c4:	f001 f81b 	bl	80062fe <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80052c8:	f04f 0a08 	mov.w	sl, #8
 80052cc:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 80052d0:	a905      	add	r1, sp, #20
 80052d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d6:	f000 fe85 	bl	8005fe4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80052da:	4622      	mov	r2, r4
 80052dc:	4651      	mov	r1, sl
 80052de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052e2:	f001 f80c 	bl	80062fe <HAL_GPIO_WritePin>
  	 if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80052e6:	f000 fd39 	bl	8005d5c <BSP_SPI2_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 80052ea:	4632      	mov	r2, r6
 80052ec:	4659      	mov	r1, fp
 80052ee:	4628      	mov	r0, r5
 80052f0:	f001 f805 	bl	80062fe <HAL_GPIO_WritePin>
  inData[0] = (0x62U);
 80052f4:	2362      	movs	r3, #98	; 0x62
 80052f6:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80052fa:	4621      	mov	r1, r4
 80052fc:	eb0d 0007 	add.w	r0, sp, r7
 8005300:	f000 fc8a 	bl	8005c18 <BSP_SPI2_Send>
  inData[0] = 0x20;
 8005304:	2320      	movs	r3, #32
 8005306:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 800530a:	4621      	mov	r1, r4
 800530c:	eb0d 0007 	add.w	r0, sp, r7
 8005310:	f000 fc82 	bl	8005c18 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005314:	4622      	mov	r2, r4
 8005316:	4659      	mov	r1, fp
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fff0 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_RESET);
 800531e:	4632      	mov	r2, r6
 8005320:	4639      	mov	r1, r7
 8005322:	4640      	mov	r0, r8
 8005324:	f000 ffeb 	bl	80062fe <HAL_GPIO_WritePin>
  inData[0] = (0x23U);
 8005328:	2323      	movs	r3, #35	; 0x23
 800532a:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 800532e:	4621      	mov	r1, r4
 8005330:	eb0d 0007 	add.w	r0, sp, r7
 8005334:	f000 fc70 	bl	8005c18 <BSP_SPI2_Send>
  inData[0] = 0x01;
 8005338:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 800533c:	4621      	mov	r1, r4
 800533e:	eb0d 0007 	add.w	r0, sp, r7
 8005342:	f000 fc69 	bl	8005c18 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 8005346:	4622      	mov	r2, r4
 8005348:	4639      	mov	r1, r7
 800534a:	4640      	mov	r0, r8
 800534c:	f000 ffd7 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005350:	4632      	mov	r2, r6
 8005352:	4651      	mov	r1, sl
 8005354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005358:	f000 ffd1 	bl	80062fe <HAL_GPIO_WritePin>
  inData[0] = (0x10U);
 800535c:	f88d 7010 	strb.w	r7, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005360:	4621      	mov	r1, r4
 8005362:	eb0d 0007 	add.w	r0, sp, r7
 8005366:	f000 fc57 	bl	8005c18 <BSP_SPI2_Send>
  inData[0] = 0x01;
 800536a:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 800536e:	4621      	mov	r1, r4
 8005370:	eb0d 0007 	add.w	r0, sp, r7
 8005374:	f000 fc50 	bl	8005c18 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005378:	4622      	mov	r2, r4
 800537a:	4651      	mov	r1, sl
 800537c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005380:	f000 ffbd 	bl	80062fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8005384:	4632      	mov	r2, r6
 8005386:	4649      	mov	r1, r9
 8005388:	4628      	mov	r0, r5
 800538a:	f000 ffb8 	bl	80062fe <HAL_GPIO_WritePin>
  inData[0] = (0x12U);
 800538e:	2312      	movs	r3, #18
 8005390:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005394:	4621      	mov	r1, r4
 8005396:	eb0d 0007 	add.w	r0, sp, r7
 800539a:	f000 fc3d 	bl	8005c18 <BSP_SPI2_Send>
  inData[0] = 0x0C;
 800539e:	230c      	movs	r3, #12
 80053a0:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80053a4:	4621      	mov	r1, r4
 80053a6:	eb0d 0007 	add.w	r0, sp, r7
 80053aa:	f000 fc35 	bl	8005c18 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80053ae:	4622      	mov	r2, r4
 80053b0:	4649      	mov	r1, r9
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 ffa3 	bl	80062fe <HAL_GPIO_WritePin>
}
 80053b8:	4630      	mov	r0, r6
 80053ba:	b00b      	add	sp, #44	; 0x2c
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	48000400 	.word	0x48000400
 80053c8:	48000800 	.word	0x48000800

080053cc <LSM303AGR_SPI_Read_nBytes>:
{
 80053cc:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053ce:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 80053d0:	6804      	ldr	r4, [r0, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	6023      	str	r3, [r4, #0]
  while (nBytesToRead > 1U)
 80053da:	2a01      	cmp	r2, #1
 80053dc:	d90a      	bls.n	80053f4 <LSM303AGR_SPI_Read_nBytes+0x28>
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 80053de:	6803      	ldr	r3, [r0, #0]
 80053e0:	689c      	ldr	r4, [r3, #8]
 80053e2:	f014 0f01 	tst.w	r4, #1
 80053e6:	d0f8      	beq.n	80053da <LSM303AGR_SPI_Read_nBytes+0xe>
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	f801 3b01 	strb.w	r3, [r1], #1
      nBytesToRead--;
 80053ee:	3a01      	subs	r2, #1
 80053f0:	b292      	uxth	r2, r2
 80053f2:	e7f2      	b.n	80053da <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 80053fc:	6802      	ldr	r2, [r0, #0]
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005404:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005406:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005408:	6803      	ldr	r3, [r0, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	f012 0f01 	tst.w	r2, #1
 8005410:	d0fa      	beq.n	8005408 <LSM303AGR_SPI_Read_nBytes+0x3c>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005412:	7b1b      	ldrb	r3, [r3, #12]
 8005414:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005416:	6803      	ldr	r3, [r0, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800541e:	d1fa      	bne.n	8005416 <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005426:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005428:	6802      	ldr	r2, [r0, #0]
 800542a:	6813      	ldr	r3, [r2, #0]
 800542c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005430:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8005432:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005436:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 800543a:	6802      	ldr	r2, [r0, #0]
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005442:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005444:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005446:	6803      	ldr	r3, [r0, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	f012 0f01 	tst.w	r2, #1
 800544e:	d0fa      	beq.n	8005446 <LSM303AGR_SPI_Read+0x20>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005450:	7b1b      	ldrb	r3, [r3, #12]
 8005452:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005454:	6803      	ldr	r3, [r0, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f013 0f80 	tst.w	r3, #128	; 0x80
 800545c:	d1fa      	bne.n	8005454 <LSM303AGR_SPI_Read+0x2e>
}
 800545e:	4770      	bx	lr

08005460 <LSM303AGR_SPI_Write>:
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005460:	6803      	ldr	r3, [r0, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	f012 0f02 	tst.w	r2, #2
 8005468:	d0fa      	beq.n	8005460 <LSM303AGR_SPI_Write>
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 800546a:	7319      	strb	r1, [r3, #12]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005474:	d1fa      	bne.n	800546c <LSM303AGR_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	f012 0f80 	tst.w	r2, #128	; 0x80
 800547c:	d1fb      	bne.n	8005476 <LSM303AGR_SPI_Write+0x16>
}
 800547e:	4770      	bx	lr

08005480 <BSP_LSM303AGR_ReadReg_Mag>:
{
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	460d      	mov	r5, r1
 8005484:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005486:	b2c7      	uxtb	r7, r0
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005488:	2200      	movs	r2, #0
 800548a:	2102      	movs	r1, #2
 800548c:	4818      	ldr	r0, [pc, #96]	; (80054f0 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 800548e:	f000 ff36 	bl	80062fe <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005492:	4e18      	ldr	r6, [pc, #96]	; (80054f4 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005494:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8005498:	4630      	mov	r0, r6
 800549a:	f7ff ffe1 	bl	8005460 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 800549e:	6832      	ldr	r2, [r6, #0]
 80054a0:	6813      	ldr	r3, [r2, #0]
 80054a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a6:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);
 80054a8:	6832      	ldr	r2, [r6, #0]
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b0:	6013      	str	r3, [r2, #0]
  if (len > 1)
 80054b2:	2c01      	cmp	r4, #1
 80054b4:	d916      	bls.n	80054e4 <BSP_LSM303AGR_ReadReg_Mag+0x64>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 80054b6:	4622      	mov	r2, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7ff ff86 	bl	80053cc <LSM303AGR_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 80054c0:	2201      	movs	r2, #1
 80054c2:	2102      	movs	r1, #2
 80054c4:	480a      	ldr	r0, [pc, #40]	; (80054f0 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 80054c6:	f000 ff1a 	bl	80062fe <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 80054cc:	6811      	ldr	r1, [r2, #0]
 80054ce:	680b      	ldr	r3, [r1, #0]
 80054d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d4:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	6813      	ldr	r3, [r2, #0]
 80054da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	2000      	movs	r0, #0
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 80054e4:	4629      	mov	r1, r5
 80054e6:	4803      	ldr	r0, [pc, #12]	; (80054f4 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 80054e8:	f7ff ff9d 	bl	8005426 <LSM303AGR_SPI_Read>
 80054ec:	e7e8      	b.n	80054c0 <BSP_LSM303AGR_ReadReg_Mag+0x40>
 80054ee:	bf00      	nop
 80054f0:	48000400 	.word	0x48000400
 80054f4:	20000454 	.word	0x20000454

080054f8 <BSP_LSM303AGR_ReadReg_Acc>:
{
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	460d      	mov	r5, r1
 80054fc:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 80054fe:	b2c6      	uxtb	r6, r0
  LSM_ACC_CS_LOW();
 8005500:	2200      	movs	r2, #0
 8005502:	2110      	movs	r1, #16
 8005504:	481c      	ldr	r0, [pc, #112]	; (8005578 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005506:	f000 fefa 	bl	80062fe <HAL_GPIO_WritePin>
  if (len > 1) {
 800550a:	2c01      	cmp	r4, #1
 800550c:	d928      	bls.n	8005560 <BSP_LSM303AGR_ReadReg_Acc+0x68>
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 800550e:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
 8005512:	481a      	ldr	r0, [pc, #104]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005514:	f7ff ffa4 	bl	8005460 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800551a:	6811      	ldr	r1, [r2, #0]
 800551c:	680b      	ldr	r3, [r1, #0]
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	600b      	str	r3, [r1, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6813      	ldr	r3, [r2, #0]
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	6013      	str	r3, [r2, #0]
  if (len > 1)
 800552e:	2c01      	cmp	r4, #1
 8005530:	d91c      	bls.n	800556c <BSP_LSM303AGR_ReadReg_Acc+0x74>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005532:	4622      	mov	r2, r4
 8005534:	4629      	mov	r1, r5
 8005536:	4811      	ldr	r0, [pc, #68]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005538:	f7ff ff48 	bl	80053cc <LSM303AGR_SPI_Read_nBytes>
  LSM_ACC_CS_HIGH();
 800553c:	2201      	movs	r2, #1
 800553e:	2110      	movs	r1, #16
 8005540:	480d      	ldr	r0, [pc, #52]	; (8005578 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005542:	f000 fedc 	bl	80062fe <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005548:	6811      	ldr	r1, [r2, #0]
 800554a:	680b      	ldr	r3, [r1, #0]
 800554c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005550:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	6813      	ldr	r3, [r2, #0]
 8005556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	2000      	movs	r0, #0
 800555e:	bd70      	pop	{r4, r5, r6, pc}
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005560:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8005564:	4805      	ldr	r0, [pc, #20]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005566:	f7ff ff7b 	bl	8005460 <LSM303AGR_SPI_Write>
 800556a:	e7d5      	b.n	8005518 <BSP_LSM303AGR_ReadReg_Acc+0x20>
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 800556c:	4629      	mov	r1, r5
 800556e:	4803      	ldr	r0, [pc, #12]	; (800557c <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005570:	f7ff ff59 	bl	8005426 <LSM303AGR_SPI_Read>
 8005574:	e7e2      	b.n	800553c <BSP_LSM303AGR_ReadReg_Acc+0x44>
 8005576:	bf00      	nop
 8005578:	48000800 	.word	0x48000800
 800557c:	20000454 	.word	0x20000454

08005580 <InitLSM>:
static void InitLSM() {
 8005580:	b510      	push	{r4, lr}
 8005582:	b0c4      	sub	sp, #272	; 0x110
	Sensor_IO_SPI_CS_Init_All();
 8005584:	f7ff fe34 	bl	80051f0 <Sensor_IO_SPI_CS_Init_All>
	inData[0] = 0x01;
 8005588:	2401      	movs	r4, #1
 800558a:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Acc(0x23,inData,1);
 800558e:	4622      	mov	r2, r4
 8005590:	a941      	add	r1, sp, #260	; 0x104
 8005592:	2023      	movs	r0, #35	; 0x23
 8005594:	f7ff fc74 	bl	8004e80 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x20;
 8005598:	2320      	movs	r3, #32
 800559a:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Mag(0x62U,inData,1);
 800559e:	4622      	mov	r2, r4
 80055a0:	a941      	add	r1, sp, #260	; 0x104
 80055a2:	2062      	movs	r0, #98	; 0x62
 80055a4:	f7ff fc96 	bl	8004ed4 <BSP_LSM303AGR_WriteReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x4F,inData,1);
 80055a8:	4622      	mov	r2, r4
 80055aa:	a941      	add	r1, sp, #260	; 0x104
 80055ac:	204f      	movs	r0, #79	; 0x4f
 80055ae:	f7ff ff67 	bl	8005480 <BSP_LSM303AGR_ReadReg_Mag>
	XPRINTF("IAM Mag= %d,%d",inData[0],inData[1]);
 80055b2:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 80055b6:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 80055ba:	490d      	ldr	r1, [pc, #52]	; (80055f0 <InitLSM+0x70>)
 80055bc:	a801      	add	r0, sp, #4
 80055be:	f004 fb2d 	bl	8009c1c <siprintf>
 80055c2:	b281      	uxth	r1, r0
 80055c4:	a801      	add	r0, sp, #4
 80055c6:	f7ff fcbb 	bl	8004f40 <UART5_Transmit>
	BSP_LSM303AGR_ReadReg_Acc(0x0F,inData,1);
 80055ca:	4622      	mov	r2, r4
 80055cc:	a941      	add	r1, sp, #260	; 0x104
 80055ce:	200f      	movs	r0, #15
 80055d0:	f7ff ff92 	bl	80054f8 <BSP_LSM303AGR_ReadReg_Acc>
	XPRINTF("IAM Acc= %d,%d",inData[0],inData[1]);
 80055d4:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 80055d8:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 80055dc:	4905      	ldr	r1, [pc, #20]	; (80055f4 <InitLSM+0x74>)
 80055de:	a801      	add	r0, sp, #4
 80055e0:	f004 fb1c 	bl	8009c1c <siprintf>
 80055e4:	b281      	uxth	r1, r0
 80055e6:	a801      	add	r0, sp, #4
 80055e8:	f7ff fcaa 	bl	8004f40 <UART5_Transmit>
}
 80055ec:	b044      	add	sp, #272	; 0x110
 80055ee:	bd10      	pop	{r4, pc}
 80055f0:	0800a7a8 	.word	0x0800a7a8
 80055f4:	0800a7b8 	.word	0x0800a7b8

080055f8 <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80055f8:	b510      	push	{r4, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80055fe:	f000 fc31 	bl	8005e64 <HAL_GetTick>
 8005602:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 8005604:	e000      	b.n	8005608 <HAL_Delay+0x10>
    __WFI();
 8005606:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay){
 8005608:	f000 fc2c 	bl	8005e64 <HAL_GetTick>
 800560c:	1b00      	subs	r0, r0, r4
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	4298      	cmp	r0, r3
 8005612:	d3f8      	bcc.n	8005606 <HAL_Delay+0xe>
  }
}
 8005614:	b002      	add	sp, #8
 8005616:	bd10      	pop	{r4, pc}

08005618 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 8005618:	e7fe      	b.n	8005618 <Error_Handler>
	...

0800561c <InitTimers>:
{
 800561c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561e:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8005620:	4f31      	ldr	r7, [pc, #196]	; (80056e8 <InitTimers+0xcc>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	4e31      	ldr	r6, [pc, #196]	; (80056ec <InitTimers+0xd0>)
 8005626:	fba6 2303 	umull	r2, r3, r6, r3
 800562a:	0b5b      	lsrs	r3, r3, #13
 800562c:	3b01      	subs	r3, #1
  TimEnvHandle.Instance = TIM4;
 800562e:	4c30      	ldr	r4, [pc, #192]	; (80056f0 <InitTimers+0xd4>)
 8005630:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <InitTimers+0xd8>)
 8005632:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
  TimEnvHandle.Init.Period = 655;
 8005636:	f240 228f 	movw	r2, #655	; 0x28f
 800563a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 800563e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  TimEnvHandle.Init.ClockDivision = 0;
 8005642:	2500      	movs	r5, #0
 8005644:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005648:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  if(HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 800564c:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8005650:	f002 fe40 	bl	80082d4 <HAL_TIM_Base_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	fba6 2303 	umull	r2, r3, r6, r3
 800565a:	0b5b      	lsrs	r3, r3, #13
 800565c:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;  
 800565e:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <InitTimers+0xdc>)
 8005660:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
  TimCCHandle.Init.Period        = 65535;
 8005664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005668:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 800566c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  TimCCHandle.Init.ClockDivision = 0;
 8005670:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8005674:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8005678:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 800567c:	f002 fe5a 	bl	8008334 <HAL_TIM_OC_Init>
 8005680:	bb40      	cbnz	r0, 80056d4 <InitTimers+0xb8>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8005682:	2330      	movs	r3, #48	; 0x30
 8005684:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8005686:	2302      	movs	r3, #2
 8005688:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 800568a:	2364      	movs	r3, #100	; 0x64
 800568c:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 800568e:	2200      	movs	r2, #0
 8005690:	a901      	add	r1, sp, #4
 8005692:	481a      	ldr	r0, [pc, #104]	; (80056fc <InitTimers+0xe0>)
 8005694:	f002 fec4 	bl	8008420 <HAL_TIM_OC_ConfigChannel>
 8005698:	b9f0      	cbnz	r0, 80056d8 <InitTimers+0xbc>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 800569a:	23c8      	movs	r3, #200	; 0xc8
 800569c:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 800569e:	2204      	movs	r2, #4
 80056a0:	eb0d 0102 	add.w	r1, sp, r2
 80056a4:	4815      	ldr	r0, [pc, #84]	; (80056fc <InitTimers+0xe0>)
 80056a6:	f002 febb 	bl	8008420 <HAL_TIM_OC_ConfigChannel>
 80056aa:	b9b8      	cbnz	r0, 80056dc <InitTimers+0xc0>
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 80056ac:	f240 2371 	movw	r3, #625	; 0x271
 80056b0:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 80056b2:	2208      	movs	r2, #8
 80056b4:	a901      	add	r1, sp, #4
 80056b6:	4811      	ldr	r0, [pc, #68]	; (80056fc <InitTimers+0xe0>)
 80056b8:	f002 feb2 	bl	8008420 <HAL_TIM_OC_ConfigChannel>
 80056bc:	b980      	cbnz	r0, 80056e0 <InitTimers+0xc4>
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 80056be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80056c2:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 80056c4:	220c      	movs	r2, #12
 80056c6:	a901      	add	r1, sp, #4
 80056c8:	480c      	ldr	r0, [pc, #48]	; (80056fc <InitTimers+0xe0>)
 80056ca:	f002 fea9 	bl	8008420 <HAL_TIM_OC_ConfigChannel>
 80056ce:	b948      	cbnz	r0, 80056e4 <InitTimers+0xc8>
}
 80056d0:	b009      	add	sp, #36	; 0x24
 80056d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80056d4:	f7ff ffa0 	bl	8005618 <Error_Handler>
    Error_Handler();
 80056d8:	f7ff ff9e 	bl	8005618 <Error_Handler>
    Error_Handler();
 80056dc:	f7ff ff9c 	bl	8005618 <Error_Handler>
    Error_Handler();
 80056e0:	f7ff ff9a 	bl	8005618 <Error_Handler>
    Error_Handler();
 80056e4:	f7ff ff98 	bl	8005618 <Error_Handler>
 80056e8:	20000010 	.word	0x20000010
 80056ec:	d1b71759 	.word	0xd1b71759
 80056f0:	200001b0 	.word	0x200001b0
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	20000260 	.word	0x20000260

08005700 <MX_UART5_UART_Init>:
{
 8005700:	b508      	push	{r3, lr}
  UartHandle.Instance = UART5;
 8005702:	480a      	ldr	r0, [pc, #40]	; (800572c <MX_UART5_UART_Init+0x2c>)
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <MX_UART5_UART_Init+0x30>)
 8005706:	6243      	str	r3, [r0, #36]	; 0x24
  UartHandle.Init.BaudRate = 115200;
 8005708:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800570c:	6283      	str	r3, [r0, #40]	; 0x28
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800570e:	2300      	movs	r3, #0
 8005710:	62c3      	str	r3, [r0, #44]	; 0x2c
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 8005712:	6303      	str	r3, [r0, #48]	; 0x30
  UartHandle.Init.Parity = UART_PARITY_NONE;
 8005714:	6343      	str	r3, [r0, #52]	; 0x34
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 8005716:	220c      	movs	r2, #12
 8005718:	6382      	str	r2, [r0, #56]	; 0x38
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800571a:	63c3      	str	r3, [r0, #60]	; 0x3c
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800571c:	6403      	str	r3, [r0, #64]	; 0x40
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800571e:	3024      	adds	r0, #36	; 0x24
 8005720:	f003 fc7d 	bl	800901e <HAL_UART_Init>
 8005724:	b900      	cbnz	r0, 8005728 <MX_UART5_UART_Init+0x28>
}
 8005726:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005728:	f7ff ff76 	bl	8005618 <Error_Handler>
 800572c:	200001b0 	.word	0x200001b0
 8005730:	40005000 	.word	0x40005000

08005734 <InitTargetPlatform>:
{
 8005734:	b508      	push	{r3, lr}
  BSP_LED_Init( LED1 );
 8005736:	2000      	movs	r0, #0
 8005738:	f000 f9cc 	bl	8005ad4 <BSP_LED_Init>
  MX_UART5_UART_Init();
 800573c:	f7ff ffe0 	bl	8005700 <MX_UART5_UART_Init>
  InitLSM(); //N4S
 8005740:	f7ff ff1e 	bl	8005580 <InitLSM>
}
 8005744:	bd08      	pop	{r3, pc}
	...

08005748 <main>:
{
 8005748:	b510      	push	{r4, lr}
 800574a:	b0c4      	sub	sp, #272	; 0x110
  HAL_Init();
 800574c:	f000 fb6e 	bl	8005e2c <HAL_Init>
  SystemClock_Config();
 8005750:	f7ff fb34 	bl	8004dbc <SystemClock_Config>
  InitTargetPlatform();
 8005754:	f7ff ffee 	bl	8005734 <InitTargetPlatform>
  Init_BlueNRG_Stack();
 8005758:	f7ff fbfe 	bl	8004f58 <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();
 800575c:	f7ff fcf6 	bl	800514c <Init_BlueNRG_Custom_Services>
  InitTimers();
 8005760:	f7ff ff5c 	bl	800561c <InitTimers>
  if(HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK){
 8005764:	483b      	ldr	r0, [pc, #236]	; (8005854 <main+0x10c>)
 8005766:	f002 fc21 	bl	8007fac <HAL_TIM_Base_Start_IT>
 800576a:	bb08      	cbnz	r0, 80057b0 <main+0x68>
  connected = FALSE;
 800576c:	2200      	movs	r2, #0
 800576e:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <main+0x110>)
 8005770:	601a      	str	r2, [r3, #0]
  NodeName[1] = 'A';
 8005772:	4b3a      	ldr	r3, [pc, #232]	; (800585c <main+0x114>)
 8005774:	2141      	movs	r1, #65	; 0x41
 8005776:	f883 1151 	strb.w	r1, [r3, #337]	; 0x151
  NodeName[2] = 'B';
 800577a:	2142      	movs	r1, #66	; 0x42
 800577c:	f883 1152 	strb.w	r1, [r3, #338]	; 0x152
  NodeName[3] = 'C';
 8005780:	2143      	movs	r1, #67	; 0x43
 8005782:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
  NodeName[4] = 'D';
 8005786:	2144      	movs	r1, #68	; 0x44
 8005788:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
  NodeName[5] = 'E';
 800578c:	2145      	movs	r1, #69	; 0x45
 800578e:	f883 1155 	strb.w	r1, [r3, #341]	; 0x155
  NodeName[6] = 'F';
 8005792:	2146      	movs	r1, #70	; 0x46
 8005794:	f883 1156 	strb.w	r1, [r3, #342]	; 0x156
  NodeName[7] = 'G';
 8005798:	2147      	movs	r1, #71	; 0x47
 800579a:	f883 1157 	strb.w	r1, [r3, #343]	; 0x157
  uint8_t BufferToWrite[10] = "ABCDE";
 800579e:	4b30      	ldr	r3, [pc, #192]	; (8005860 <main+0x118>)
 80057a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80057a4:	9041      	str	r0, [sp, #260]	; 0x104
 80057a6:	f8ad 1108 	strh.w	r1, [sp, #264]	; 0x108
 80057aa:	f8cd 210a 	str.w	r2, [sp, #266]	; 0x10a
 80057ae:	e038      	b.n	8005822 <main+0xda>
    Error_Handler();
 80057b0:	f7ff ff32 	bl	8005618 <Error_Handler>
          if(!(HAL_GetTick()&0x3FF)) {
 80057b4:	f000 fb56 	bl	8005e64 <HAL_GetTick>
 80057b8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80057bc:	2800      	cmp	r0, #0
 80057be:	d134      	bne.n	800582a <main+0xe2>
        	  BSP_LED_Toggle(LED1);
 80057c0:	f000 f9c8 	bl	8005b54 <BSP_LED_Toggle>
 80057c4:	e031      	b.n	800582a <main+0xe2>
      setConnectable();
 80057c6:	f7ff f8b5 	bl	8004934 <setConnectable>
      set_connectable = FALSE;
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <main+0x11c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e02f      	b.n	8005832 <main+0xea>
      HCI_ProcessEvent=0;
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <main+0x114>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      hci_user_evt_proc();
 80057da:	f004 f91f 	bl	8009a1c <hci_user_evt_proc>
 80057de:	e02d      	b.n	800583c <main+0xf4>
    	ReadSensor=0;
 80057e0:	4c1e      	ldr	r4, [pc, #120]	; (800585c <main+0x114>)
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    	readMag();
 80057e8:	f7ff fad0 	bl	8004d8c <readMag>
    	readAcc();
 80057ec:	f7ff fada 	bl	8004da4 <readAcc>
    	COMP_Value.Steps++;
 80057f0:	69a2      	ldr	r2, [r4, #24]
 80057f2:	3201      	adds	r2, #1
 80057f4:	61a2      	str	r2, [r4, #24]
    	COMP_Value.Heading+=5;
 80057f6:	69e3      	ldr	r3, [r4, #28]
 80057f8:	3305      	adds	r3, #5
 80057fa:	61e3      	str	r3, [r4, #28]
    	COMP_Value.Distance+=10;
 80057fc:	6a23      	ldr	r3, [r4, #32]
 80057fe:	330a      	adds	r3, #10
 8005800:	6223      	str	r3, [r4, #32]
    	XPRINTF("Steps = %d \r\n",(int)COMP_Value.Steps);
 8005802:	4919      	ldr	r1, [pc, #100]	; (8005868 <main+0x120>)
 8005804:	a801      	add	r0, sp, #4
 8005806:	f004 fa09 	bl	8009c1c <siprintf>
 800580a:	b281      	uxth	r1, r0
 800580c:	a801      	add	r0, sp, #4
 800580e:	f7ff fb97 	bl	8004f40 <UART5_Transmit>
 8005812:	e018      	b.n	8005846 <main+0xfe>
		SendMotionData();
 8005814:	f7ff fb88 	bl	8004f28 <SendMotionData>
    	SendAccGyroMag=0;
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <main+0x114>)
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    __WFI();
 8005820:	bf30      	wfi
      if(!connected) {
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <main+0x110>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0c4      	beq.n	80057b4 <main+0x6c>
    if(set_connectable){
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <main+0x11c>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1c9      	bne.n	80057c6 <main+0x7e>
    if(HCI_ProcessEvent) {
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <main+0x114>)
 8005834:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ca      	bne.n	80057d2 <main+0x8a>
    if(ReadSensor) {
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <main+0x114>)
 800583e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1cc      	bne.n	80057e0 <main+0x98>
    if(SendAccGyroMag) {
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <main+0x114>)
 8005848:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0e7      	beq.n	8005820 <main+0xd8>
 8005850:	e7e0      	b.n	8005814 <main+0xcc>
 8005852:	bf00      	nop
 8005854:	200002b0 	.word	0x200002b0
 8005858:	2000009c 	.word	0x2000009c
 800585c:	200001b0 	.word	0x200001b0
 8005860:	0800a508 	.word	0x0800a508
 8005864:	20000000 	.word	0x20000000
 8005868:	0800a7c8 	.word	0x0800a7c8

0800586c <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){
 800586c:	2820      	cmp	r0, #32
 800586e:	d000      	beq.n	8005872 <HAL_GPIO_EXTI_Callback+0x6>
 8005870:	4770      	bx	lr
{  
 8005872:	b508      	push	{r3, lr}
  case HCI_TL_SPI_EXTI_PIN: 
      hci_tl_lowlevel_isr();
 8005874:	f7ff fa80 	bl	8004d78 <hci_tl_lowlevel_isr>
      HCI_ProcessEvent=1;
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <HAL_GPIO_EXTI_Callback+0x18>)
 800587a:	2201      	movs	r2, #1
 800587c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

//  case BSP_LSM6DSM_INT2:
//    MEMSInterrupt=1;
//    break;
  }
}
 8005880:	bd08      	pop	{r3, pc}
 8005882:	bf00      	nop
 8005884:	200001b0 	.word	0x200001b0

08005888 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005888:	b500      	push	{lr}
 800588a:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_TIM_Base_MspInit+0x64>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d005      	beq.n	80058a0 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_TIM_Base_MspInit+0x68>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d015      	beq.n	80058c6 <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 800589a:	b003      	add	sp, #12
 800589c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <HAL_TIM_Base_MspInit+0x6c>)
 80058a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058a4:	f042 0204 	orr.w	r2, r2, #4
 80058a8:	659a      	str	r2, [r3, #88]	; 0x58
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80058b4:	2200      	movs	r2, #0
 80058b6:	210f      	movs	r1, #15
 80058b8:	201e      	movs	r0, #30
 80058ba:	f000 faeb 	bl	8005e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80058be:	201e      	movs	r0, #30
 80058c0:	f000 fb20 	bl	8005f04 <HAL_NVIC_EnableIRQ>
 80058c4:	e7e9      	b.n	800589a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_TIM_Base_MspInit+0x6c>)
 80058c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058ca:	f042 0208 	orr.w	r2, r2, #8
 80058ce:	659a      	str	r2, [r3, #88]	; 0x58
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80058da:	2200      	movs	r2, #0
 80058dc:	210f      	movs	r1, #15
 80058de:	2032      	movs	r0, #50	; 0x32
 80058e0:	f000 fad8 	bl	8005e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80058e4:	2032      	movs	r0, #50	; 0x32
 80058e6:	f000 fb0d 	bl	8005f04 <HAL_NVIC_EnableIRQ>
}  
 80058ea:	e7d6      	b.n	800589a <HAL_TIM_Base_MspInit+0x12>
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40000c00 	.word	0x40000c00
 80058f4:	40021000 	.word	0x40021000

080058f8 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 80058f8:	b500      	push	{lr}
 80058fa:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_TIM_OC_MspInit+0x30>)
 80058fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005904:	661a      	str	r2, [r3, #96]	; 0x60
 8005906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8005910:	2200      	movs	r2, #0
 8005912:	2108      	movs	r1, #8
 8005914:	201b      	movs	r0, #27
 8005916:	f000 fabd 	bl	8005e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800591a:	201b      	movs	r0, #27
 800591c:	f000 faf2 	bl	8005f04 <HAL_NVIC_EnableIRQ>
}
 8005920:	b003      	add	sp, #12
 8005922:	f85d fb04 	ldr.w	pc, [sp], #4
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_UART_MspInit>:
  /* Release CRC from reset state */
  __HAL_RCC_CRC_RELEASE_RESET();
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	4604      	mov	r4, r0
	if (huart->Instance == UART5) {
 8005932:	6802      	ldr	r2, [r0, #0]
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <HAL_UART_MspInit+0xe8>)
 8005936:	429a      	cmp	r2, r3
 8005938:	d005      	beq.n	8005946 <HAL_UART_MspInit+0x1a>
		  HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
		  HAL_NVIC_EnableIRQ(UART5_IRQn);

	}

	if (huart->Instance == USART1) {
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <HAL_UART_MspInit+0xec>)
 800593e:	429a      	cmp	r2, r3
 8005940:	d03c      	beq.n	80059bc <HAL_UART_MspInit+0x90>
//		  HAL_NVIC_EnableIRQ(UART5_IRQn);

	}


}
 8005942:	b00a      	add	sp, #40	; 0x28
 8005944:	bd70      	pop	{r4, r5, r6, pc}
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005946:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800594a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800594c:	f042 0204 	orr.w	r2, r2, #4
 8005950:	64da      	str	r2, [r3, #76]	; 0x4c
 8005952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005954:	f002 0204 	and.w	r2, r2, #4
 8005958:	9200      	str	r2, [sp, #0]
 800595a:	9a00      	ldr	r2, [sp, #0]
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 800595c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	64da      	str	r2, [r3, #76]	; 0x4c
 8005964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005966:	f002 0208 	and.w	r2, r2, #8
 800596a:	9201      	str	r2, [sp, #4]
 800596c:	9a01      	ldr	r2, [sp, #4]
		  __HAL_RCC_UART5_CLK_ENABLE();
 800596e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005970:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005974:	659a      	str	r2, [r3, #88]	; 0x58
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597c:	9302      	str	r3, [sp, #8]
 800597e:	9b02      	ldr	r3, [sp, #8]
		  GPIO_InitStruct.Pin       = GPIO_PIN_12;
 8005980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005984:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005986:	2302      	movs	r3, #2
 8005988:	9306      	str	r3, [sp, #24]
		  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800598a:	2500      	movs	r5, #0
 800598c:	9507      	str	r5, [sp, #28]
		  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800598e:	9308      	str	r3, [sp, #32]
		  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005990:	2608      	movs	r6, #8
 8005992:	9609      	str	r6, [sp, #36]	; 0x24
		  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005994:	a905      	add	r1, sp, #20
 8005996:	4821      	ldr	r0, [pc, #132]	; (8005a1c <HAL_UART_MspInit+0xf0>)
 8005998:	f000 fb24 	bl	8005fe4 <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800599c:	2304      	movs	r3, #4
 800599e:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80059a0:	9609      	str	r6, [sp, #36]	; 0x24
		  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059a2:	a905      	add	r1, sp, #20
 80059a4:	481e      	ldr	r0, [pc, #120]	; (8005a20 <HAL_UART_MspInit+0xf4>)
 80059a6:	f000 fb1d 	bl	8005fe4 <HAL_GPIO_Init>
		  HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 80059aa:	2201      	movs	r2, #1
 80059ac:	4629      	mov	r1, r5
 80059ae:	2035      	movs	r0, #53	; 0x35
 80059b0:	f000 fa70 	bl	8005e94 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80059b4:	2035      	movs	r0, #53	; 0x35
 80059b6:	f000 faa5 	bl	8005f04 <HAL_NVIC_EnableIRQ>
 80059ba:	e7be      	b.n	800593a <HAL_UART_MspInit+0xe>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 80059bc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80059c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80059c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ca:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80059ce:	9203      	str	r2, [sp, #12]
 80059d0:	9a03      	ldr	r2, [sp, #12]
		  __HAL_RCC_USART1_CLK_ENABLE();
 80059d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60
 80059da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e0:	9304      	str	r3, [sp, #16]
 80059e2:	9b04      	ldr	r3, [sp, #16]
		  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80059e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e8:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	9306      	str	r3, [sp, #24]
		  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80059ee:	2200      	movs	r2, #0
 80059f0:	9207      	str	r2, [sp, #28]
		  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80059f2:	9308      	str	r3, [sp, #32]
		  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059f4:	2507      	movs	r5, #7
 80059f6:	9509      	str	r5, [sp, #36]	; 0x24
		  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80059f8:	4c0a      	ldr	r4, [pc, #40]	; (8005a24 <HAL_UART_MspInit+0xf8>)
 80059fa:	a905      	add	r1, sp, #20
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 faf1 	bl	8005fe4 <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a06:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a08:	9509      	str	r5, [sp, #36]	; 0x24
		  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a0a:	a905      	add	r1, sp, #20
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 fae9 	bl	8005fe4 <HAL_GPIO_Init>
}
 8005a12:	e796      	b.n	8005942 <HAL_UART_MspInit+0x16>
 8005a14:	40005000 	.word	0x40005000
 8005a18:	40013800 	.word	0x40013800
 8005a1c:	48000800 	.word	0x48000800
 8005a20:	48000c00 	.word	0x48000c00
 8005a24:	48001800 	.word	0x48001800

08005a28 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005a28:	4770      	bx	lr

08005a2a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005a2a:	e7fe      	b.n	8005a2a <HardFault_Handler>

08005a2c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005a2c:	e7fe      	b.n	8005a2c <MemManage_Handler>

08005a2e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005a2e:	e7fe      	b.n	8005a2e <BusFault_Handler>

08005a30 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <UsageFault_Handler>

08005a32 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8005a32:	4770      	bx	lr

08005a34 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8005a34:	4770      	bx	lr

08005a36 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8005a36:	4770      	bx	lr

08005a38 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005a38:	b508      	push	{r3, lr}
  HAL_IncTick();
 8005a3a:	f000 fa07 	bl	8005e4c <HAL_IncTick>
}
 8005a3e:	bd08      	pop	{r3, pc}

08005a40 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8005a40:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 8005a42:	4802      	ldr	r0, [pc, #8]	; (8005a4c <TIM4_IRQHandler+0xc>)
 8005a44:	f002 fb14 	bl	8008070 <HAL_TIM_IRQHandler>
}
 8005a48:	bd08      	pop	{r3, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200002b0 	.word	0x200002b0

08005a50 <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 8005a50:	4770      	bx	lr
	...

08005a54 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8005a54:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 8005a56:	4802      	ldr	r0, [pc, #8]	; (8005a60 <TIM1_CC_IRQHandler+0xc>)
 8005a58:	f002 fb0a 	bl	8008070 <HAL_TIM_IRQHandler>
}
 8005a5c:	bd08      	pop	{r3, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000260 	.word	0x20000260

08005a64 <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 8005a64:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005a66:	2008      	movs	r0, #8
 8005a68:	f000 fc58 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 8005a6c:	bd08      	pop	{r3, pc}

08005a6e <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8005a6e:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 8005a70:	2020      	movs	r0, #32
 8005a72:	f000 fc53 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
}
 8005a76:	bd08      	pop	{r3, pc}

08005a78 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 8005a78:	4770      	bx	lr
	...

08005a7c <UART5_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void UART5_IRQHandler(void)
{
 8005a7c:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&UartHandle);
 8005a7e:	4802      	ldr	r0, [pc, #8]	; (8005a88 <UART5_IRQHandler+0xc>)
 8005a80:	f002 fe9a 	bl	80087b8 <HAL_UART_IRQHandler>
}
 8005a84:	bd08      	pop	{r3, pc}
 8005a86:	bf00      	nop
 8005a88:	200001d4 	.word	0x200001d4

08005a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a90:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <_sbrk+0x38>)
 8005a92:	490d      	ldr	r1, [pc, #52]	; (8005ac8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a94:	480d      	ldr	r0, [pc, #52]	; (8005acc <_sbrk+0x40>)
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	b140      	cbz	r0, 8005aac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a9a:	480c      	ldr	r0, [pc, #48]	; (8005acc <_sbrk+0x40>)
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	4403      	add	r3, r0
 8005aa0:	1a52      	subs	r2, r2, r1
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d806      	bhi.n	8005ab4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <_sbrk+0x40>)
 8005aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005aaa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005aac:	4807      	ldr	r0, [pc, #28]	; (8005acc <_sbrk+0x40>)
 8005aae:	4c08      	ldr	r4, [pc, #32]	; (8005ad0 <_sbrk+0x44>)
 8005ab0:	6004      	str	r4, [r0, #0]
 8005ab2:	e7f2      	b.n	8005a9a <_sbrk+0xe>
    errno = ENOMEM;
 8005ab4:	f004 f872 	bl	8009b9c <__errno>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac0:	e7f3      	b.n	8005aaa <_sbrk+0x1e>
 8005ac2:	bf00      	nop
 8005ac4:	20018000 	.word	0x20018000
 8005ac8:	00002000 	.word	0x00002000
 8005acc:	20000450 	.word	0x20000450
 8005ad0:	2000081c 	.word	0x2000081c

08005ad4 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <BSP_LED_Init+0x74>)
 8005adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8005aee:	f000 fc33 	bl	8006358 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005af2:	b94c      	cbnz	r4, 8005b08 <BSP_LED_Init+0x34>
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <BSP_LED_Init+0x74>)
 8005af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	2c01      	cmp	r4, #1
 8005b0a:	d011      	beq.n	8005b30 <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <BSP_LED_Init+0x78>)
 8005b0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005b12:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b14:	2301      	movs	r3, #1
 8005b16:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005b20:	a903      	add	r1, sp, #12
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <BSP_LED_Init+0x7c>)
 8005b24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005b28:	f000 fa5c 	bl	8005fe4 <HAL_GPIO_Init>
}
 8005b2c:	b008      	add	sp, #32
 8005b2e:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <BSP_LED_Init+0x74>)
 8005b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	9b02      	ldr	r3, [sp, #8]
 8005b44:	e7e2      	b.n	8005b0c <BSP_LED_Init+0x38>
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	0800a514 	.word	0x0800a514
 8005b50:	20000008 	.word	0x20000008

08005b54 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005b54:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <BSP_LED_Toggle+0x14>)
 8005b58:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <BSP_LED_Toggle+0x18>)
 8005b5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005b62:	f000 fbd1 	bl	8006308 <HAL_GPIO_TogglePin>
}
 8005b66:	bd08      	pop	{r3, pc}
 8005b68:	0800a514 	.word	0x0800a514
 8005b6c:	20000008 	.word	0x20000008

08005b70 <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b70:	b500      	push	{lr}
 8005b72:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <SPI2_MspInit+0x4c>)
 8005b76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b7c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b80:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005b84:	9201      	str	r2, [sp, #4]
 8005b86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b8a:	f042 0202 	orr.w	r2, r2, #2
 8005b8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	9302      	str	r3, [sp, #8]
 8005b98:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005b9a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005b9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ba8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005baa:	2305      	movs	r3, #5
 8005bac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bae:	a903      	add	r1, sp, #12
 8005bb0:	4803      	ldr	r0, [pc, #12]	; (8005bc0 <SPI2_MspInit+0x50>)
 8005bb2:	f000 fa17 	bl	8005fe4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8005bb6:	b009      	add	sp, #36	; 0x24
 8005bb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	48000400 	.word	0x48000400

08005bc4 <SPI1_MspInit>:
{
 8005bc4:	b500      	push	{lr}
 8005bc6:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005bc8:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <SPI1_MspInit+0x50>)
 8005bca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bd0:	661a      	str	r2, [r3, #96]	; 0x60
 8005bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005bd8:	9201      	str	r2, [sp, #4]
 8005bda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	64da      	str	r2, [r3, #76]	; 0x4c
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	9302      	str	r3, [sp, #8]
 8005bec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8005bee:	23e0      	movs	r3, #224	; 0xe0
 8005bf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bfe:	2305      	movs	r3, #5
 8005c00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c02:	a903      	add	r1, sp, #12
 8005c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c08:	f000 f9ec 	bl	8005fe4 <HAL_GPIO_Init>
}
 8005c0c:	b009      	add	sp, #36	; 0x24
 8005c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000

08005c18 <BSP_SPI2_Send>:
{
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c20:	460a      	mov	r2, r1
 8005c22:	4601      	mov	r1, r0
 8005c24:	4804      	ldr	r0, [pc, #16]	; (8005c38 <BSP_SPI2_Send+0x20>)
 8005c26:	f001 fd69 	bl	80076fc <HAL_SPI_Transmit>
 8005c2a:	b908      	cbnz	r0, 8005c30 <BSP_SPI2_Send+0x18>
      ret = len;
 8005c2c:	4620      	mov	r0, r4
}
 8005c2e:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005c30:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8005c34:	e7fb      	b.n	8005c2e <BSP_SPI2_Send+0x16>
 8005c36:	bf00      	nop
 8005c38:	20000454 	.word	0x20000454

08005c3c <BSP_SPI1_SendRecv>:
{
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	4805      	ldr	r0, [pc, #20]	; (8005c64 <BSP_SPI1_SendRecv+0x28>)
 8005c50:	f001 fe6e 	bl	8007930 <HAL_SPI_TransmitReceive>
 8005c54:	b910      	cbnz	r0, 8005c5c <BSP_SPI1_SendRecv+0x20>
      ret = len;
 8005c56:	4620      	mov	r0, r4
}
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005c5c:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8005c60:	e7fa      	b.n	8005c58 <BSP_SPI1_SendRecv+0x1c>
 8005c62:	bf00      	nop
 8005c64:	200004b8 	.word	0x200004b8

08005c68 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8005c68:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8005c6a:	f000 f8fb 	bl	8005e64 <HAL_GetTick>
}
 8005c6e:	bd08      	pop	{r3, pc}

08005c70 <MX_SPI1_Init>:
{
 8005c70:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <MX_SPI1_Init+0x40>)
 8005c74:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005c76:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c7a:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005c80:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005c84:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c86:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c88:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c8e:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005c90:	2118      	movs	r1, #24
 8005c92:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c94:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005c96:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c98:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005c9a:	2107      	movs	r1, #7
 8005c9c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005c9e:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005ca4:	f001 fc9c 	bl	80075e0 <HAL_SPI_Init>
 8005ca8:	b100      	cbz	r0, 8005cac <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 8005caa:	2001      	movs	r0, #1
}
 8005cac:	bd08      	pop	{r3, pc}
 8005cae:	bf00      	nop
 8005cb0:	40013000 	.word	0x40013000

08005cb4 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8005cb4:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8005cb6:	480a      	ldr	r0, [pc, #40]	; (8005ce0 <BSP_SPI1_Init+0x2c>)
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <BSP_SPI1_Init+0x30>)
 8005cba:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8005cbe:	f002 f83c 	bl	8007d3a <HAL_SPI_GetState>
 8005cc2:	b108      	cbz	r0, 8005cc8 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8005cc4:	2000      	movs	r0, #0
}
 8005cc6:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8005cc8:	4c07      	ldr	r4, [pc, #28]	; (8005ce8 <BSP_SPI1_Init+0x34>)
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff ff7a 	bl	8005bc4 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff ffcd 	bl	8005c70 <MX_SPI1_Init>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d0f5      	beq.n	8005cc6 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8005cda:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005cde:	e7f2      	b.n	8005cc6 <BSP_SPI1_Init+0x12>
 8005ce0:	20000454 	.word	0x20000454
 8005ce4:	40013000 	.word	0x40013000
 8005ce8:	200004b8 	.word	0x200004b8

08005cec <MX_SPI2_Init>:
{
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 8005cf0:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <MX_SPI2_Init+0x6c>)
 8005cf2:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005cf4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005cf8:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8005cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfe:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005d00:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005d04:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005d06:	2302      	movs	r3, #2
 8005d08:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d12:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005d14:	2330      	movs	r3, #48	; 0x30
 8005d16:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005d1c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d1e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005d20:	2207      	movs	r2, #7
 8005d22:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d24:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005d26:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005d28:	f001 fc5a 	bl	80075e0 <HAL_SPI_Init>
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b100      	cbz	r0, 8005d32 <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8005d30:	2501      	movs	r5, #1
  HAL_Delay(5);
 8005d32:	2005      	movs	r0, #5
 8005d34:	f7ff fc60 	bl	80055f8 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d40:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8005d42:	2005      	movs	r0, #5
 8005d44:	f7ff fc58 	bl	80055f8 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d50:	6013      	str	r3, [r2, #0]
}
 8005d52:	4628      	mov	r0, r5
 8005d54:	bd38      	pop	{r3, r4, r5, pc}
 8005d56:	bf00      	nop
 8005d58:	40003800 	.word	0x40003800

08005d5c <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 8005d5c:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 8005d5e:	480a      	ldr	r0, [pc, #40]	; (8005d88 <BSP_SPI2_Init+0x2c>)
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <BSP_SPI2_Init+0x30>)
 8005d62:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8005d64:	f001 ffe9 	bl	8007d3a <HAL_SPI_GetState>
 8005d68:	b108      	cbz	r0, 8005d6e <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8005d6a:	2000      	movs	r0, #0
}
 8005d6c:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 8005d6e:	4c06      	ldr	r4, [pc, #24]	; (8005d88 <BSP_SPI2_Init+0x2c>)
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fefd 	bl	8005b70 <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff ffb8 	bl	8005cec <MX_SPI2_Init>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d0f5      	beq.n	8005d6c <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8005d80:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005d84:	e7f2      	b.n	8005d6c <BSP_SPI2_Init+0x10>
 8005d86:	bf00      	nop
 8005d88:	20000454 	.word	0x20000454
 8005d8c:	40003800 	.word	0x40003800

08005d90 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d90:	490f      	ldr	r1, [pc, #60]	; (8005dd0 <SystemInit+0x40>)
 8005d92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <SystemInit+0x44>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005da8:	2000      	movs	r0, #0
 8005daa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8005db2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005db6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005dbc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005dc6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <SystemInit+0x48>)
 8005dca:	608b      	str	r3, [r1, #8]
#endif
}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	e000ed00 	.word	0xe000ed00
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	08004000 	.word	0x08004000

08005ddc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <HAL_InitTick+0x44>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b90b      	cbnz	r3, 8005dea <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005de6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005de8:	4770      	bx	lr
{
 8005dea:	b510      	push	{r4, lr}
 8005dec:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df6:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <HAL_InitTick+0x48>)
 8005df8:	6810      	ldr	r0, [r2, #0]
 8005dfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dfe:	f000 f88f 	bl	8005f20 <HAL_SYSTICK_Config>
 8005e02:	b968      	cbnz	r0, 8005e20 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e04:	2c0f      	cmp	r4, #15
 8005e06:	d901      	bls.n	8005e0c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e00a      	b.n	8005e22 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4621      	mov	r1, r4
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e14:	f000 f83e 	bl	8005e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e18:	4b02      	ldr	r3, [pc, #8]	; (8005e24 <HAL_InitTick+0x44>)
 8005e1a:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e000      	b.n	8005e22 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8005e20:	2001      	movs	r0, #1
}
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	20000014 	.word	0x20000014
 8005e28:	20000010 	.word	0x20000010

08005e2c <HAL_Init>:
{
 8005e2c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e2e:	2003      	movs	r0, #3
 8005e30:	f000 f81e 	bl	8005e70 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e34:	200f      	movs	r0, #15
 8005e36:	f7ff ffd3 	bl	8005de0 <HAL_InitTick>
 8005e3a:	b110      	cbz	r0, 8005e42 <HAL_Init+0x16>
    status = HAL_ERROR;
 8005e3c:	2401      	movs	r4, #1
}
 8005e3e:	4620      	mov	r0, r4
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	4604      	mov	r4, r0
    HAL_MspInit();
 8005e44:	f7ff ffca 	bl	8005ddc <HAL_MspInit>
 8005e48:	e7f9      	b.n	8005e3e <HAL_Init+0x12>
	...

08005e4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_IncTick+0x10>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	4a03      	ldr	r2, [pc, #12]	; (8005e60 <HAL_IncTick+0x14>)
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	440b      	add	r3, r1
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000014 	.word	0x20000014
 8005e60:	2000051c 	.word	0x2000051c

08005e64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005e64:	4b01      	ldr	r3, [pc, #4]	; (8005e6c <HAL_GetTick+0x8>)
 8005e66:	6818      	ldr	r0, [r3, #0]
}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	2000051c 	.word	0x2000051c

08005e70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e70:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005e72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e7c:	0200      	lsls	r0, r0, #8
 8005e7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e82:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005e8c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005e8e:	4770      	bx	lr
 8005e90:	e000ed00 	.word	0xe000ed00

08005e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e94:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e96:	4b19      	ldr	r3, [pc, #100]	; (8005efc <HAL_NVIC_SetPriority+0x68>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e9e:	f1c3 0c07 	rsb	ip, r3, #7
 8005ea2:	f1bc 0f04 	cmp.w	ip, #4
 8005ea6:	bf28      	it	cs
 8005ea8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eac:	f103 0e04 	add.w	lr, r3, #4
 8005eb0:	f1be 0f06 	cmp.w	lr, #6
 8005eb4:	d918      	bls.n	8005ee8 <HAL_NVIC_SetPriority+0x54>
 8005eb6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005ebc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005ec0:	ea21 010c 	bic.w	r1, r1, ip
 8005ec4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec6:	fa0e f303 	lsl.w	r3, lr, r3
 8005eca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ece:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	db0b      	blt.n	8005eec <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed4:	0109      	lsls	r1, r1, #4
 8005ed6:	b2c9      	uxtb	r1, r1
 8005ed8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005edc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005ee0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005ee4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e7e5      	b.n	8005eb8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eec:	f000 000f 	and.w	r0, r0, #15
 8005ef0:	0109      	lsls	r1, r1, #4
 8005ef2:	b2c9      	uxtb	r1, r1
 8005ef4:	4b02      	ldr	r3, [pc, #8]	; (8005f00 <HAL_NVIC_SetPriority+0x6c>)
 8005ef6:	5419      	strb	r1, [r3, r0]
 8005ef8:	e7f4      	b.n	8005ee4 <HAL_NVIC_SetPriority+0x50>
 8005efa:	bf00      	nop
 8005efc:	e000ed00 	.word	0xe000ed00
 8005f00:	e000ed14 	.word	0xe000ed14

08005f04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005f04:	2800      	cmp	r0, #0
 8005f06:	db07      	blt.n	8005f18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f08:	f000 021f 	and.w	r2, r0, #31
 8005f0c:	0940      	lsrs	r0, r0, #5
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4093      	lsls	r3, r2
 8005f12:	4a02      	ldr	r2, [pc, #8]	; (8005f1c <HAL_NVIC_EnableIRQ+0x18>)
 8005f14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e100 	.word	0xe000e100

08005f20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f20:	3801      	subs	r0, #1
 8005f22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005f26:	d20b      	bcs.n	8005f40 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <HAL_SYSTICK_Config+0x24>)
 8005f30:	21f0      	movs	r1, #240	; 0xf0
 8005f32:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f36:	2000      	movs	r0, #0
 8005f38:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f3a:	2207      	movs	r2, #7
 8005f3c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005f40:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f48:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d006      	beq.n	8005f60 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f52:	2304      	movs	r3, #4
 8005f54:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f56:	2300      	movs	r3, #0
 8005f58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f60:	6802      	ldr	r2, [r0, #0]
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	f023 030e 	bic.w	r3, r3, #14
 8005f68:	6013      	str	r3, [r2, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f6a:	6802      	ldr	r2, [r0, #0]
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f76:	f003 031c 	and.w	r3, r3, #28
 8005f7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	604b      	str	r3, [r1, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f84:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return status;
 8005f8e:	4618      	mov	r0, r3
  }
}
 8005f90:	4770      	bx	lr

08005f92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f92:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005f94:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d003      	beq.n	8005fa6 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8005fa2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8005fa4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa6:	6802      	ldr	r2, [r0, #0]
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	f023 030e 	bic.w	r3, r3, #14
 8005fae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005fb0:	6802      	ldr	r2, [r0, #0]
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005fbc:	f003 031c 	and.w	r3, r3, #28
 8005fc0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005fca:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8005fd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fd6:	b113      	cbz	r3, 8005fde <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8005fd8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e7e2      	b.n	8005fa4 <HAL_DMA_Abort_IT+0x12>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e7e0      	b.n	8005fa4 <HAL_DMA_Abort_IT+0x12>
	...

08005fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8005fe8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fea:	e040      	b.n	800606e <HAL_GPIO_Init+0x8a>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005fec:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005fee:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005ff2:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8005ff6:	409c      	lsls	r4, r3
 8005ff8:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 8005ffc:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005ffe:	e062      	b.n	80060c6 <HAL_GPIO_Init+0xe2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006000:	2406      	movs	r4, #6
 8006002:	e000      	b.n	8006006 <HAL_GPIO_Init+0x22>
 8006004:	2400      	movs	r4, #0
 8006006:	40b4      	lsls	r4, r6
 8006008:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800600a:	3502      	adds	r5, #2
 800600c:	4e68      	ldr	r6, [pc, #416]	; (80061b0 <HAL_GPIO_Init+0x1cc>)
 800600e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006012:	4c68      	ldr	r4, [pc, #416]	; (80061b4 <HAL_GPIO_Init+0x1d0>)
 8006014:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006016:	43d4      	mvns	r4, r2
 8006018:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800601c:	684f      	ldr	r7, [r1, #4]
 800601e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8006022:	d001      	beq.n	8006028 <HAL_GPIO_Init+0x44>
        {
          temp |= iocurrent;
 8006024:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8006028:	4d62      	ldr	r5, [pc, #392]	; (80061b4 <HAL_GPIO_Init+0x1d0>)
 800602a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 800602c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800602e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006032:	684f      	ldr	r7, [r1, #4]
 8006034:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006038:	d001      	beq.n	800603e <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 800603a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800603e:	4d5d      	ldr	r5, [pc, #372]	; (80061b4 <HAL_GPIO_Init+0x1d0>)
 8006040:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006042:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8006044:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006048:	684f      	ldr	r7, [r1, #4]
 800604a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800604e:	d001      	beq.n	8006054 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8006050:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006054:	4d57      	ldr	r5, [pc, #348]	; (80061b4 <HAL_GPIO_Init+0x1d0>)
 8006056:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006058:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800605a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800605c:	684e      	ldr	r6, [r1, #4]
 800605e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006062:	d001      	beq.n	8006068 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8006064:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006068:	4a52      	ldr	r2, [pc, #328]	; (80061b4 <HAL_GPIO_Init+0x1d0>)
 800606a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800606c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800606e:	680a      	ldr	r2, [r1, #0]
 8006070:	fa32 f403 	lsrs.w	r4, r2, r3
 8006074:	f000 8099 	beq.w	80061aa <HAL_GPIO_Init+0x1c6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006078:	f04f 0c01 	mov.w	ip, #1
 800607c:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006080:	ea1c 0202 	ands.w	r2, ip, r2
 8006084:	d0f2      	beq.n	800606c <HAL_GPIO_Init+0x88>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006086:	684c      	ldr	r4, [r1, #4]
 8006088:	1e65      	subs	r5, r4, #1
 800608a:	2d01      	cmp	r5, #1
 800608c:	d903      	bls.n	8006096 <HAL_GPIO_Init+0xb2>
 800608e:	2c11      	cmp	r4, #17
 8006090:	d001      	beq.n	8006096 <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006092:	2c12      	cmp	r4, #18
 8006094:	d112      	bne.n	80060bc <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 8006096:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006098:	005e      	lsls	r6, r3, #1
 800609a:	2403      	movs	r4, #3
 800609c:	40b4      	lsls	r4, r6
 800609e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060a2:	68cc      	ldr	r4, [r1, #12]
 80060a4:	40b4      	lsls	r4, r6
 80060a6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80060a8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80060aa:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ac:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80060b0:	684c      	ldr	r4, [r1, #4]
 80060b2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80060b6:	409c      	lsls	r4, r3
 80060b8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80060ba:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80060bc:	684c      	ldr	r4, [r1, #4]
 80060be:	f004 0503 	and.w	r5, r4, #3
 80060c2:	2d03      	cmp	r5, #3
 80060c4:	d092      	beq.n	8005fec <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 80060c6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80060c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80060cc:	2503      	movs	r5, #3
 80060ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80060d2:	43ec      	mvns	r4, r5
 80060d4:	ea26 0e05 	bic.w	lr, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80060d8:	688d      	ldr	r5, [r1, #8]
 80060da:	fa05 f50c 	lsl.w	r5, r5, ip
 80060de:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 80060e2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e4:	684d      	ldr	r5, [r1, #4]
 80060e6:	2d02      	cmp	r5, #2
 80060e8:	d001      	beq.n	80060ee <HAL_GPIO_Init+0x10a>
 80060ea:	2d12      	cmp	r5, #18
 80060ec:	d112      	bne.n	8006114 <HAL_GPIO_Init+0x130>
        temp = GPIOx->AFR[position >> 3u];
 80060ee:	08de      	lsrs	r6, r3, #3
 80060f0:	3608      	adds	r6, #8
 80060f2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060f6:	f003 0507 	and.w	r5, r3, #7
 80060fa:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 80060fe:	250f      	movs	r5, #15
 8006100:	fa05 f50e 	lsl.w	r5, r5, lr
 8006104:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006108:	690d      	ldr	r5, [r1, #16]
 800610a:	fa05 f50e 	lsl.w	r5, r5, lr
 800610e:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006110:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8006114:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006116:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006118:	684c      	ldr	r4, [r1, #4]
 800611a:	f004 0403 	and.w	r4, r4, #3
 800611e:	fa04 f40c 	lsl.w	r4, r4, ip
 8006122:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8006124:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006126:	684c      	ldr	r4, [r1, #4]
 8006128:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800612c:	d09e      	beq.n	800606c <HAL_GPIO_Init+0x88>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612e:	4c22      	ldr	r4, [pc, #136]	; (80061b8 <HAL_GPIO_Init+0x1d4>)
 8006130:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006132:	f045 0501 	orr.w	r5, r5, #1
 8006136:	6625      	str	r5, [r4, #96]	; 0x60
 8006138:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800613a:	f004 0401 	and.w	r4, r4, #1
 800613e:	9401      	str	r4, [sp, #4]
 8006140:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006142:	089d      	lsrs	r5, r3, #2
 8006144:	1cae      	adds	r6, r5, #2
 8006146:	4c1a      	ldr	r4, [pc, #104]	; (80061b0 <HAL_GPIO_Init+0x1cc>)
 8006148:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800614c:	f003 0403 	and.w	r4, r3, #3
 8006150:	00a6      	lsls	r6, r4, #2
 8006152:	240f      	movs	r4, #15
 8006154:	40b4      	lsls	r4, r6
 8006156:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800615a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800615e:	f43f af51 	beq.w	8006004 <HAL_GPIO_Init+0x20>
 8006162:	4c16      	ldr	r4, [pc, #88]	; (80061bc <HAL_GPIO_Init+0x1d8>)
 8006164:	42a0      	cmp	r0, r4
 8006166:	d016      	beq.n	8006196 <HAL_GPIO_Init+0x1b2>
 8006168:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800616c:	42a0      	cmp	r0, r4
 800616e:	d014      	beq.n	800619a <HAL_GPIO_Init+0x1b6>
 8006170:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006174:	42a0      	cmp	r0, r4
 8006176:	d012      	beq.n	800619e <HAL_GPIO_Init+0x1ba>
 8006178:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800617c:	42a0      	cmp	r0, r4
 800617e:	d010      	beq.n	80061a2 <HAL_GPIO_Init+0x1be>
 8006180:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006184:	42a0      	cmp	r0, r4
 8006186:	d00e      	beq.n	80061a6 <HAL_GPIO_Init+0x1c2>
 8006188:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800618c:	42a0      	cmp	r0, r4
 800618e:	f43f af37 	beq.w	8006000 <HAL_GPIO_Init+0x1c>
 8006192:	2407      	movs	r4, #7
 8006194:	e737      	b.n	8006006 <HAL_GPIO_Init+0x22>
 8006196:	2401      	movs	r4, #1
 8006198:	e735      	b.n	8006006 <HAL_GPIO_Init+0x22>
 800619a:	2402      	movs	r4, #2
 800619c:	e733      	b.n	8006006 <HAL_GPIO_Init+0x22>
 800619e:	2403      	movs	r4, #3
 80061a0:	e731      	b.n	8006006 <HAL_GPIO_Init+0x22>
 80061a2:	2404      	movs	r4, #4
 80061a4:	e72f      	b.n	8006006 <HAL_GPIO_Init+0x22>
 80061a6:	2405      	movs	r4, #5
 80061a8:	e72d      	b.n	8006006 <HAL_GPIO_Init+0x22>
  }
}
 80061aa:	b003      	add	sp, #12
 80061ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400
 80061b8:	40021000 	.word	0x40021000
 80061bc:	48000400 	.word	0x48000400

080061c0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80061c0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80061c2:	fa31 f203 	lsrs.w	r2, r1, r3
 80061c6:	f000 808b 	beq.w	80062e0 <HAL_GPIO_DeInit+0x120>
{
 80061ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061cc:	e032      	b.n	8006234 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80061ce:	2506      	movs	r5, #6
 80061d0:	e000      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 80061d2:	2500      	movs	r5, #0
 80061d4:	fa05 fc0c 	lsl.w	ip, r5, ip
 80061d8:	45a4      	cmp	ip, r4
 80061da:	d065      	beq.n	80062a8 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80061dc:	6804      	ldr	r4, [r0, #0]
 80061de:	005d      	lsls	r5, r3, #1
 80061e0:	f04f 0c03 	mov.w	ip, #3
 80061e4:	fa0c fc05 	lsl.w	ip, ip, r5
 80061e8:	ea44 040c 	orr.w	r4, r4, ip
 80061ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80061ee:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80061f2:	f10e 0e08 	add.w	lr, lr, #8
 80061f6:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80061fa:	f003 0507 	and.w	r5, r3, #7
 80061fe:	00ae      	lsls	r6, r5, #2
 8006200:	250f      	movs	r5, #15
 8006202:	40b5      	lsls	r5, r6
 8006204:	ea24 0405 	bic.w	r4, r4, r5
 8006208:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800620c:	6884      	ldr	r4, [r0, #8]
 800620e:	ea24 040c 	bic.w	r4, r4, ip
 8006212:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006214:	6844      	ldr	r4, [r0, #4]
 8006216:	ea24 0402 	bic.w	r4, r4, r2
 800621a:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800621c:	68c4      	ldr	r4, [r0, #12]
 800621e:	ea24 040c 	bic.w	r4, r4, ip
 8006222:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006224:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006226:	ea24 0202 	bic.w	r2, r4, r2
 800622a:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800622c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800622e:	fa31 f203 	lsrs.w	r2, r1, r3
 8006232:	d054      	beq.n	80062de <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006238:	ea12 0701 	ands.w	r7, r2, r1
 800623c:	d0f6      	beq.n	800622c <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800623e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8006242:	f10e 0502 	add.w	r5, lr, #2
 8006246:	4c27      	ldr	r4, [pc, #156]	; (80062e4 <HAL_GPIO_DeInit+0x124>)
 8006248:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800624c:	f003 0c03 	and.w	ip, r3, #3
 8006250:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006254:	250f      	movs	r5, #15
 8006256:	fa05 f60c 	lsl.w	r6, r5, ip
 800625a:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800625c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006260:	d0b7      	beq.n	80061d2 <HAL_GPIO_DeInit+0x12>
 8006262:	4d21      	ldr	r5, [pc, #132]	; (80062e8 <HAL_GPIO_DeInit+0x128>)
 8006264:	42a8      	cmp	r0, r5
 8006266:	d015      	beq.n	8006294 <HAL_GPIO_DeInit+0xd4>
 8006268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800626c:	42a8      	cmp	r0, r5
 800626e:	d013      	beq.n	8006298 <HAL_GPIO_DeInit+0xd8>
 8006270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006274:	42a8      	cmp	r0, r5
 8006276:	d011      	beq.n	800629c <HAL_GPIO_DeInit+0xdc>
 8006278:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800627c:	42a8      	cmp	r0, r5
 800627e:	d00f      	beq.n	80062a0 <HAL_GPIO_DeInit+0xe0>
 8006280:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006284:	42a8      	cmp	r0, r5
 8006286:	d00d      	beq.n	80062a4 <HAL_GPIO_DeInit+0xe4>
 8006288:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800628c:	42a8      	cmp	r0, r5
 800628e:	d09e      	beq.n	80061ce <HAL_GPIO_DeInit+0xe>
 8006290:	2507      	movs	r5, #7
 8006292:	e79f      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 8006294:	2501      	movs	r5, #1
 8006296:	e79d      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 8006298:	2502      	movs	r5, #2
 800629a:	e79b      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 800629c:	2503      	movs	r5, #3
 800629e:	e799      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 80062a0:	2504      	movs	r5, #4
 80062a2:	e797      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
 80062a4:	2505      	movs	r5, #5
 80062a6:	e795      	b.n	80061d4 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 80062a8:	4c10      	ldr	r4, [pc, #64]	; (80062ec <HAL_GPIO_DeInit+0x12c>)
 80062aa:	6825      	ldr	r5, [r4, #0]
 80062ac:	ea25 0507 	bic.w	r5, r5, r7
 80062b0:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80062b2:	6865      	ldr	r5, [r4, #4]
 80062b4:	ea25 0507 	bic.w	r5, r5, r7
 80062b8:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80062ba:	68a5      	ldr	r5, [r4, #8]
 80062bc:	ea25 0507 	bic.w	r5, r5, r7
 80062c0:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80062c2:	68e5      	ldr	r5, [r4, #12]
 80062c4:	ea25 0707 	bic.w	r7, r5, r7
 80062c8:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80062ca:	4f06      	ldr	r7, [pc, #24]	; (80062e4 <HAL_GPIO_DeInit+0x124>)
 80062cc:	f10e 0402 	add.w	r4, lr, #2
 80062d0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062d4:	ea25 0506 	bic.w	r5, r5, r6
 80062d8:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80062dc:	e77e      	b.n	80061dc <HAL_GPIO_DeInit+0x1c>
  }
}
 80062de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	48000400 	.word	0x48000400
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80062f0:	6903      	ldr	r3, [r0, #16]
 80062f2:	4219      	tst	r1, r3
 80062f4:	d001      	beq.n	80062fa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80062f6:	2001      	movs	r0, #1
 80062f8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062fa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80062fc:	4770      	bx	lr

080062fe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062fe:	b10a      	cbz	r2, 8006304 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006300:	6181      	str	r1, [r0, #24]
 8006302:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006304:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006306:	4770      	bx	lr

08006308 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006308:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800630a:	ea01 0203 	and.w	r2, r1, r3
 800630e:	ea21 0103 	bic.w	r1, r1, r3
 8006312:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006316:	6181      	str	r1, [r0, #24]
}
 8006318:	4770      	bx	lr
	...

0800631c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800631c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4203      	tst	r3, r0
 8006324:	d100      	bne.n	8006328 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006326:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800632a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800632c:	f7ff fa9e 	bl	800586c <HAL_GPIO_EXTI_Callback>
}
 8006330:	e7f9      	b.n	8006326 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006332:	bf00      	nop
 8006334:	40010400 	.word	0x40010400

08006338 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006338:	4a02      	ldr	r2, [pc, #8]	; (8006344 <HAL_PWR_EnableBkUpAccess+0xc>)
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006340:	6013      	str	r3, [r2, #0]
}
 8006342:	4770      	bx	lr
 8006344:	40007000 	.word	0x40007000

08006348 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <HAL_PWREx_GetVoltageRange+0xc>)
 800634a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800634c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40007000 	.word	0x40007000

08006358 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006358:	4a02      	ldr	r2, [pc, #8]	; (8006364 <HAL_PWREx_EnableVddIO2+0xc>)
 800635a:	6853      	ldr	r3, [r2, #4]
 800635c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006360:	6053      	str	r3, [r2, #4]
}
 8006362:	4770      	bx	lr
 8006364:	40007000 	.word	0x40007000

08006368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006368:	b530      	push	{r4, r5, lr}
 800636a:	b083      	sub	sp, #12
 800636c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006376:	d00b      	beq.n	8006390 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006378:	f7ff ffe6 	bl	8006348 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800637c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006380:	d017      	beq.n	80063b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006382:	2c80      	cmp	r4, #128	; 0x80
 8006384:	d81f      	bhi.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006386:	d02d      	beq.n	80063e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006388:	2c70      	cmp	r4, #112	; 0x70
 800638a:	d02d      	beq.n	80063e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800638c:	2100      	movs	r1, #0
 800638e:	e01b      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006390:	4d17      	ldr	r5, [pc, #92]	; (80063f0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006392:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006398:	65ab      	str	r3, [r5, #88]	; 0x58
 800639a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800639c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80063a4:	f7ff ffd0 	bl	8006348 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80063a8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80063aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ae:	65ab      	str	r3, [r5, #88]	; 0x58
 80063b0:	e7e4      	b.n	800637c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80063b2:	2c80      	cmp	r4, #128	; 0x80
 80063b4:	d903      	bls.n	80063be <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80063b6:	2ca0      	cmp	r4, #160	; 0xa0
 80063b8:	d903      	bls.n	80063c2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ba:	2102      	movs	r1, #2
 80063bc:	e004      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063be:	2100      	movs	r1, #0
 80063c0:	e002      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80063c2:	2101      	movs	r1, #1
 80063c4:	e000      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80063c6:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80063ca:	6813      	ldr	r3, [r2, #0]
 80063cc:	f023 0307 	bic.w	r3, r3, #7
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	428b      	cmp	r3, r1
 80063dc:	d106      	bne.n	80063ec <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80063de:	2000      	movs	r0, #0
}
 80063e0:	b003      	add	sp, #12
 80063e2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80063e4:	2102      	movs	r1, #2
 80063e6:	e7ef      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80063e8:	2101      	movs	r1, #1
 80063ea:	e7ed      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80063ec:	2001      	movs	r0, #1
 80063ee:	e7f7      	b.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40022000 	.word	0x40022000

080063f8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f8:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 80063fa:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063fc:	68d2      	ldr	r2, [r2, #12]
 80063fe:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006402:	f013 030c 	ands.w	r3, r3, #12
 8006406:	d00a      	beq.n	800641e <HAL_RCC_GetSysClockFreq+0x26>
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d006      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800640c:	2b04      	cmp	r3, #4
 800640e:	d01f      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006410:	2b08      	cmp	r3, #8
 8006412:	d020      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006414:	2000      	movs	r0, #0
 8006416:	4602      	mov	r2, r0
 8006418:	e010      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800641a:	2a01      	cmp	r2, #1
 800641c:	d1f6      	bne.n	800640c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800641e:	4a1f      	ldr	r2, [pc, #124]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	f012 0f08 	tst.w	r2, #8
 8006426:	d10c      	bne.n	8006442 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006428:	4a1c      	ldr	r2, [pc, #112]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 800642a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800642e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8006432:	491b      	ldr	r1, [pc, #108]	; (80064a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006434:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006438:	b143      	cbz	r3, 800644c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800643a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d00d      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x64>
}
 8006440:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800644a:	e7f2      	b.n	8006432 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800644c:	4610      	mov	r0, r2
 800644e:	e7f5      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8006450:	4814      	ldr	r0, [pc, #80]	; (80064a4 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006452:	2200      	movs	r2, #0
 8006454:	e7f2      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8006456:	4814      	ldr	r0, [pc, #80]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006458:	2200      	movs	r2, #0
 800645a:	e7ef      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006464:	2b02      	cmp	r3, #2
 8006466:	d016      	beq.n	8006496 <HAL_RCC_GetSysClockFreq+0x9e>
 8006468:	2b03      	cmp	r3, #3
 800646a:	d100      	bne.n	800646e <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800646e:	490b      	ldr	r1, [pc, #44]	; (800649c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006470:	68c8      	ldr	r0, [r1, #12]
 8006472:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8006476:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006478:	68c8      	ldr	r0, [r1, #12]
 800647a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800647e:	fb02 f000 	mul.w	r0, r2, r0
 8006482:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	68cb      	ldr	r3, [r1, #12]
 8006488:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800648c:	3301      	adds	r3, #1
 800648e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8006490:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006494:	e7d4      	b.n	8006440 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8006496:	4a03      	ldr	r2, [pc, #12]	; (80064a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006498:	e7e9      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x76>
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000
 80064a0:	0800a51c 	.word	0x0800a51c
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	007a1200 	.word	0x007a1200

080064ac <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f000 82fc 	beq.w	8006aaa <HAL_RCC_OscConfig+0x5fe>
{
 80064b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b4:	b083      	sub	sp, #12
 80064b6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b8:	4b96      	ldr	r3, [pc, #600]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80064ba:	689d      	ldr	r5, [r3, #8]
 80064bc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064c0:	68de      	ldr	r6, [r3, #12]
 80064c2:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064c6:	6803      	ldr	r3, [r0, #0]
 80064c8:	f013 0f10 	tst.w	r3, #16
 80064cc:	d05a      	beq.n	8006584 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064ce:	b1e5      	cbz	r5, 800650a <HAL_RCC_OscConfig+0x5e>
 80064d0:	2d0c      	cmp	r5, #12
 80064d2:	d018      	beq.n	8006506 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064d4:	69a3      	ldr	r3, [r4, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 80bb 	beq.w	8006652 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80064dc:	4a8d      	ldr	r2, [pc, #564]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80064e6:	f7ff fcbd 	bl	8005e64 <HAL_GetTick>
 80064ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064ec:	4b89      	ldr	r3, [pc, #548]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f013 0f02 	tst.w	r3, #2
 80064f4:	f040 809a 	bne.w	800662c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064f8:	f7ff fcb4 	bl	8005e64 <HAL_GetTick>
 80064fc:	1bc0      	subs	r0, r0, r7
 80064fe:	2802      	cmp	r0, #2
 8006500:	d9f4      	bls.n	80064ec <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8006502:	2003      	movs	r0, #3
 8006504:	e2dc      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006506:	2e01      	cmp	r6, #1
 8006508:	d1e4      	bne.n	80064d4 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800650a:	4b82      	ldr	r3, [pc, #520]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f013 0f02 	tst.w	r3, #2
 8006512:	d003      	beq.n	800651c <HAL_RCC_OscConfig+0x70>
 8006514:	69a3      	ldr	r3, [r4, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 82c9 	beq.w	8006aae <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800651c:	6a20      	ldr	r0, [r4, #32]
 800651e:	4b7d      	ldr	r3, [pc, #500]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f013 0f08 	tst.w	r3, #8
 8006526:	d05b      	beq.n	80065e0 <HAL_RCC_OscConfig+0x134>
 8006528:	4b7a      	ldr	r3, [pc, #488]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006530:	4298      	cmp	r0, r3
 8006532:	d85c      	bhi.n	80065ee <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006534:	4b77      	ldr	r3, [pc, #476]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	f042 0208 	orr.w	r2, r2, #8
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	430a      	orrs	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006550:	69e1      	ldr	r1, [r4, #28]
 8006552:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006556:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006558:	2d00      	cmp	r5, #0
 800655a:	d060      	beq.n	800661e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800655c:	f7ff ff4c 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8006560:	4b6c      	ldr	r3, [pc, #432]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006568:	4a6b      	ldr	r2, [pc, #428]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800656a:	5cd3      	ldrb	r3, [r2, r3]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	40d8      	lsrs	r0, r3
 8006572:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006574:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8006576:	4b6a      	ldr	r3, [pc, #424]	; (8006720 <HAL_RCC_OscConfig+0x274>)
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	f7ff fc31 	bl	8005de0 <HAL_InitTick>
        if(status != HAL_OK)
 800657e:	2800      	cmp	r0, #0
 8006580:	f040 829e 	bne.w	8006ac0 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f013 0f01 	tst.w	r3, #1
 800658a:	f000 8081 	beq.w	8006690 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800658e:	2d08      	cmp	r5, #8
 8006590:	d075      	beq.n	800667e <HAL_RCC_OscConfig+0x1d2>
 8006592:	2d0c      	cmp	r5, #12
 8006594:	d071      	beq.n	800667a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659c:	f000 8097 	beq.w	80066ce <HAL_RCC_OscConfig+0x222>
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a4:	f000 8099 	beq.w	80066da <HAL_RCC_OscConfig+0x22e>
 80065a8:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065b8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8099 	beq.w	80066f4 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80065c2:	f7ff fc4f 	bl	8005e64 <HAL_GetTick>
 80065c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065c8:	4b52      	ldr	r3, [pc, #328]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80065d0:	d15e      	bne.n	8006690 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d2:	f7ff fc47 	bl	8005e64 <HAL_GetTick>
 80065d6:	1bc0      	subs	r0, r0, r7
 80065d8:	2864      	cmp	r0, #100	; 0x64
 80065da:	d9f5      	bls.n	80065c8 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80065dc:	2003      	movs	r0, #3
 80065de:	e26f      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065e0:	4b4c      	ldr	r3, [pc, #304]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80065e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ec:	e7a0      	b.n	8006530 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ee:	f7ff febb 	bl	8006368 <RCC_SetFlashLatencyFromMSIRange>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f040 825d 	bne.w	8006ab2 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065f8:	4b46      	ldr	r3, [pc, #280]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006608:	6a21      	ldr	r1, [r4, #32]
 800660a:	430a      	orrs	r2, r1
 800660c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006614:	69e1      	ldr	r1, [r4, #28]
 8006616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	e79e      	b.n	800655c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800661e:	6a20      	ldr	r0, [r4, #32]
 8006620:	f7ff fea2 	bl	8006368 <RCC_SetFlashLatencyFromMSIRange>
 8006624:	2800      	cmp	r0, #0
 8006626:	d099      	beq.n	800655c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8006628:	2001      	movs	r0, #1
 800662a:	e249      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800662c:	4b39      	ldr	r3, [pc, #228]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	f042 0208 	orr.w	r2, r2, #8
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800663c:	6a21      	ldr	r1, [r4, #32]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006648:	69e1      	ldr	r1, [r4, #28]
 800664a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800664e:	605a      	str	r2, [r3, #4]
 8006650:	e798      	b.n	8006584 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8006652:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006654:	6813      	ldr	r3, [r2, #0]
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800665c:	f7ff fc02 	bl	8005e64 <HAL_GetTick>
 8006660:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006662:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f013 0f02 	tst.w	r3, #2
 800666a:	d08b      	beq.n	8006584 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666c:	f7ff fbfa 	bl	8005e64 <HAL_GetTick>
 8006670:	1bc0      	subs	r0, r0, r7
 8006672:	2802      	cmp	r0, #2
 8006674:	d9f5      	bls.n	8006662 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8006676:	2003      	movs	r0, #3
 8006678:	e222      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800667a:	2e03      	cmp	r6, #3
 800667c:	d18b      	bne.n	8006596 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800667e:	4b25      	ldr	r3, [pc, #148]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006686:	d003      	beq.n	8006690 <HAL_RCC_OscConfig+0x1e4>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 8213 	beq.w	8006ab6 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	f013 0f02 	tst.w	r3, #2
 8006696:	d058      	beq.n	800674a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006698:	2d04      	cmp	r5, #4
 800669a:	d045      	beq.n	8006728 <HAL_RCC_OscConfig+0x27c>
 800669c:	2d0c      	cmp	r5, #12
 800669e:	d041      	beq.n	8006724 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066a0:	68e3      	ldr	r3, [r4, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d077      	beq.n	8006796 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80066a6:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80066a8:	6813      	ldr	r3, [r2, #0]
 80066aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80066b0:	f7ff fbd8 	bl	8005e64 <HAL_GetTick>
 80066b4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b6:	4b17      	ldr	r3, [pc, #92]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80066be:	d161      	bne.n	8006784 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c0:	f7ff fbd0 	bl	8005e64 <HAL_GetTick>
 80066c4:	1b80      	subs	r0, r0, r6
 80066c6:	2802      	cmp	r0, #2
 80066c8:	d9f5      	bls.n	80066b6 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80066ca:	2003      	movs	r0, #3
 80066cc:	e1f8      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ce:	4a11      	ldr	r2, [pc, #68]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80066d0:	6813      	ldr	r3, [r2, #0]
 80066d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	e76f      	b.n	80065ba <HAL_RCC_OscConfig+0x10e>
 80066da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066de:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e762      	b.n	80065ba <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 80066f4:	f7ff fbb6 	bl	8005e64 <HAL_GetTick>
 80066f8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCC_OscConfig+0x268>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006702:	d0c5      	beq.n	8006690 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006704:	f7ff fbae 	bl	8005e64 <HAL_GetTick>
 8006708:	1bc0      	subs	r0, r0, r7
 800670a:	2864      	cmp	r0, #100	; 0x64
 800670c:	d9f5      	bls.n	80066fa <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800670e:	2003      	movs	r0, #3
 8006710:	e1d6      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	0800a54c 	.word	0x0800a54c
 800671c:	20000010 	.word	0x20000010
 8006720:	20000018 	.word	0x20000018
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006724:	2e02      	cmp	r6, #2
 8006726:	d1bb      	bne.n	80066a0 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006728:	4b95      	ldr	r3, [pc, #596]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006730:	d003      	beq.n	800673a <HAL_RCC_OscConfig+0x28e>
 8006732:	68e3      	ldr	r3, [r4, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 81c0 	beq.w	8006aba <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673a:	4a91      	ldr	r2, [pc, #580]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800673c:	6853      	ldr	r3, [r2, #4]
 800673e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8006742:	6921      	ldr	r1, [r4, #16]
 8006744:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006748:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	f013 0f08 	tst.w	r3, #8
 8006750:	d04c      	beq.n	80067ec <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006752:	6963      	ldr	r3, [r4, #20]
 8006754:	b39b      	cbz	r3, 80067be <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8006756:	4a8a      	ldr	r2, [pc, #552]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006758:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006764:	f7ff fb7e 	bl	8005e64 <HAL_GetTick>
 8006768:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800676a:	4b85      	ldr	r3, [pc, #532]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800676c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006770:	f013 0f02 	tst.w	r3, #2
 8006774:	d13a      	bne.n	80067ec <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7ff fb75 	bl	8005e64 <HAL_GetTick>
 800677a:	1b80      	subs	r0, r0, r6
 800677c:	2802      	cmp	r0, #2
 800677e:	d9f4      	bls.n	800676a <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8006780:	2003      	movs	r0, #3
 8006782:	e19d      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006784:	4a7e      	ldr	r2, [pc, #504]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006786:	6853      	ldr	r3, [r2, #4]
 8006788:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800678c:	6921      	ldr	r1, [r4, #16]
 800678e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006792:	6053      	str	r3, [r2, #4]
 8006794:	e7d9      	b.n	800674a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8006796:	4a7a      	ldr	r2, [pc, #488]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006798:	6813      	ldr	r3, [r2, #0]
 800679a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80067a0:	f7ff fb60 	bl	8005e64 <HAL_GetTick>
 80067a4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067a6:	4b76      	ldr	r3, [pc, #472]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80067ae:	d0cc      	beq.n	800674a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067b0:	f7ff fb58 	bl	8005e64 <HAL_GetTick>
 80067b4:	1b80      	subs	r0, r0, r6
 80067b6:	2802      	cmp	r0, #2
 80067b8:	d9f5      	bls.n	80067a6 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80067ba:	2003      	movs	r0, #3
 80067bc:	e180      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 80067be:	4a70      	ldr	r2, [pc, #448]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80067c0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80067cc:	f7ff fb4a 	bl	8005e64 <HAL_GetTick>
 80067d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067d2:	4b6b      	ldr	r3, [pc, #428]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80067d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d8:	f013 0f02 	tst.w	r3, #2
 80067dc:	d006      	beq.n	80067ec <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067de:	f7ff fb41 	bl	8005e64 <HAL_GetTick>
 80067e2:	1b80      	subs	r0, r0, r6
 80067e4:	2802      	cmp	r0, #2
 80067e6:	d9f4      	bls.n	80067d2 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80067e8:	2003      	movs	r0, #3
 80067ea:	e169      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	f013 0f04 	tst.w	r3, #4
 80067f2:	d07a      	beq.n	80068ea <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067f4:	4b62      	ldr	r3, [pc, #392]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80067fc:	d136      	bne.n	800686c <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fe:	4b60      	ldr	r3, [pc, #384]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006806:	659a      	str	r2, [r3, #88]	; 0x58
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006812:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006814:	4b5b      	ldr	r3, [pc, #364]	; (8006984 <HAL_RCC_OscConfig+0x4d8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800681c:	d028      	beq.n	8006870 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d039      	beq.n	8006898 <HAL_RCC_OscConfig+0x3ec>
 8006824:	2b05      	cmp	r3, #5
 8006826:	d03f      	beq.n	80068a8 <HAL_RCC_OscConfig+0x3fc>
 8006828:	4b55      	ldr	r3, [pc, #340]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800682a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006836:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03d      	beq.n	80068c4 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8006848:	f7ff fb0c 	bl	8005e64 <HAL_GetTick>
 800684c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684e:	4b4c      	ldr	r3, [pc, #304]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006854:	f013 0f02 	tst.w	r3, #2
 8006858:	d146      	bne.n	80068e8 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685a:	f7ff fb03 	bl	8005e64 <HAL_GetTick>
 800685e:	1bc0      	subs	r0, r0, r7
 8006860:	f241 3388 	movw	r3, #5000	; 0x1388
 8006864:	4298      	cmp	r0, r3
 8006866:	d9f2      	bls.n	800684e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8006868:	2003      	movs	r0, #3
 800686a:	e129      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 800686c:	2600      	movs	r6, #0
 800686e:	e7d1      	b.n	8006814 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006870:	4a44      	ldr	r2, [pc, #272]	; (8006984 <HAL_RCC_OscConfig+0x4d8>)
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800687a:	f7ff faf3 	bl	8005e64 <HAL_GetTick>
 800687e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	4b40      	ldr	r3, [pc, #256]	; (8006984 <HAL_RCC_OscConfig+0x4d8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006888:	d1c9      	bne.n	800681e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688a:	f7ff faeb 	bl	8005e64 <HAL_GetTick>
 800688e:	1bc0      	subs	r0, r0, r7
 8006890:	2802      	cmp	r0, #2
 8006892:	d9f5      	bls.n	8006880 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8006894:	2003      	movs	r0, #3
 8006896:	e113      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006898:	4a39      	ldr	r2, [pc, #228]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800689a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068a6:	e7cc      	b.n	8006842 <HAL_RCC_OscConfig+0x396>
 80068a8:	4b35      	ldr	r3, [pc, #212]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80068aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80068ae:	f042 0204 	orr.w	r2, r2, #4
 80068b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80068b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80068c2:	e7be      	b.n	8006842 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80068c4:	f7ff face 	bl	8005e64 <HAL_GetTick>
 80068c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f013 0f02 	tst.w	r3, #2
 80068d4:	d008      	beq.n	80068e8 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7ff fac5 	bl	8005e64 <HAL_GetTick>
 80068da:	1bc0      	subs	r0, r0, r7
 80068dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80068e0:	4298      	cmp	r0, r3
 80068e2:	d9f2      	bls.n	80068ca <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80068e4:	2003      	movs	r0, #3
 80068e6:	e0eb      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 80068e8:	bb6e      	cbnz	r6, 8006946 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80e6 	beq.w	8006abe <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d02d      	beq.n	8006952 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068f6:	2d0c      	cmp	r5, #12
 80068f8:	f000 80e8 	beq.w	8006acc <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006904:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800690c:	d104      	bne.n	8006918 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800690e:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006910:	68d3      	ldr	r3, [r2, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006918:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800691a:	68d3      	ldr	r3, [r2, #12]
 800691c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006924:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006926:	f7ff fa9d 	bl	8005e64 <HAL_GetTick>
 800692a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006934:	f000 80b7 	beq.w	8006aa6 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7ff fa94 	bl	8005e64 <HAL_GetTick>
 800693c:	1b00      	subs	r0, r0, r4
 800693e:	2802      	cmp	r0, #2
 8006940:	d9f4      	bls.n	800692c <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8006942:	2003      	movs	r0, #3
 8006944:	e0bc      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006946:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006948:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800694a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800694e:	6593      	str	r3, [r2, #88]	; 0x58
 8006950:	e7cb      	b.n	80068ea <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006954:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	f003 0103 	and.w	r1, r3, #3
 800695a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800695c:	4291      	cmp	r1, r2
 800695e:	d013      	beq.n	8006988 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006960:	2d0c      	cmp	r5, #12
 8006962:	f000 80af 	beq.w	8006ac4 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800696e:	f040 80ab 	bne.w	8006ac8 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <HAL_RCC_OscConfig+0x4d4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800697a:	d031      	beq.n	80069e0 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 800697c:	2001      	movs	r0, #1
 800697e:	e09f      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
 8006980:	40021000 	.word	0x40021000
 8006984:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800698c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800698e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006990:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006994:	d1e4      	bne.n	8006960 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800699a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800699c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80069a0:	d1de      	bne.n	8006960 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80069a2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80069a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069a8:	3a07      	subs	r2, #7
 80069aa:	bf18      	it	ne
 80069ac:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069ae:	4291      	cmp	r1, r2
 80069b0:	d1d6      	bne.n	8006960 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069b2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80069b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80069b8:	0852      	lsrs	r2, r2, #1
 80069ba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80069bc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80069c0:	d1ce      	bne.n	8006960 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80069c2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80069c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069c8:	0852      	lsrs	r2, r2, #1
 80069ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069cc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80069d0:	d1c6      	bne.n	8006960 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d2:	4b3f      	ldr	r3, [pc, #252]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80069da:	d04a      	beq.n	8006a72 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 80069dc:	2000      	movs	r0, #0
 80069de:	e06f      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 80069e0:	4a3b      	ldr	r2, [pc, #236]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069e8:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80069ea:	f7ff fa3b 	bl	8005e64 <HAL_GetTick>
 80069ee:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069f0:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80069f8:	d006      	beq.n	8006a08 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fa:	f7ff fa33 	bl	8005e64 <HAL_GetTick>
 80069fe:	1b40      	subs	r0, r0, r5
 8006a00:	2802      	cmp	r0, #2
 8006a02:	d9f5      	bls.n	80069f0 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8006a04:	2003      	movs	r0, #3
 8006a06:	e05b      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a08:	4a31      	ldr	r2, [pc, #196]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 8006a0a:	68d3      	ldr	r3, [r2, #12]
 8006a0c:	4931      	ldr	r1, [pc, #196]	; (8006ad4 <HAL_RCC_OscConfig+0x628>)
 8006a0e:	4019      	ands	r1, r3
 8006a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006a14:	3801      	subs	r0, #1
 8006a16:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006a1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006a20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006a22:	0840      	lsrs	r0, r0, #1
 8006a24:	3801      	subs	r0, #1
 8006a26:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8006a2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006a2c:	0840      	lsrs	r0, r0, #1
 8006a2e:	3801      	subs	r0, #1
 8006a30:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8006a34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a36:	0900      	lsrs	r0, r0, #4
 8006a38:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8006a40:	6813      	ldr	r3, [r2, #0]
 8006a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a46:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a48:	68d3      	ldr	r3, [r2, #12]
 8006a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4e:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8006a50:	f7ff fa08 	bl	8005e64 <HAL_GetTick>
 8006a54:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a56:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7ff fa00 	bl	8005e64 <HAL_GetTick>
 8006a64:	1b00      	subs	r0, r0, r4
 8006a66:	2802      	cmp	r0, #2
 8006a68:	d9f5      	bls.n	8006a56 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8006a6a:	2003      	movs	r0, #3
 8006a6c:	e028      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e026      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006a7a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006a82:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8006a84:	f7ff f9ee 	bl	8005e64 <HAL_GetTick>
 8006a88:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <HAL_RCC_OscConfig+0x624>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a94:	f7ff f9e6 	bl	8005e64 <HAL_GetTick>
 8006a98:	1b03      	subs	r3, r0, r4
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d9f5      	bls.n	8006a8a <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	e00e      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e00c      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e00a      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8006aaa:	2001      	movs	r0, #1
}
 8006aac:	4770      	bx	lr
        return HAL_ERROR;
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e006      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	e004      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e002      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8006aba:	2001      	movs	r0, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8006abe:	2000      	movs	r0, #0
}
 8006ac0:	b003      	add	sp, #12
 8006ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	e7fb      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8006ac8:	2001      	movs	r0, #1
 8006aca:	e7f9      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8006acc:	2001      	movs	r0, #1
 8006ace:	e7f7      	b.n	8006ac0 <HAL_RCC_OscConfig+0x614>
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	f99d808c 	.word	0xf99d808c

08006ad8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	f000 8098 	beq.w	8006c0e <HAL_RCC_ClockConfig+0x136>
{
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b4e      	ldr	r3, [pc, #312]	; (8006c20 <HAL_RCC_ClockConfig+0x148>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	428b      	cmp	r3, r1
 8006aee:	d20b      	bcs.n	8006b08 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af0:	4a4b      	ldr	r2, [pc, #300]	; (8006c20 <HAL_RCC_ClockConfig+0x148>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	f023 0307 	bic.w	r3, r3, #7
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afc:	6813      	ldr	r3, [r2, #0]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	428b      	cmp	r3, r1
 8006b04:	f040 8085 	bne.w	8006c12 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	f013 0f01 	tst.w	r3, #1
 8006b0e:	d039      	beq.n	8006b84 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b10:	686b      	ldr	r3, [r5, #4]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d009      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d026      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b1a:	bb63      	cbnz	r3, 8006b76 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b1c:	4a41      	ldr	r2, [pc, #260]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b1e:	6812      	ldr	r2, [r2, #0]
 8006b20:	f012 0f02 	tst.w	r2, #2
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8006b26:	2001      	movs	r0, #1
 8006b28:	e070      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2a:	4a3e      	ldr	r2, [pc, #248]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006b32:	d070      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b34:	493b      	ldr	r1, [pc, #236]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b36:	688a      	ldr	r2, [r1, #8]
 8006b38:	f022 0203 	bic.w	r2, r2, #3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006b40:	f7ff f990 	bl	8005e64 <HAL_GetTick>
 8006b44:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	686a      	ldr	r2, [r5, #4]
 8006b50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006b54:	d016      	beq.n	8006b84 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b56:	f7ff f985 	bl	8005e64 <HAL_GetTick>
 8006b5a:	1b80      	subs	r0, r0, r6
 8006b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b60:	4298      	cmp	r0, r3
 8006b62:	d9f0      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8006b64:	2003      	movs	r0, #3
 8006b66:	e051      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b68:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006b70:	d1e0      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8006b72:	2001      	movs	r0, #1
 8006b74:	e04a      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b76:	4a2b      	ldr	r2, [pc, #172]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006b7e:	d1d9      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8006b80:	2001      	movs	r0, #1
 8006b82:	e043      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	f013 0f02 	tst.w	r3, #2
 8006b8a:	d006      	beq.n	8006b9a <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006b8e:	6893      	ldr	r3, [r2, #8]
 8006b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b94:	68a9      	ldr	r1, [r5, #8]
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b9a:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <HAL_RCC_ClockConfig+0x148>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	d90a      	bls.n	8006bbc <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <HAL_RCC_ClockConfig+0x148>)
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	4323      	orrs	r3, r4
 8006bb0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d12e      	bne.n	8006c1a <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	f013 0f04 	tst.w	r3, #4
 8006bc2:	d006      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc4:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006bc6:	6893      	ldr	r3, [r2, #8]
 8006bc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006bcc:	68e9      	ldr	r1, [r5, #12]
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	f013 0f08 	tst.w	r3, #8
 8006bd8:	d007      	beq.n	8006bea <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006bdc:	6893      	ldr	r3, [r2, #8]
 8006bde:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006be2:	6929      	ldr	r1, [r5, #16]
 8006be4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006be8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bea:	f7ff fc05 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_RCC_ClockConfig+0x14c>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <HAL_RCC_ClockConfig+0x150>)
 8006bf8:	5cd3      	ldrb	r3, [r2, r3]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	40d8      	lsrs	r0, r3
 8006c00:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <HAL_RCC_ClockConfig+0x154>)
 8006c02:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <HAL_RCC_ClockConfig+0x158>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	f7ff f8ea 	bl	8005de0 <HAL_InitTick>
}
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006c0e:	2001      	movs	r0, #1
}
 8006c10:	4770      	bx	lr
      return HAL_ERROR;
 8006c12:	2001      	movs	r0, #1
 8006c14:	e7fa      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8006c16:	2001      	movs	r0, #1
 8006c18:	e7f8      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7f6      	b.n	8006c0c <HAL_RCC_ClockConfig+0x134>
 8006c1e:	bf00      	nop
 8006c20:	40022000 	.word	0x40022000
 8006c24:	40021000 	.word	0x40021000
 8006c28:	0800a54c 	.word	0x0800a54c
 8006c2c:	20000010 	.word	0x20000010
 8006c30:	20000018 	.word	0x20000018

08006c34 <HAL_RCC_GetHCLKFreq>:
}
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <HAL_RCC_GetHCLKFreq+0x8>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20000010 	.word	0x20000010

08006c40 <HAL_RCC_GetPCLK1Freq>:
{
 8006c40:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c42:	f7ff fff7 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006c4e:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c50:	5cd3      	ldrb	r3, [r2, r3]
 8006c52:	f003 031f 	and.w	r3, r3, #31
}
 8006c56:	40d8      	lsrs	r0, r3
 8006c58:	bd08      	pop	{r3, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	0800a55c 	.word	0x0800a55c

08006c64 <HAL_RCC_GetPCLK2Freq>:
{
 8006c64:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c66:	f7ff ffe5 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006c72:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c74:	5cd3      	ldrb	r3, [r2, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
}
 8006c7a:	40d8      	lsrs	r0, r3
 8006c7c:	bd08      	pop	{r3, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	0800a55c 	.word	0x0800a55c

08006c88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c8e:	4b59      	ldr	r3, [pc, #356]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f013 0f03 	tst.w	r3, #3
 8006c96:	d018      	beq.n	8006cca <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c98:	4b56      	ldr	r3, [pc, #344]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	6802      	ldr	r2, [r0, #0]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d002      	beq.n	8006cac <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ca6:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	f000 809e 	beq.w	8006dee <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006cb2:	4b50      	ldr	r3, [pc, #320]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006cba:	3301      	adds	r3, #1
 8006cbc:	6842      	ldr	r2, [r0, #4]
       ||
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d001      	beq.n	8006cc6 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8006cc2:	2501      	movs	r5, #1
 8006cc4:	e7f0      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	e009      	b.n	8006cde <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8006cca:	6803      	ldr	r3, [r0, #0]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d057      	beq.n	8006d80 <RCCEx_PLLSAI1_Config+0xf8>
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d05c      	beq.n	8006d8e <RCCEx_PLLSAI1_Config+0x106>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d042      	beq.n	8006d5e <RCCEx_PLLSAI1_Config+0xd6>
 8006cd8:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	d1e4      	bne.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8006cde:	4a45      	ldr	r2, [pc, #276]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ce6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006ce8:	f7ff f8bc 	bl	8005e64 <HAL_GetTick>
 8006cec:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cee:	4b41      	ldr	r3, [pc, #260]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006cf6:	d005      	beq.n	8006d04 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cf8:	f7ff f8b4 	bl	8005e64 <HAL_GetTick>
 8006cfc:	1b83      	subs	r3, r0, r6
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d9f5      	bls.n	8006cee <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8006d02:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d1cf      	bne.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	d14e      	bne.n	8006daa <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d0c:	4939      	ldr	r1, [pc, #228]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	68a0      	ldr	r0, [r4, #8]
 8006d1a:	68e2      	ldr	r2, [r4, #12]
 8006d1c:	0912      	lsrs	r2, r2, #4
 8006d1e:	0452      	lsls	r2, r2, #17
 8006d20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d24:	4313      	orrs	r3, r2
 8006d26:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d28:	4a32      	ldr	r2, [pc, #200]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006d32:	f7ff f897 	bl	8005e64 <HAL_GetTick>
 8006d36:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d38:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006d40:	d105      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d42:	f7ff f88f 	bl	8005e64 <HAL_GetTick>
 8006d46:	1b83      	subs	r3, r0, r6
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d9f5      	bls.n	8006d38 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8006d4c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	d1aa      	bne.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d52:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d54:	6913      	ldr	r3, [r2, #16]
 8006d56:	69a1      	ldr	r1, [r4, #24]
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6113      	str	r3, [r2, #16]
 8006d5c:	e7a4      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d5e:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	f012 0f02 	tst.w	r2, #2
 8006d66:	d01e      	beq.n	8006da6 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d68:	4822      	ldr	r0, [pc, #136]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d6a:	68c2      	ldr	r2, [r0, #12]
 8006d6c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006d70:	6861      	ldr	r1, [r4, #4]
 8006d72:	3901      	subs	r1, #1
 8006d74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60c3      	str	r3, [r0, #12]
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e7ac      	b.n	8006cda <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d80:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006d88:	d1ee      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8006d8a:	2501      	movs	r5, #1
 8006d8c:	e7a5      	b.n	8006cda <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d8e:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006d96:	d1e7      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d98:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006da0:	d1e2      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8006da2:	2501      	movs	r5, #1
 8006da4:	e799      	b.n	8006cda <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8006da6:	2501      	movs	r5, #1
 8006da8:	e797      	b.n	8006cda <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8006daa:	2f01      	cmp	r7, #1
 8006dac:	d00f      	beq.n	8006dce <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dae:	4811      	ldr	r0, [pc, #68]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006db0:	6902      	ldr	r2, [r0, #16]
 8006db2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006db6:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006dba:	68a1      	ldr	r1, [r4, #8]
 8006dbc:	6963      	ldr	r3, [r4, #20]
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	065b      	lsls	r3, r3, #25
 8006dc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	6103      	str	r3, [r0, #16]
 8006dcc:	e7ac      	b.n	8006d28 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dce:	4809      	ldr	r0, [pc, #36]	; (8006df4 <RCCEx_PLLSAI1_Config+0x16c>)
 8006dd0:	6902      	ldr	r2, [r0, #16]
 8006dd2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006dd6:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006dda:	68a1      	ldr	r1, [r4, #8]
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	3b01      	subs	r3, #1
 8006de2:	055b      	lsls	r3, r3, #21
 8006de4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006de8:	4313      	orrs	r3, r2
 8006dea:	6103      	str	r3, [r0, #16]
 8006dec:	e79c      	b.n	8006d28 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8006dee:	2501      	movs	r5, #1
 8006df0:	e75a      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x20>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000

08006df8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dfe:	4b50      	ldr	r3, [pc, #320]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f013 0f03 	tst.w	r3, #3
 8006e06:	d018      	beq.n	8006e3a <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e08:	4b4d      	ldr	r3, [pc, #308]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	6802      	ldr	r2, [r0, #0]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d002      	beq.n	8006e1c <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e16:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8006e18:	4628      	mov	r0, r5
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	f000 808c 	beq.w	8006f3a <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006e22:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	6842      	ldr	r2, [r0, #4]
       ||
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d001      	beq.n	8006e36 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8006e32:	2501      	movs	r5, #1
 8006e34:	e7f0      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2500      	movs	r5, #0
 8006e38:	e009      	b.n	8006e4e <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8006e3a:	6803      	ldr	r3, [r0, #0]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d057      	beq.n	8006ef0 <RCCEx_PLLSAI2_Config+0xf8>
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d05c      	beq.n	8006efe <RCCEx_PLLSAI2_Config+0x106>
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d042      	beq.n	8006ece <RCCEx_PLLSAI2_Config+0xd6>
 8006e48:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	d1e4      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e4e:	4a3c      	ldr	r2, [pc, #240]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e56:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e58:	f7ff f804 	bl	8005e64 <HAL_GetTick>
 8006e5c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e5e:	4b38      	ldr	r3, [pc, #224]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006e66:	d005      	beq.n	8006e74 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e68:	f7fe fffc 	bl	8005e64 <HAL_GetTick>
 8006e6c:	1b83      	subs	r3, r0, r6
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d9f5      	bls.n	8006e5e <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 8006e72:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	d1cf      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	d14e      	bne.n	8006f1a <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e7c:	4930      	ldr	r1, [pc, #192]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e7e:	694b      	ldr	r3, [r1, #20]
 8006e80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e88:	68a0      	ldr	r0, [r4, #8]
 8006e8a:	68e2      	ldr	r2, [r4, #12]
 8006e8c:	0912      	lsrs	r2, r2, #4
 8006e8e:	0452      	lsls	r2, r2, #17
 8006e90:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006e94:	4313      	orrs	r3, r2
 8006e96:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e98:	4a29      	ldr	r2, [pc, #164]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006ea2:	f7fe ffdf 	bl	8005e64 <HAL_GetTick>
 8006ea6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006eb0:	d105      	bne.n	8006ebe <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006eb2:	f7fe ffd7 	bl	8005e64 <HAL_GetTick>
 8006eb6:	1b83      	subs	r3, r0, r6
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d9f5      	bls.n	8006ea8 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8006ebc:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	d1aa      	bne.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006ec4:	6953      	ldr	r3, [r2, #20]
 8006ec6:	6961      	ldr	r1, [r4, #20]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6153      	str	r3, [r2, #20]
 8006ecc:	e7a4      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ece:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	f012 0f02 	tst.w	r2, #2
 8006ed6:	d01e      	beq.n	8006f16 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ed8:	4819      	ldr	r0, [pc, #100]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006eda:	68c2      	ldr	r2, [r0, #12]
 8006edc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006ee0:	6861      	ldr	r1, [r4, #4]
 8006ee2:	3901      	subs	r1, #1
 8006ee4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60c3      	str	r3, [r0, #12]
 8006eec:	2500      	movs	r5, #0
 8006eee:	e7ac      	b.n	8006e4a <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ef0:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006ef8:	d1ee      	bne.n	8006ed8 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8006efa:	2501      	movs	r5, #1
 8006efc:	e7a5      	b.n	8006e4a <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006efe:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006f06:	d1e7      	bne.n	8006ed8 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f08:	4a0d      	ldr	r2, [pc, #52]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006f10:	d1e2      	bne.n	8006ed8 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8006f12:	2501      	movs	r5, #1
 8006f14:	e799      	b.n	8006e4a <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8006f16:	2501      	movs	r5, #1
 8006f18:	e797      	b.n	8006e4a <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f1a:	4809      	ldr	r0, [pc, #36]	; (8006f40 <RCCEx_PLLSAI2_Config+0x148>)
 8006f1c:	6942      	ldr	r2, [r0, #20]
 8006f1e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006f22:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006f26:	68a1      	ldr	r1, [r4, #8]
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	065b      	lsls	r3, r3, #25
 8006f30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f34:	4313      	orrs	r3, r2
 8006f36:	6143      	str	r3, [r0, #20]
 8006f38:	e7ae      	b.n	8006e98 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8006f3a:	2501      	movs	r5, #1
 8006f3c:	e76c      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0x20>
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000

08006f44 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f4c:	6803      	ldr	r3, [r0, #0]
 8006f4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006f52:	d033      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f54:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f5a:	d01f      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006f5c:	d80c      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006f5e:	b323      	cbz	r3, 8006faa <HAL_RCCEx_PeriphCLKConfig+0x66>
 8006f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f64:	d105      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f66:	2100      	movs	r1, #0
 8006f68:	3020      	adds	r0, #32
 8006f6a:	f7ff ff45 	bl	8006df8 <RCCEx_PLLSAI2_Config>
 8006f6e:	4606      	mov	r6, r0
      break;
 8006f70:	e020      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f72:	2701      	movs	r7, #1
 8006f74:	463e      	mov	r6, r7
 8006f76:	e023      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f7c:	d10b      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f7e:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f80:	4a60      	ldr	r2, [pc, #384]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006f82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006f8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f92:	2700      	movs	r7, #0
 8006f94:	e014      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f96:	2701      	movs	r7, #1
 8006f98:	463e      	mov	r6, r7
 8006f9a:	e011      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f9c:	4a59      	ldr	r2, [pc, #356]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006f9e:	68d3      	ldr	r3, [r2, #12]
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e7ea      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006faa:	2100      	movs	r1, #0
 8006fac:	3004      	adds	r0, #4
 8006fae:	f7ff fe6b 	bl	8006c88 <RCCEx_PLLSAI1_Config>
 8006fb2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	d0e3      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006fb8:	4637      	mov	r7, r6
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fbc:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fbe:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006fc6:	d030      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8006fc8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fce:	d01f      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006fd0:	d80d      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8006fd2:	b31b      	cbz	r3, 800701c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fd8:	d106      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	f104 0020 	add.w	r0, r4, #32
 8006fe0:	f7ff ff0a 	bl	8006df8 <RCCEx_PLLSAI2_Config>
 8006fe4:	4606      	mov	r6, r0
      break;
 8006fe6:	e005      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8006fe8:	2701      	movs	r7, #1
 8006fea:	463e      	mov	r6, r7
 8006fec:	e01d      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8006fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ff2:	d10a      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8006ff4:	b9c6      	cbnz	r6, 8007028 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ff6:	4a43      	ldr	r2, [pc, #268]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ff8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006ffc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007000:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007002:	430b      	orrs	r3, r1
 8007004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007008:	e00f      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800700a:	2701      	movs	r7, #1
 800700c:	463e      	mov	r6, r7
 800700e:	e00c      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007010:	4a3c      	ldr	r2, [pc, #240]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007012:	68d3      	ldr	r3, [r2, #12]
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	60d3      	str	r3, [r2, #12]
      break;
 800701a:	e7eb      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800701c:	2100      	movs	r1, #0
 800701e:	1d20      	adds	r0, r4, #4
 8007020:	f7ff fe32 	bl	8006c88 <RCCEx_PLLSAI1_Config>
 8007024:	4606      	mov	r6, r0
      break;
 8007026:	e7e5      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007028:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007030:	d071      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007032:	4b34      	ldr	r3, [pc, #208]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800703a:	d14e      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b31      	ldr	r3, [pc, #196]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800703e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007040:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007044:	659a      	str	r2, [r3, #88]	; 0x58
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007050:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007054:	4a2c      	ldr	r2, [pc, #176]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800705e:	f7fe ff01 	bl	8005e64 <HAL_GetTick>
 8007062:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007064:	4b28      	ldr	r3, [pc, #160]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f413 7f80 	tst.w	r3, #256	; 0x100
 800706c:	d105      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706e:	f7fe fef9 	bl	8005e64 <HAL_GetTick>
 8007072:	1b40      	subs	r0, r0, r5
 8007074:	2802      	cmp	r0, #2
 8007076:	d9f5      	bls.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8007078:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800707a:	2e00      	cmp	r6, #0
 800707c:	d146      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800707e:	4b21      	ldr	r3, [pc, #132]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007084:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007088:	d016      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800708a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800708e:	429a      	cmp	r2, r3
 8007090:	d012      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007092:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007094:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800709c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80070a0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80070a4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80070ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80070b0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80070b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070b8:	f013 0f01 	tst.w	r3, #1
 80070bc:	d110      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80070be:	2e00      	cmp	r6, #0
 80070c0:	f040 8127 	bne.w	8007312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070c4:	4a0f      	ldr	r2, [pc, #60]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80070d2:	430b      	orrs	r3, r1
 80070d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d8:	e019      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	e7b9      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 80070e0:	f7fe fec0 	bl	8005e64 <HAL_GetTick>
 80070e4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	f013 0f02 	tst.w	r3, #2
 80070f0:	d1e5      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f2:	f7fe feb7 	bl	8005e64 <HAL_GetTick>
 80070f6:	1b40      	subs	r0, r0, r5
 80070f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80070fc:	4298      	cmp	r0, r3
 80070fe:	d9f2      	bls.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8007100:	2603      	movs	r6, #3
 8007102:	e7dc      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007104:	40021000 	.word	0x40021000
 8007108:	40007000 	.word	0x40007000
      status = ret;
 800710c:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800710e:	f1b8 0f00 	cmp.w	r8, #0
 8007112:	f040 8100 	bne.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f013 0f01 	tst.w	r3, #1
 800711c:	d008      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800711e:	4a9d      	ldr	r2, [pc, #628]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007120:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800712a:	430b      	orrs	r3, r1
 800712c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	f013 0f02 	tst.w	r3, #2
 8007136:	d008      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007138:	4a96      	ldr	r2, [pc, #600]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800713a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800713e:	f023 030c 	bic.w	r3, r3, #12
 8007142:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007144:	430b      	orrs	r3, r1
 8007146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f013 0f04 	tst.w	r3, #4
 8007150:	d008      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007152:	4a90      	ldr	r2, [pc, #576]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007154:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007158:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800715c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800715e:	430b      	orrs	r3, r1
 8007160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f013 0f08 	tst.w	r3, #8
 800716a:	d008      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800716c:	4a89      	ldr	r2, [pc, #548]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800716e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007172:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007176:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007178:	430b      	orrs	r3, r1
 800717a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f013 0f10 	tst.w	r3, #16
 8007184:	d008      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007186:	4a83      	ldr	r2, [pc, #524]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007188:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800718c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007190:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007192:	430b      	orrs	r3, r1
 8007194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	f013 0f20 	tst.w	r3, #32
 800719e:	d008      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071a0:	4a7c      	ldr	r2, [pc, #496]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071ac:	430b      	orrs	r3, r1
 80071ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80071b8:	d008      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ba:	4a76      	ldr	r2, [pc, #472]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071c0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80071c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071c6:	430b      	orrs	r3, r1
 80071c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071d2:	d008      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071d4:	4a6f      	ldr	r2, [pc, #444]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071de:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80071e0:	430b      	orrs	r3, r1
 80071e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071ec:	d008      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071ee:	4a69      	ldr	r2, [pc, #420]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80071f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80071f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80071fa:	430b      	orrs	r3, r1
 80071fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007206:	d008      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007208:	4a62      	ldr	r2, [pc, #392]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800720a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800720e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007212:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007214:	430b      	orrs	r3, r1
 8007216:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007220:	d008      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007222:	4a5c      	ldr	r2, [pc, #368]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007224:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007228:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800722c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800722e:	430b      	orrs	r3, r1
 8007230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800723a:	d00f      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800723c:	4a55      	ldr	r2, [pc, #340]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800723e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007242:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007246:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007248:	430b      	orrs	r3, r1
 800724a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800724e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007254:	d065      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800725a:	d067      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007262:	d00f      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007264:	4a4b      	ldr	r2, [pc, #300]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007266:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800726a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800726e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007270:	430b      	orrs	r3, r1
 8007272:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007276:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800727c:	d05e      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800727e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007282:	d060      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800728a:	d00f      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800728c:	4a41      	ldr	r2, [pc, #260]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800728e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007292:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007296:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007298:	430b      	orrs	r3, r1
 800729a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800729e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a4:	d057      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072aa:	d059      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80072b2:	d00f      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072b4:	4a37      	ldr	r2, [pc, #220]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80072ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80072be:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80072c0:	430b      	orrs	r3, r1
 80072c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80072c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072cc:	d050      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80072ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d2:	d055      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80072da:	d008      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072dc:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80072e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80072e8:	430b      	orrs	r3, r1
 80072ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80072f4:	d009      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072f6:	4a27      	ldr	r2, [pc, #156]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80072fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007300:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007304:	430b      	orrs	r3, r1
 8007306:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800730a:	4638      	mov	r0, r7
 800730c:	b002      	add	sp, #8
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8007312:	4637      	mov	r7, r6
 8007314:	e6fb      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007316:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007318:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800731a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800731e:	6593      	str	r3, [r2, #88]	; 0x58
 8007320:	e6f9      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007322:	68d3      	ldr	r3, [r2, #12]
 8007324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007328:	60d3      	str	r3, [r2, #12]
 800732a:	e797      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800732c:	2101      	movs	r1, #1
 800732e:	1d20      	adds	r0, r4, #4
 8007330:	f7ff fcaa 	bl	8006c88 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8007334:	2800      	cmp	r0, #0
 8007336:	d091      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8007338:	4607      	mov	r7, r0
 800733a:	e78f      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800733c:	68d3      	ldr	r3, [r2, #12]
 800733e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007342:	60d3      	str	r3, [r2, #12]
 8007344:	e79e      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007346:	2101      	movs	r1, #1
 8007348:	1d20      	adds	r0, r4, #4
 800734a:	f7ff fc9d 	bl	8006c88 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800734e:	2800      	cmp	r0, #0
 8007350:	d098      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8007352:	4607      	mov	r7, r0
 8007354:	e796      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007356:	68d3      	ldr	r3, [r2, #12]
 8007358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735c:	60d3      	str	r3, [r2, #12]
 800735e:	e7a5      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007360:	2101      	movs	r1, #1
 8007362:	1d20      	adds	r0, r4, #4
 8007364:	f7ff fc90 	bl	8006c88 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007368:	2800      	cmp	r0, #0
 800736a:	d09f      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 800736c:	4607      	mov	r7, r0
 800736e:	e79d      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007370:	2102      	movs	r1, #2
 8007372:	1d20      	adds	r0, r4, #4
 8007374:	f7ff fc88 	bl	8006c88 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007378:	2800      	cmp	r0, #0
 800737a:	d0ab      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800737c:	4607      	mov	r7, r0
 800737e:	e7a9      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007380:	2102      	movs	r1, #2
 8007382:	f104 0020 	add.w	r0, r4, #32
 8007386:	f7ff fd37 	bl	8006df8 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800738a:	2800      	cmp	r0, #0
 800738c:	d0a2      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800738e:	4607      	mov	r7, r0
 8007390:	e7a0      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007392:	bf00      	nop
 8007394:	40021000 	.word	0x40021000

08007398 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_RCCEx_DisableLSECSS+0x18>)
 800739a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800739e:	f022 0220 	bic.w	r2, r2, #32
 80073a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073ac:	619a      	str	r2, [r3, #24]
}
 80073ae:	4770      	bx	lr
 80073b0:	40021000 	.word	0x40021000

080073b4 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073b4:	4a02      	ldr	r2, [pc, #8]	; (80073c0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	6013      	str	r3, [r2, #0]
}
 80073be:	4770      	bx	lr
 80073c0:	40021000 	.word	0x40021000

080073c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	4605      	mov	r5, r0
 80073cc:	4688      	mov	r8, r1
 80073ce:	4617      	mov	r7, r2
 80073d0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073d2:	f7fe fd47 	bl	8005e64 <HAL_GetTick>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	1a1b      	subs	r3, r3, r0
 80073da:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80073de:	f7fe fd41 	bl	8005e64 <HAL_GetTick>
 80073e2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073e4:	4b2b      	ldr	r3, [pc, #172]	; (8007494 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80073ec:	fb09 f303 	mul.w	r3, r9, r3
 80073f0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	689c      	ldr	r4, [r3, #8]
 80073f6:	ea38 0304 	bics.w	r3, r8, r4
 80073fa:	bf0c      	ite	eq
 80073fc:	f04f 0c01 	moveq.w	ip, #1
 8007400:	f04f 0c00 	movne.w	ip, #0
 8007404:	45bc      	cmp	ip, r7
 8007406:	d040      	beq.n	800748a <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007408:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800740c:	d0f1      	beq.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800740e:	f7fe fd29 	bl	8005e64 <HAL_GetTick>
 8007412:	eba0 000a 	sub.w	r0, r0, sl
 8007416:	4548      	cmp	r0, r9
 8007418:	d20a      	bcs.n	8007430 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	d007      	beq.n	8007430 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007420:	9a01      	ldr	r2, [sp, #4]
 8007422:	b102      	cbz	r2, 8007426 <SPI_WaitFlagStateUntilTimeout+0x62>
 8007424:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	3b01      	subs	r3, #1
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	4691      	mov	r9, r2
 800742e:	e7e0      	b.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007430:	682a      	ldr	r2, [r5, #0]
 8007432:	6853      	ldr	r3, [r2, #4]
 8007434:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007438:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800743a:	686b      	ldr	r3, [r5, #4]
 800743c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007440:	d00b      	beq.n	800745a <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007442:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007448:	d014      	beq.n	8007474 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800744a:	2301      	movs	r3, #1
 800744c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007450:	2300      	movs	r3, #0
 8007452:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007456:	2003      	movs	r0, #3
 8007458:	e018      	b.n	800748c <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745a:	68ab      	ldr	r3, [r5, #8]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007460:	d002      	beq.n	8007468 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007466:	d1ec      	bne.n	8007442 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8007468:	682a      	ldr	r2, [r5, #0]
 800746a:	6813      	ldr	r3, [r2, #0]
 800746c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e7e6      	b.n	8007442 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8007474:	682a      	ldr	r2, [r5, #0]
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	682a      	ldr	r2, [r5, #0]
 8007480:	6813      	ldr	r3, [r2, #0]
 8007482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e7df      	b.n	800744a <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 800748a:	2000      	movs	r0, #0
}
 800748c:	b002      	add	sp, #8
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	bf00      	nop
 8007494:	20000010 	.word	0x20000010

08007498 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	4607      	mov	r7, r0
 80074a0:	460d      	mov	r5, r1
 80074a2:	4616      	mov	r6, r2
 80074a4:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074a6:	f7fe fcdd 	bl	8005e64 <HAL_GetTick>
 80074aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ac:	1a1b      	subs	r3, r3, r0
 80074ae:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 80074b2:	f7fe fcd7 	bl	8005e64 <HAL_GetTick>
 80074b6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074b8:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <SPI_WaitFifoStateUntilTimeout+0xe0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80074c4:	0d1b      	lsrs	r3, r3, #20
 80074c6:	fb09 f303 	mul.w	r3, r9, r3
 80074ca:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 80074cc:	e002      	b.n	80074d4 <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80074ce:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80074d2:	d10f      	bne.n	80074f4 <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689c      	ldr	r4, [r3, #8]
 80074d8:	ea04 0c05 	and.w	ip, r4, r5
 80074dc:	45b4      	cmp	ip, r6
 80074de:	d047      	beq.n	8007570 <SPI_WaitFifoStateUntilTimeout+0xd8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074e0:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80074e4:	d1f3      	bne.n	80074ce <SPI_WaitFifoStateUntilTimeout+0x36>
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	d1f1      	bne.n	80074ce <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80074ea:	7b1b      	ldrb	r3, [r3, #12]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	e7ec      	b.n	80074ce <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074f4:	f7fe fcb6 	bl	8005e64 <HAL_GetTick>
 80074f8:	eba0 000a 	sub.w	r0, r0, sl
 80074fc:	4548      	cmp	r0, r9
 80074fe:	d20a      	bcs.n	8007516 <SPI_WaitFifoStateUntilTimeout+0x7e>
 8007500:	f1b9 0f00 	cmp.w	r9, #0
 8007504:	d007      	beq.n	8007516 <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007506:	9a00      	ldr	r2, [sp, #0]
 8007508:	b102      	cbz	r2, 800750c <SPI_WaitFifoStateUntilTimeout+0x74>
 800750a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	3b01      	subs	r3, #1
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4691      	mov	r9, r2
 8007514:	e7de      	b.n	80074d4 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	6853      	ldr	r3, [r2, #4]
 800751a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800751e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007526:	d00b      	beq.n	8007540 <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752e:	d014      	beq.n	800755a <SPI_WaitFifoStateUntilTimeout+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007536:	2300      	movs	r3, #0
 8007538:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 800753c:	2003      	movs	r0, #3
 800753e:	e018      	b.n	8007572 <SPI_WaitFifoStateUntilTimeout+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007546:	d002      	beq.n	800754e <SPI_WaitFifoStateUntilTimeout+0xb6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d1ec      	bne.n	8007528 <SPI_WaitFifoStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	e7e6      	b.n	8007528 <SPI_WaitFifoStateUntilTimeout+0x90>
          SPI_RESET_CRC(hspi);
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	6813      	ldr	r3, [r2, #0]
 8007568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e7df      	b.n	8007530 <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 8007570:	2000      	movs	r0, #0
}
 8007572:	b002      	add	sp, #8
 8007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007578:	20000010 	.word	0x20000010

0800757c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007586:	9200      	str	r2, [sp, #0]
 8007588:	460b      	mov	r3, r1
 800758a:	2200      	movs	r2, #0
 800758c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007590:	f7ff ff82 	bl	8007498 <SPI_WaitFifoStateUntilTimeout>
 8007594:	b9b0      	cbnz	r0, 80075c4 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007596:	9600      	str	r6, [sp, #0]
 8007598:	462b      	mov	r3, r5
 800759a:	2200      	movs	r2, #0
 800759c:	2180      	movs	r1, #128	; 0x80
 800759e:	4620      	mov	r0, r4
 80075a0:	f7ff ff10 	bl	80073c4 <SPI_WaitFlagStateUntilTimeout>
 80075a4:	b9a8      	cbnz	r0, 80075d2 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075a6:	9600      	str	r6, [sp, #0]
 80075a8:	462b      	mov	r3, r5
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7ff ff71 	bl	8007498 <SPI_WaitFifoStateUntilTimeout>
 80075b6:	b150      	cbz	r0, 80075ce <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80075ba:	f043 0320 	orr.w	r3, r3, #32
 80075be:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80075c0:	2003      	movs	r0, #3
 80075c2:	e004      	b.n	80075ce <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80075c6:	f043 0320 	orr.w	r3, r3, #32
 80075ca:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80075cc:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80075ce:	b002      	add	sp, #8
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80075d4:	f043 0320 	orr.w	r3, r3, #32
 80075d8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80075da:	2003      	movs	r0, #3
 80075dc:	e7f7      	b.n	80075ce <SPI_EndRxTxTransaction+0x52>

080075de <HAL_SPI_MspInit>:
}
 80075de:	4770      	bx	lr

080075e0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f000 8089 	beq.w	80076f8 <HAL_SPI_Init+0x118>
{
 80075e6:	b510      	push	{r4, lr}
 80075e8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075ec:	b933      	cbnz	r3, 80075fc <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ee:	6843      	ldr	r3, [r0, #4]
 80075f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f4:	d005      	beq.n	8007602 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61c3      	str	r3, [r0, #28]
 80075fa:	e002      	b.n	8007602 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075fc:	2300      	movs	r3, #0
 80075fe:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007600:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007602:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007606:	2b00      	cmp	r3, #0
 8007608:	d055      	beq.n	80076b6 <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800760a:	2302      	movs	r3, #2
 800760c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007618:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800761a:	68e3      	ldr	r3, [r4, #12]
 800761c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007620:	d94f      	bls.n	80076c2 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007622:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007624:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007628:	d004      	beq.n	8007634 <HAL_SPI_Init+0x54>
 800762a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800762e:	d001      	beq.n	8007634 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800763a:	68a1      	ldr	r1, [r4, #8]
 800763c:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8007640:	430b      	orrs	r3, r1
 8007642:	6921      	ldr	r1, [r4, #16]
 8007644:	f001 0102 	and.w	r1, r1, #2
 8007648:	430b      	orrs	r3, r1
 800764a:	6961      	ldr	r1, [r4, #20]
 800764c:	f001 0101 	and.w	r1, r1, #1
 8007650:	430b      	orrs	r3, r1
 8007652:	69a1      	ldr	r1, [r4, #24]
 8007654:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8007658:	430b      	orrs	r3, r1
 800765a:	69e1      	ldr	r1, [r4, #28]
 800765c:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8007660:	430b      	orrs	r3, r1
 8007662:	6a21      	ldr	r1, [r4, #32]
 8007664:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007668:	430b      	orrs	r3, r1
 800766a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800766c:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8007670:	6820      	ldr	r0, [r4, #0]
 8007672:	430b      	orrs	r3, r1
 8007674:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767c:	d024      	beq.n	80076c8 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800767e:	8b63      	ldrh	r3, [r4, #26]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007686:	f001 0110 	and.w	r1, r1, #16
 800768a:	430b      	orrs	r3, r1
 800768c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768e:	f001 0108 	and.w	r1, r1, #8
 8007692:	430b      	orrs	r3, r1
 8007694:	68e1      	ldr	r1, [r4, #12]
 8007696:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800769a:	430b      	orrs	r3, r1
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	604b      	str	r3, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a8:	d022      	beq.n	80076f0 <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076aa:	2000      	movs	r0, #0
 80076ac:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80076b4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80076b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff ff8f 	bl	80075de <HAL_SPI_MspInit>
 80076c0:	e7a3      	b.n	800760a <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076c6:	e7ad      	b.n	8007624 <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80076c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076ca:	b92b      	cbnz	r3, 80076d8 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076cc:	68e3      	ldr	r3, [r4, #12]
 80076ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076d2:	d90a      	bls.n	80076ea <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80076d4:	2302      	movs	r3, #2
 80076d6:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80076d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d1cf      	bne.n	800767e <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80076de:	6821      	ldr	r1, [r4, #0]
 80076e0:	680b      	ldr	r3, [r1, #0]
 80076e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076e6:	600b      	str	r3, [r1, #0]
 80076e8:	e7c9      	b.n	800767e <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80076ea:	2301      	movs	r3, #1
 80076ec:	6323      	str	r3, [r4, #48]	; 0x30
 80076ee:	e7f3      	b.n	80076d8 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80076f4:	611a      	str	r2, [r3, #16]
 80076f6:	e7d8      	b.n	80076aa <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 80076f8:	2001      	movs	r0, #1
}
 80076fa:	4770      	bx	lr

080076fc <HAL_SPI_Transmit>:
{
 80076fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007700:	b083      	sub	sp, #12
 8007702:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8007704:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007708:	2b01      	cmp	r3, #1
 800770a:	f000 810f 	beq.w	800792c <HAL_SPI_Transmit+0x230>
 800770e:	4604      	mov	r4, r0
 8007710:	4688      	mov	r8, r1
 8007712:	4691      	mov	r9, r2
 8007714:	2301      	movs	r3, #1
 8007716:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800771a:	f7fe fba3 	bl	8005e64 <HAL_GetTick>
 800771e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007720:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8007724:	b2f6      	uxtb	r6, r6
 8007726:	2e01      	cmp	r6, #1
 8007728:	f040 80ed 	bne.w	8007906 <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 800772c:	f1b8 0f00 	cmp.w	r8, #0
 8007730:	f000 80ea 	beq.w	8007908 <HAL_SPI_Transmit+0x20c>
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	f000 80e6 	beq.w	8007908 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800773c:	2303      	movs	r3, #3
 800773e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007742:	2300      	movs	r3, #0
 8007744:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007746:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800774a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800774e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007752:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007754:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007758:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800775c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800775e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007766:	d022      	beq.n	80077ae <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800776a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776e:	d029      	beq.n	80077c4 <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007778:	d103      	bne.n	8007782 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007780:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007788:	d94d      	bls.n	8007826 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800778a:	6863      	ldr	r3, [r4, #4]
 800778c:	b113      	cbz	r3, 8007794 <HAL_SPI_Transmit+0x98>
 800778e:	f1b9 0f01 	cmp.w	r9, #1
 8007792:	d12e      	bne.n	80077f2 <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007794:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	8812      	ldrh	r2, [r2, #0]
 800779a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800779c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800779e:	3302      	adds	r3, #2
 80077a0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80077a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80077ac:	e021      	b.n	80077f2 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	6813      	ldr	r3, [r2, #0]
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80077b8:	6822      	ldr	r2, [r4, #0]
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e7d1      	b.n	8007768 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	6813      	ldr	r3, [r2, #0]
 80077d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	e7ca      	b.n	8007770 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077da:	f7fe fb43 	bl	8005e64 <HAL_GetTick>
 80077de:	1bc0      	subs	r0, r0, r7
 80077e0:	42a8      	cmp	r0, r5
 80077e2:	d303      	bcc.n	80077ec <HAL_SPI_Transmit+0xf0>
 80077e4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80077e8:	f040 8098 	bne.w	800791c <HAL_SPI_Transmit+0x220>
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	f000 8097 	beq.w	8007920 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 80077f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d066      	beq.n	80078c8 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	f012 0f02 	tst.w	r2, #2
 8007802:	d0ea      	beq.n	80077da <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007804:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007806:	8812      	ldrh	r2, [r2, #0]
 8007808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800780a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800780c:	3302      	adds	r3, #2
 800780e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007810:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8007814:	fa1f fc8c 	uxth.w	ip, ip
 8007818:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800781c:	fa1f fc8c 	uxth.w	ip, ip
 8007820:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8007824:	e7e5      	b.n	80077f2 <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	b113      	cbz	r3, 8007830 <HAL_SPI_Transmit+0x134>
 800782a:	f1b9 0f01 	cmp.w	r9, #1
 800782e:	d133      	bne.n	8007898 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8007830:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d90c      	bls.n	8007852 <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	8812      	ldrh	r2, [r2, #0]
 800783e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007842:	3302      	adds	r3, #2
 8007844:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007846:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b02      	subs	r3, #2
 800784c:	b29b      	uxth	r3, r3
 800784e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007850:	e022      	b.n	8007898 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800785a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800785c:	3301      	adds	r3, #1
 800785e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007860:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29b      	uxth	r3, r3
 8007868:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800786a:	e015      	b.n	8007898 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800786c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8007872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007874:	3301      	adds	r3, #1
 8007876:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007878:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007882:	e009      	b.n	8007898 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007884:	f7fe faee 	bl	8005e64 <HAL_GetTick>
 8007888:	1bc0      	subs	r0, r0, r7
 800788a:	42a8      	cmp	r0, r5
 800788c:	d302      	bcc.n	8007894 <HAL_SPI_Transmit+0x198>
 800788e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007892:	d147      	bne.n	8007924 <HAL_SPI_Transmit+0x228>
 8007894:	2d00      	cmp	r5, #0
 8007896:	d047      	beq.n	8007928 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 8007898:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	b1a3      	cbz	r3, 80078c8 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	6893      	ldr	r3, [r2, #8]
 80078a2:	f013 0f02 	tst.w	r3, #2
 80078a6:	d0ed      	beq.n	8007884 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 80078a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d9dd      	bls.n	800786c <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078b8:	3302      	adds	r3, #2
 80078ba:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b02      	subs	r3, #2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80078c6:	e7e7      	b.n	8007898 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d014      	beq.n	80078fa <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078d0:	463a      	mov	r2, r7
 80078d2:	4629      	mov	r1, r5
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7ff fe51 	bl	800757c <SPI_EndRxTxTransaction>
 80078da:	b108      	cbz	r0, 80078e0 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078dc:	2320      	movs	r3, #32
 80078de:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078e0:	68a3      	ldr	r3, [r4, #8]
 80078e2:	b933      	cbnz	r3, 80078f2 <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	9201      	str	r2, [sp, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80078f4:	b943      	cbnz	r3, 8007908 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f6:	2600      	movs	r6, #0
 80078f8:	e006      	b.n	8007908 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	e7e4      	b.n	80078d0 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 8007906:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007908:	2301      	movs	r3, #1
 800790a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800790e:	2300      	movs	r3, #0
 8007910:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007914:	4630      	mov	r0, r6
 8007916:	b003      	add	sp, #12
 8007918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800791c:	2603      	movs	r6, #3
 800791e:	e7f3      	b.n	8007908 <HAL_SPI_Transmit+0x20c>
 8007920:	2603      	movs	r6, #3
 8007922:	e7f1      	b.n	8007908 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 8007924:	2603      	movs	r6, #3
 8007926:	e7ef      	b.n	8007908 <HAL_SPI_Transmit+0x20c>
 8007928:	2603      	movs	r6, #3
 800792a:	e7ed      	b.n	8007908 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 800792c:	2602      	movs	r6, #2
 800792e:	e7f1      	b.n	8007914 <HAL_SPI_Transmit+0x218>

08007930 <HAL_SPI_TransmitReceive>:
{
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	b085      	sub	sp, #20
 8007936:	461f      	mov	r7, r3
 8007938:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 800793e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007942:	2b01      	cmp	r3, #1
 8007944:	f000 81f7 	beq.w	8007d36 <HAL_SPI_TransmitReceive+0x406>
 8007948:	4604      	mov	r4, r0
 800794a:	468a      	mov	sl, r1
 800794c:	4693      	mov	fp, r2
 800794e:	2301      	movs	r3, #1
 8007950:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8007954:	f7fe fa86 	bl	8005e64 <HAL_GetTick>
 8007958:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800795a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800795e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8007960:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8007968:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800796c:	2b01      	cmp	r3, #1
 800796e:	d00a      	beq.n	8007986 <HAL_SPI_TransmitReceive+0x56>
 8007970:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8007974:	f040 81c4 	bne.w	8007d00 <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007978:	68a1      	ldr	r1, [r4, #8]
 800797a:	2900      	cmp	r1, #0
 800797c:	f040 81cb 	bne.w	8007d16 <HAL_SPI_TransmitReceive+0x3e6>
 8007980:	2b04      	cmp	r3, #4
 8007982:	f040 81ca 	bne.w	8007d1a <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007986:	f1ba 0f00 	cmp.w	sl, #0
 800798a:	f000 81c8 	beq.w	8007d1e <HAL_SPI_TransmitReceive+0x3ee>
 800798e:	f1bb 0f00 	cmp.w	fp, #0
 8007992:	f000 81c6 	beq.w	8007d22 <HAL_SPI_TransmitReceive+0x3f2>
 8007996:	2f00      	cmp	r7, #0
 8007998:	f000 81c5 	beq.w	8007d26 <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800799c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079a6:	2305      	movs	r3, #5
 80079a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079b0:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80079b4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80079b8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079bc:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80079c0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80079c2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80079c4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079c6:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ce:	d029      	beq.n	8007a24 <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079d0:	68e3      	ldr	r3, [r4, #12]
 80079d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079d6:	d801      	bhi.n	80079dc <HAL_SPI_TransmitReceive+0xac>
 80079d8:	2f01      	cmp	r7, #1
 80079da:	d92d      	bls.n	8007a38 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	6853      	ldr	r3, [r2, #4]
 80079e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079ee:	d103      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f8:	68e3      	ldr	r3, [r4, #12]
 80079fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079fe:	d97d      	bls.n	8007afc <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	b10b      	cbz	r3, 8007a08 <HAL_SPI_TransmitReceive+0xd8>
 8007a04:	2f01      	cmp	r7, #1
 8007a06:	d10b      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	8812      	ldrh	r2, [r2, #0]
 8007a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a12:	3302      	adds	r3, #2
 8007a14:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007a16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007a20:	2701      	movs	r7, #1
 8007a22:	e042      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	6813      	ldr	r3, [r2, #0]
 8007a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e7cb      	b.n	80079d0 <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	6853      	ldr	r3, [r2, #4]
 8007a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	e7d0      	b.n	80079e6 <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007a44:	f018 0f04 	tst.w	r8, #4
 8007a48:	d107      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x12a>
 8007a4a:	f019 0f08 	tst.w	r9, #8
 8007a4e:	d004      	beq.n	8007a5a <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	6813      	ldr	r3, [r2, #0]
 8007a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a58:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	6813      	ldr	r3, [r2, #0]
 8007a5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a62:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8007a64:	2700      	movs	r7, #0
 8007a66:	e000      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x13a>
 8007a68:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	f012 0f01 	tst.w	r2, #1
 8007a72:	d011      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x168>
 8007a74:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007a78:	b292      	uxth	r2, r2
 8007a7a:	b16a      	cbz	r2, 8007a98 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a84:	3302      	adds	r3, #2
 8007a86:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007a88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8007a96:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a98:	f7fe f9e4 	bl	8005e64 <HAL_GetTick>
 8007a9c:	1b80      	subs	r0, r0, r6
 8007a9e:	42a8      	cmp	r0, r5
 8007aa0:	d303      	bcc.n	8007aaa <HAL_SPI_TransmitReceive+0x17a>
 8007aa2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007aa6:	f040 8140 	bne.w	8007d2a <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	b92b      	cbnz	r3, 8007abc <HAL_SPI_TransmitReceive+0x18c>
 8007ab0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 80d1 	beq.w	8007c5e <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	f012 0f02 	tst.w	r2, #2
 8007ac4:	d0d1      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x13a>
 8007ac6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007ac8:	b292      	uxth	r2, r2
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d0cd      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x13a>
 8007ace:	2f00      	cmp	r7, #0
 8007ad0:	d0cb      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ad4:	8812      	ldrh	r2, [r2, #0]
 8007ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ada:	3302      	adds	r3, #2
 8007adc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007ade:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007ae8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1bb      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x138>
 8007af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af6:	d0a5      	beq.n	8007a44 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8007af8:	2700      	movs	r7, #0
 8007afa:	e7b6      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	b10b      	cbz	r3, 8007b04 <HAL_SPI_TransmitReceive+0x1d4>
 8007b00:	2f01      	cmp	r7, #1
 8007b02:	d10f      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 8007b04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d90d      	bls.n	8007b28 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b16:	3302      	adds	r3, #2
 8007b18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b02      	subs	r3, #2
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007b24:	2701      	movs	r7, #1
 8007b26:	e065      	b.n	8007bf4 <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b32:	3301      	adds	r3, #1
 8007b34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007b36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b40:	e7f0      	b.n	8007b24 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 8007b42:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007b44:	b292      	uxth	r2, r2
 8007b46:	2a01      	cmp	r2, #1
 8007b48:	d913      	bls.n	8007b72 <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b4c:	8812      	ldrh	r2, [r2, #0]
 8007b4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b52:	3302      	adds	r3, #2
 8007b54:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b02      	subs	r3, #2
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007b60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	bb1b      	cbnz	r3, 8007bae <HAL_SPI_TransmitReceive+0x27e>
 8007b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6c:	d00d      	beq.n	8007b8a <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 8007b6e:	2700      	movs	r7, #0
 8007b70:	e052      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8007b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007b7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b88:	e7ea      	b.n	8007b60 <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007b8a:	f018 0f04 	tst.w	r8, #4
 8007b8e:	d107      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x270>
 8007b90:	f019 0f08 	tst.w	r9, #8
 8007b94:	d004      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	6813      	ldr	r3, [r2, #0]
 8007b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b9e:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ba8:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8007baa:	2700      	movs	r7, #0
 8007bac:	e034      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x2e8>
 8007bae:	2700      	movs	r7, #0
 8007bb0:	e032      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	6853      	ldr	r3, [r2, #4]
 8007bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bba:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8007bbc:	2701      	movs	r7, #1
 8007bbe:	e00d      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bc2:	7b1b      	ldrb	r3, [r3, #12]
 8007bc4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8007bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc8:	3301      	adds	r3, #1
 8007bca:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007bcc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8007bda:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bdc:	f7fe f942 	bl	8005e64 <HAL_GetTick>
 8007be0:	1b80      	subs	r0, r0, r6
 8007be2:	42a8      	cmp	r0, r5
 8007be4:	d303      	bcc.n	8007bee <HAL_SPI_TransmitReceive+0x2be>
 8007be6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007bea:	f040 80a0 	bne.w	8007d2e <HAL_SPI_TransmitReceive+0x3fe>
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	f000 809f 	beq.w	8007d32 <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b923      	cbnz	r3, 8007c04 <HAL_SPI_TransmitReceive+0x2d4>
 8007bfa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d02c      	beq.n	8007c5e <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	f012 0f02 	tst.w	r2, #2
 8007c0c:	d004      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x2e8>
 8007c0e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007c10:	b292      	uxth	r2, r2
 8007c12:	b10a      	cbz	r2, 8007c18 <HAL_SPI_TransmitReceive+0x2e8>
 8007c14:	2f00      	cmp	r7, #0
 8007c16:	d194      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	f012 0f01 	tst.w	r2, #1
 8007c20:	d0dc      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x2ac>
 8007c22:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007c26:	b292      	uxth	r2, r2
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d0d7      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 8007c2c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8007c30:	b292      	uxth	r2, r2
 8007c32:	2a01      	cmp	r2, #1
 8007c34:	d9c4      	bls.n	8007bc0 <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3e:	3302      	adds	r3, #2
 8007c40:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007c42:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b02      	subs	r3, #2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007c50:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d9ab      	bls.n	8007bb2 <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 8007c5a:	2701      	movs	r7, #1
 8007c5c:	e7be      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c64:	d017      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	f012 0f10 	tst.w	r2, #16
 8007c6e:	d045      	beq.n	8007cfc <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007c70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007c72:	f042 0202 	orr.w	r2, r2, #2
 8007c76:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007c78:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007c7c:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8007c7e:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c80:	4632      	mov	r2, r6
 8007c82:	4629      	mov	r1, r5
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff fc79 	bl	800757c <SPI_EndRxTxTransaction>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d039      	beq.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c8e:	2320      	movs	r3, #32
 8007c90:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c92:	2701      	movs	r7, #1
 8007c94:	e035      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007c96:	9600      	str	r6, [sp, #0]
 8007c98:	462b      	mov	r3, r5
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff fb90 	bl	80073c4 <SPI_WaitFlagStateUntilTimeout>
 8007ca4:	b9c8      	cbnz	r0, 8007cda <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007cac:	d01b      	beq.n	8007ce6 <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	7b1b      	ldrb	r3, [r3, #12]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8007cb6:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d1d3      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007cbe:	9600      	str	r6, [sp, #0]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff fb7c 	bl	80073c4 <SPI_WaitFlagStateUntilTimeout>
 8007ccc:	b980      	cbnz	r0, 8007cf0 <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	7b1b      	ldrb	r3, [r3, #12]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	e7c5      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007cda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007ce2:	2703      	movs	r7, #3
      goto error;
 8007ce4:	e00d      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	e7ba      	b.n	8007c66 <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007cf0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007cf2:	f043 0302 	orr.w	r3, r3, #2
 8007cf6:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8007cf8:	2703      	movs	r7, #3
          goto error;
 8007cfa:	e002      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	e7bf      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 8007d00:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007d0e:	4638      	mov	r0, r7
 8007d10:	b005      	add	sp, #20
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8007d16:	2702      	movs	r7, #2
 8007d18:	e7f3      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
 8007d1a:	2702      	movs	r7, #2
 8007d1c:	e7f1      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 8007d1e:	2701      	movs	r7, #1
 8007d20:	e7ef      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
 8007d22:	2701      	movs	r7, #1
 8007d24:	e7ed      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
 8007d26:	2701      	movs	r7, #1
 8007d28:	e7eb      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8007d2a:	2703      	movs	r7, #3
 8007d2c:	e7e9      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8007d2e:	2703      	movs	r7, #3
 8007d30:	e7e7      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
 8007d32:	2703      	movs	r7, #3
 8007d34:	e7e5      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 8007d36:	2702      	movs	r7, #2
 8007d38:	e7e9      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x3de>

08007d3a <HAL_SPI_GetState>:
  return hspi->State;
 8007d3a:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8007d3e:	4770      	bx	lr

08007d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d42:	6a03      	ldr	r3, [r0, #32]
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d54:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d58:	680c      	ldr	r4, [r1, #0]
 8007d5a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d5c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d60:	688c      	ldr	r4, [r1, #8]
 8007d62:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d64:	4c1d      	ldr	r4, [pc, #116]	; (8007ddc <TIM_OC1_SetConfig+0x9c>)
 8007d66:	42a0      	cmp	r0, r4
 8007d68:	d00f      	beq.n	8007d8a <TIM_OC1_SetConfig+0x4a>
 8007d6a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d6e:	42a0      	cmp	r0, r4
 8007d70:	d00b      	beq.n	8007d8a <TIM_OC1_SetConfig+0x4a>
 8007d72:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007d76:	42a0      	cmp	r0, r4
 8007d78:	d007      	beq.n	8007d8a <TIM_OC1_SetConfig+0x4a>
 8007d7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d7e:	42a0      	cmp	r0, r4
 8007d80:	d003      	beq.n	8007d8a <TIM_OC1_SetConfig+0x4a>
 8007d82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d86:	42a0      	cmp	r0, r4
 8007d88:	d105      	bne.n	8007d96 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d8a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d8e:	68cc      	ldr	r4, [r1, #12]
 8007d90:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d92:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d96:	4c11      	ldr	r4, [pc, #68]	; (8007ddc <TIM_OC1_SetConfig+0x9c>)
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d00f      	beq.n	8007dbc <TIM_OC1_SetConfig+0x7c>
 8007d9c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d00b      	beq.n	8007dbc <TIM_OC1_SetConfig+0x7c>
 8007da4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d007      	beq.n	8007dbc <TIM_OC1_SetConfig+0x7c>
 8007dac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d003      	beq.n	8007dbc <TIM_OC1_SetConfig+0x7c>
 8007db4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d107      	bne.n	8007dcc <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dbc:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dc0:	694c      	ldr	r4, [r1, #20]
 8007dc2:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dc6:	698d      	ldr	r5, [r1, #24]
 8007dc8:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dcc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dce:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dd0:	684a      	ldr	r2, [r1, #4]
 8007dd2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd4:	6203      	str	r3, [r0, #32]
}
 8007dd6:	bc30      	pop	{r4, r5}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40012c00 	.word	0x40012c00

08007de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007de2:	6a03      	ldr	r3, [r0, #32]
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007df0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007df4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df8:	680d      	ldr	r5, [r1, #0]
 8007dfa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e00:	688d      	ldr	r5, [r1, #8]
 8007e02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e06:	4d18      	ldr	r5, [pc, #96]	; (8007e68 <TIM_OC3_SetConfig+0x88>)
 8007e08:	42a8      	cmp	r0, r5
 8007e0a:	d003      	beq.n	8007e14 <TIM_OC3_SetConfig+0x34>
 8007e0c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007e10:	42a8      	cmp	r0, r5
 8007e12:	d106      	bne.n	8007e22 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e18:	68cd      	ldr	r5, [r1, #12]
 8007e1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e22:	4d11      	ldr	r5, [pc, #68]	; (8007e68 <TIM_OC3_SetConfig+0x88>)
 8007e24:	42a8      	cmp	r0, r5
 8007e26:	d00f      	beq.n	8007e48 <TIM_OC3_SetConfig+0x68>
 8007e28:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007e2c:	42a8      	cmp	r0, r5
 8007e2e:	d00b      	beq.n	8007e48 <TIM_OC3_SetConfig+0x68>
 8007e30:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007e34:	42a8      	cmp	r0, r5
 8007e36:	d007      	beq.n	8007e48 <TIM_OC3_SetConfig+0x68>
 8007e38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e3c:	42a8      	cmp	r0, r5
 8007e3e:	d003      	beq.n	8007e48 <TIM_OC3_SetConfig+0x68>
 8007e40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e44:	42a8      	cmp	r0, r5
 8007e46:	d107      	bne.n	8007e58 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e48:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e4c:	694c      	ldr	r4, [r1, #20]
 8007e4e:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e52:	698c      	ldr	r4, [r1, #24]
 8007e54:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e5c:	684a      	ldr	r2, [r1, #4]
 8007e5e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	6203      	str	r3, [r0, #32]
}
 8007e62:	bc30      	pop	{r4, r5}
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40012c00 	.word	0x40012c00

08007e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e6e:	6a03      	ldr	r3, [r0, #32]
 8007e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e80:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e84:	680d      	ldr	r5, [r1, #0]
 8007e86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e8e:	688d      	ldr	r5, [r1, #8]
 8007e90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e94:	4d0f      	ldr	r5, [pc, #60]	; (8007ed4 <TIM_OC4_SetConfig+0x68>)
 8007e96:	42a8      	cmp	r0, r5
 8007e98:	d00f      	beq.n	8007eba <TIM_OC4_SetConfig+0x4e>
 8007e9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007e9e:	42a8      	cmp	r0, r5
 8007ea0:	d00b      	beq.n	8007eba <TIM_OC4_SetConfig+0x4e>
 8007ea2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007ea6:	42a8      	cmp	r0, r5
 8007ea8:	d007      	beq.n	8007eba <TIM_OC4_SetConfig+0x4e>
 8007eaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007eae:	42a8      	cmp	r0, r5
 8007eb0:	d003      	beq.n	8007eba <TIM_OC4_SetConfig+0x4e>
 8007eb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007eb6:	42a8      	cmp	r0, r5
 8007eb8:	d104      	bne.n	8007ec4 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eba:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ebe:	694d      	ldr	r5, [r1, #20]
 8007ec0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ec8:	684a      	ldr	r2, [r1, #4]
 8007eca:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ecc:	6203      	str	r3, [r0, #32]
}
 8007ece:	bc30      	pop	{r4, r5}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	40012c00 	.word	0x40012c00

08007ed8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007eda:	6a03      	ldr	r3, [r0, #32]
 8007edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ee6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ee8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007eec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef0:	680d      	ldr	r5, [r1, #0]
 8007ef2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ef8:	688d      	ldr	r5, [r1, #8]
 8007efa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efe:	4d0f      	ldr	r5, [pc, #60]	; (8007f3c <TIM_OC5_SetConfig+0x64>)
 8007f00:	42a8      	cmp	r0, r5
 8007f02:	d00f      	beq.n	8007f24 <TIM_OC5_SetConfig+0x4c>
 8007f04:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007f08:	42a8      	cmp	r0, r5
 8007f0a:	d00b      	beq.n	8007f24 <TIM_OC5_SetConfig+0x4c>
 8007f0c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007f10:	42a8      	cmp	r0, r5
 8007f12:	d007      	beq.n	8007f24 <TIM_OC5_SetConfig+0x4c>
 8007f14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f18:	42a8      	cmp	r0, r5
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC5_SetConfig+0x4c>
 8007f1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f20:	42a8      	cmp	r0, r5
 8007f22:	d104      	bne.n	8007f2e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f24:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f28:	694d      	ldr	r5, [r1, #20]
 8007f2a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f30:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f32:	684a      	ldr	r2, [r1, #4]
 8007f34:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f36:	6203      	str	r3, [r0, #32]
}
 8007f38:	bc30      	pop	{r4, r5}
 8007f3a:	4770      	bx	lr
 8007f3c:	40012c00 	.word	0x40012c00

08007f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f42:	6a03      	ldr	r3, [r0, #32]
 8007f44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f4e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007f54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f58:	680d      	ldr	r5, [r1, #0]
 8007f5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f62:	688d      	ldr	r5, [r1, #8]
 8007f64:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f68:	4d0f      	ldr	r5, [pc, #60]	; (8007fa8 <TIM_OC6_SetConfig+0x68>)
 8007f6a:	42a8      	cmp	r0, r5
 8007f6c:	d00f      	beq.n	8007f8e <TIM_OC6_SetConfig+0x4e>
 8007f6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007f72:	42a8      	cmp	r0, r5
 8007f74:	d00b      	beq.n	8007f8e <TIM_OC6_SetConfig+0x4e>
 8007f76:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007f7a:	42a8      	cmp	r0, r5
 8007f7c:	d007      	beq.n	8007f8e <TIM_OC6_SetConfig+0x4e>
 8007f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f82:	42a8      	cmp	r0, r5
 8007f84:	d003      	beq.n	8007f8e <TIM_OC6_SetConfig+0x4e>
 8007f86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007f8a:	42a8      	cmp	r0, r5
 8007f8c:	d104      	bne.n	8007f98 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f8e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f92:	694d      	ldr	r5, [r1, #20]
 8007f94:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f9c:	684a      	ldr	r2, [r1, #4]
 8007f9e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa0:	6203      	str	r3, [r0, #32]
}
 8007fa2:	bc30      	pop	{r4, r5}
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40012c00 	.word	0x40012c00

08007fac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d136      	bne.n	8008024 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fbc:	6802      	ldr	r2, [r0, #0]
 8007fbe:	68d3      	ldr	r3, [r2, #12]
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc6:	6803      	ldr	r3, [r0, #0]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	; (8008030 <HAL_TIM_Base_Start_IT+0x84>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d01c      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd2:	d019      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007fd4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d015      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007fdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d011      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00d      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007fec:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
 8007ff4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d005      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008004:	2000      	movs	r0, #0
 8008006:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	6899      	ldr	r1, [r3, #8]
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <HAL_TIM_Base_Start_IT+0x88>)
 800800c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800e:	2a06      	cmp	r2, #6
 8008010:	d00a      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0x7c>
 8008012:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008016:	d009      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008020:	2000      	movs	r0, #0
 8008022:	4770      	bx	lr
    return HAL_ERROR;
 8008024:	2001      	movs	r0, #1
 8008026:	4770      	bx	lr
  return HAL_OK;
 8008028:	2000      	movs	r0, #0
 800802a:	4770      	bx	lr
 800802c:	2000      	movs	r0, #0
}
 800802e:	4770      	bx	lr
 8008030:	40012c00 	.word	0x40012c00
 8008034:	00010007 	.word	0x00010007

08008038 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8008038:	290c      	cmp	r1, #12
 800803a:	d814      	bhi.n	8008066 <HAL_TIM_ReadCapturedValue+0x2e>
 800803c:	e8df f001 	tbb	[pc, r1]
 8008040:	13131307 	.word	0x13131307
 8008044:	1313130a 	.word	0x1313130a
 8008048:	1313130d 	.word	0x1313130d
 800804c:	10          	.byte	0x10
 800804d:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800804e:	6803      	ldr	r3, [r0, #0]
 8008050:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8008052:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8008054:	6803      	ldr	r3, [r0, #0]
 8008056:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8008058:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800805a:	6803      	ldr	r3, [r0, #0]
 800805c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 800805e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8008060:	6803      	ldr	r3, [r0, #0]
 8008062:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8008064:	4770      	bx	lr
  switch (Channel)
 8008066:	2000      	movs	r0, #0
}
 8008068:	4770      	bx	lr

0800806a <HAL_TIM_IC_CaptureCallback>:
}
 800806a:	4770      	bx	lr

0800806c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800806c:	4770      	bx	lr

0800806e <HAL_TIM_TriggerCallback>:
}
 800806e:	4770      	bx	lr

08008070 <HAL_TIM_IRQHandler>:
{
 8008070:	b510      	push	{r4, lr}
 8008072:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008074:	6803      	ldr	r3, [r0, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	f012 0f02 	tst.w	r2, #2
 800807c:	d011      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	f012 0f02 	tst.w	r2, #2
 8008084:	d00d      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008086:	f06f 0202 	mvn.w	r2, #2
 800808a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800808c:	2301      	movs	r3, #1
 800808e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008090:	6803      	ldr	r3, [r0, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	f013 0f03 	tst.w	r3, #3
 8008098:	d079      	beq.n	800818e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800809a:	f7ff ffe6 	bl	800806a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809e:	2300      	movs	r3, #0
 80080a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	f012 0f04 	tst.w	r2, #4
 80080aa:	d012      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	f012 0f04 	tst.w	r2, #4
 80080b2:	d00e      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080b4:	f06f 0204 	mvn.w	r2, #4
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ba:	2302      	movs	r3, #2
 80080bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80080c6:	d068      	beq.n	800819a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff ffce 	bl	800806a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	2300      	movs	r3, #0
 80080d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	f012 0f08 	tst.w	r2, #8
 80080da:	d012      	beq.n	8008102 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	f012 0f08 	tst.w	r2, #8
 80080e2:	d00e      	beq.n	8008102 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080e4:	f06f 0208 	mvn.w	r2, #8
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ea:	2304      	movs	r3, #4
 80080ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f013 0f03 	tst.w	r3, #3
 80080f6:	d057      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7ff ffb6 	bl	800806a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	2300      	movs	r3, #0
 8008100:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	f012 0f10 	tst.w	r2, #16
 800810a:	d012      	beq.n	8008132 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	f012 0f10 	tst.w	r2, #16
 8008112:	d00e      	beq.n	8008132 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008114:	f06f 0210 	mvn.w	r2, #16
 8008118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811a:	2308      	movs	r3, #8
 800811c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008126:	d046      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff ff9e 	bl	800806a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	2300      	movs	r3, #0
 8008130:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	f012 0f01 	tst.w	r2, #1
 800813a:	d003      	beq.n	8008144 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	f012 0f01 	tst.w	r2, #1
 8008142:	d13f      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	f012 0f80 	tst.w	r2, #128	; 0x80
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008154:	d13d      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800815e:	d003      	beq.n	8008168 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008166:	d13b      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008178:	d139      	bne.n	80081ee <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	f012 0f20 	tst.w	r2, #32
 8008182:	d003      	beq.n	800818c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	f012 0f20 	tst.w	r2, #32
 800818a:	d137      	bne.n	80081fc <HAL_TIM_IRQHandler+0x18c>
}
 800818c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	f7fd f80b 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff ff6a 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
 8008198:	e781      	b.n	800809e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	4620      	mov	r0, r4
 800819c:	f7fd f804 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff ff63 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
 80081a6:	e792      	b.n	80080ce <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7fc fffd 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ae:	4620      	mov	r0, r4
 80081b0:	f7ff ff5c 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
 80081b4:	e7a3      	b.n	80080fe <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fc fff6 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff ff55 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
 80081c2:	e7b4      	b.n	800812e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081c4:	f06f 0201 	mvn.w	r2, #1
 80081c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7fd f804 	bl	80051d8 <HAL_TIM_PeriodElapsedCallback>
 80081d0:	e7b8      	b.n	8008144 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fab8 	bl	800874e <HAL_TIMEx_BreakCallback>
 80081de:	e7ba      	b.n	8008156 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 fab2 	bl	8008750 <HAL_TIMEx_Break2Callback>
 80081ec:	e7bc      	b.n	8008168 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7ff ff3a 	bl	800806e <HAL_TIM_TriggerCallback>
 80081fa:	e7be      	b.n	800817a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081fc:	f06f 0220 	mvn.w	r2, #32
 8008200:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008202:	4620      	mov	r0, r4
 8008204:	f000 faa2 	bl	800874c <HAL_TIMEx_CommutCallback>
}
 8008208:	e7c0      	b.n	800818c <HAL_TIM_IRQHandler+0x11c>
	...

0800820c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800820c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800820e:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <TIM_Base_SetConfig+0xc4>)
 8008210:	4290      	cmp	r0, r2
 8008212:	d012      	beq.n	800823a <TIM_Base_SetConfig+0x2e>
 8008214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008218:	d00f      	beq.n	800823a <TIM_Base_SetConfig+0x2e>
 800821a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800821e:	4290      	cmp	r0, r2
 8008220:	d00b      	beq.n	800823a <TIM_Base_SetConfig+0x2e>
 8008222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008226:	4290      	cmp	r0, r2
 8008228:	d007      	beq.n	800823a <TIM_Base_SetConfig+0x2e>
 800822a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800822e:	4290      	cmp	r0, r2
 8008230:	d003      	beq.n	800823a <TIM_Base_SetConfig+0x2e>
 8008232:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008236:	4290      	cmp	r0, r2
 8008238:	d103      	bne.n	8008242 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800823e:	684a      	ldr	r2, [r1, #4]
 8008240:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008242:	4a23      	ldr	r2, [pc, #140]	; (80082d0 <TIM_Base_SetConfig+0xc4>)
 8008244:	4290      	cmp	r0, r2
 8008246:	d01e      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 8008248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800824c:	d01b      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 800824e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008252:	4290      	cmp	r0, r2
 8008254:	d017      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 8008256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800825a:	4290      	cmp	r0, r2
 800825c:	d013      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 800825e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008262:	4290      	cmp	r0, r2
 8008264:	d00f      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 8008266:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800826a:	4290      	cmp	r0, r2
 800826c:	d00b      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 800826e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008272:	4290      	cmp	r0, r2
 8008274:	d007      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 8008276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800827a:	4290      	cmp	r0, r2
 800827c:	d003      	beq.n	8008286 <TIM_Base_SetConfig+0x7a>
 800827e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008282:	4290      	cmp	r0, r2
 8008284:	d103      	bne.n	800828e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	68ca      	ldr	r2, [r1, #12]
 800828c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800828e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008292:	694a      	ldr	r2, [r1, #20]
 8008294:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008296:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008298:	688b      	ldr	r3, [r1, #8]
 800829a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800829c:	680b      	ldr	r3, [r1, #0]
 800829e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <TIM_Base_SetConfig+0xc4>)
 80082a2:	4298      	cmp	r0, r3
 80082a4:	d00f      	beq.n	80082c6 <TIM_Base_SetConfig+0xba>
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	4298      	cmp	r0, r3
 80082ac:	d00b      	beq.n	80082c6 <TIM_Base_SetConfig+0xba>
 80082ae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80082b2:	4298      	cmp	r0, r3
 80082b4:	d007      	beq.n	80082c6 <TIM_Base_SetConfig+0xba>
 80082b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ba:	4298      	cmp	r0, r3
 80082bc:	d003      	beq.n	80082c6 <TIM_Base_SetConfig+0xba>
 80082be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082c2:	4298      	cmp	r0, r3
 80082c4:	d101      	bne.n	80082ca <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80082ca:	2301      	movs	r3, #1
 80082cc:	6143      	str	r3, [r0, #20]
}
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00

080082d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80082d4:	b360      	cbz	r0, 8008330 <HAL_TIM_Base_Init+0x5c>
{
 80082d6:	b510      	push	{r4, lr}
 80082d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082de:	b313      	cbz	r3, 8008326 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80082e0:	2302      	movs	r3, #2
 80082e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e6:	4621      	mov	r1, r4
 80082e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80082ec:	f7ff ff8e 	bl	800820c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80082fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80082fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008302:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800830a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008316:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800831a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800831e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008322:	2000      	movs	r0, #0
}
 8008324:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008326:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800832a:	f7fd faad 	bl	8005888 <HAL_TIM_Base_MspInit>
 800832e:	e7d7      	b.n	80082e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008330:	2001      	movs	r0, #1
}
 8008332:	4770      	bx	lr

08008334 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8008334:	b360      	cbz	r0, 8008390 <HAL_TIM_OC_Init+0x5c>
{
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800833a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800833e:	b313      	cbz	r3, 8008386 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	2302      	movs	r3, #2
 8008342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008346:	4621      	mov	r1, r4
 8008348:	f851 0b04 	ldr.w	r0, [r1], #4
 800834c:	f7ff ff5e 	bl	800820c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	2301      	movs	r3, #1
 8008352:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008356:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800835a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800835e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008362:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008376:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800837a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800837e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008382:	2000      	movs	r0, #0
}
 8008384:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008386:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800838a:	f7fd fab5 	bl	80058f8 <HAL_TIM_OC_MspInit>
 800838e:	e7d7      	b.n	8008340 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8008390:	2001      	movs	r0, #1
}
 8008392:	4770      	bx	lr

08008394 <TIM_OC2_SetConfig>:
{
 8008394:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008396:	6a03      	ldr	r3, [r0, #32]
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800839e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80083a0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80083a2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80083a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ac:	680d      	ldr	r5, [r1, #0]
 80083ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80083b2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b6:	688d      	ldr	r5, [r1, #8]
 80083b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083bc:	4d17      	ldr	r5, [pc, #92]	; (800841c <TIM_OC2_SetConfig+0x88>)
 80083be:	42a8      	cmp	r0, r5
 80083c0:	d003      	beq.n	80083ca <TIM_OC2_SetConfig+0x36>
 80083c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083c6:	42a8      	cmp	r0, r5
 80083c8:	d106      	bne.n	80083d8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ce:	68cd      	ldr	r5, [r1, #12]
 80083d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80083d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d8:	4d10      	ldr	r5, [pc, #64]	; (800841c <TIM_OC2_SetConfig+0x88>)
 80083da:	42a8      	cmp	r0, r5
 80083dc:	d00f      	beq.n	80083fe <TIM_OC2_SetConfig+0x6a>
 80083de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083e2:	42a8      	cmp	r0, r5
 80083e4:	d00b      	beq.n	80083fe <TIM_OC2_SetConfig+0x6a>
 80083e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80083ea:	42a8      	cmp	r0, r5
 80083ec:	d007      	beq.n	80083fe <TIM_OC2_SetConfig+0x6a>
 80083ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80083f2:	42a8      	cmp	r0, r5
 80083f4:	d003      	beq.n	80083fe <TIM_OC2_SetConfig+0x6a>
 80083f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80083fa:	42a8      	cmp	r0, r5
 80083fc:	d107      	bne.n	800840e <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083fe:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008402:	694c      	ldr	r4, [r1, #20]
 8008404:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008408:	698c      	ldr	r4, [r1, #24]
 800840a:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800840e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008410:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008412:	684a      	ldr	r2, [r1, #4]
 8008414:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008416:	6203      	str	r3, [r0, #32]
}
 8008418:	bc30      	pop	{r4, r5}
 800841a:	4770      	bx	lr
 800841c:	40012c00 	.word	0x40012c00

08008420 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8008420:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d02e      	beq.n	8008486 <HAL_TIM_OC_ConfigChannel+0x66>
{
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800842c:	2301      	movs	r3, #1
 800842e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008432:	2a14      	cmp	r2, #20
 8008434:	d80f      	bhi.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
 8008436:	e8df f002 	tbb	[pc, r2]
 800843a:	0e0b      	.short	0x0e0b
 800843c:	0e120e0e 	.word	0x0e120e0e
 8008440:	0e160e0e 	.word	0x0e160e0e
 8008444:	0e1a0e0e 	.word	0x0e1a0e0e
 8008448:	0e1e0e0e 	.word	0x0e1e0e0e
 800844c:	0e0e      	.short	0x0e0e
 800844e:	22          	.byte	0x22
 800844f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008450:	6800      	ldr	r0, [r0, #0]
 8008452:	f7ff fc75 	bl	8007d40 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8008456:	2000      	movs	r0, #0
 8008458:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800845c:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800845e:	6800      	ldr	r0, [r0, #0]
 8008460:	f7ff ff98 	bl	8008394 <TIM_OC2_SetConfig>
      break;
 8008464:	e7f7      	b.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008466:	6800      	ldr	r0, [r0, #0]
 8008468:	f7ff fcba 	bl	8007de0 <TIM_OC3_SetConfig>
      break;
 800846c:	e7f3      	b.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	f7ff fcfc 	bl	8007e6c <TIM_OC4_SetConfig>
      break;
 8008474:	e7ef      	b.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008476:	6800      	ldr	r0, [r0, #0]
 8008478:	f7ff fd2e 	bl	8007ed8 <TIM_OC5_SetConfig>
      break;
 800847c:	e7eb      	b.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800847e:	6800      	ldr	r0, [r0, #0]
 8008480:	f7ff fd5e 	bl	8007f40 <TIM_OC6_SetConfig>
      break;
 8008484:	e7e7      	b.n	8008456 <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8008486:	2002      	movs	r0, #2
}
 8008488:	4770      	bx	lr

0800848a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800848a:	f001 011f 	and.w	r1, r1, #31
 800848e:	2301      	movs	r3, #1
 8008490:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008494:	6a03      	ldr	r3, [r0, #32]
 8008496:	ea23 030c 	bic.w	r3, r3, ip
 800849a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800849c:	6a03      	ldr	r3, [r0, #32]
 800849e:	fa02 f101 	lsl.w	r1, r2, r1
 80084a2:	430b      	orrs	r3, r1
 80084a4:	6203      	str	r3, [r0, #32]
}
 80084a6:	4770      	bx	lr

080084a8 <HAL_TIM_OC_Start_IT>:
{
 80084a8:	b510      	push	{r4, lr}
 80084aa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084ac:	4608      	mov	r0, r1
 80084ae:	b9c1      	cbnz	r1, 80084e2 <HAL_TIM_OC_Start_IT+0x3a>
 80084b0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	bf18      	it	ne
 80084ba:	2301      	movne	r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 80ba 	bne.w	8008636 <HAL_TIM_OC_Start_IT+0x18e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d138      	bne.n	8008538 <HAL_TIM_OC_Start_IT+0x90>
 80084c6:	2302      	movs	r3, #2
 80084c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 80084cc:	280c      	cmp	r0, #12
 80084ce:	d854      	bhi.n	800857a <HAL_TIM_OC_Start_IT+0xd2>
 80084d0:	e8df f000 	tbb	[pc, r0]
 80084d4:	5353534e 	.word	0x5353534e
 80084d8:	53535391 	.word	0x53535391
 80084dc:	53535397 	.word	0x53535397
 80084e0:	9d          	.byte	0x9d
 80084e1:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084e2:	2904      	cmp	r1, #4
 80084e4:	d00c      	beq.n	8008500 <HAL_TIM_OC_Start_IT+0x58>
 80084e6:	2908      	cmp	r1, #8
 80084e8:	d011      	beq.n	800850e <HAL_TIM_OC_Start_IT+0x66>
 80084ea:	290c      	cmp	r1, #12
 80084ec:	d016      	beq.n	800851c <HAL_TIM_OC_Start_IT+0x74>
 80084ee:	2910      	cmp	r1, #16
 80084f0:	d01b      	beq.n	800852a <HAL_TIM_OC_Start_IT+0x82>
 80084f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	bf18      	it	ne
 80084fc:	2301      	movne	r3, #1
 80084fe:	e7dd      	b.n	80084bc <HAL_TIM_OC_Start_IT+0x14>
 8008500:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8008504:	b2db      	uxtb	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	e7d6      	b.n	80084bc <HAL_TIM_OC_Start_IT+0x14>
 800850e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008512:	b2db      	uxtb	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	bf18      	it	ne
 8008518:	2301      	movne	r3, #1
 800851a:	e7cf      	b.n	80084bc <HAL_TIM_OC_Start_IT+0x14>
 800851c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008520:	b2db      	uxtb	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	bf18      	it	ne
 8008526:	2301      	movne	r3, #1
 8008528:	e7c8      	b.n	80084bc <HAL_TIM_OC_Start_IT+0x14>
 800852a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800852e:	b2db      	uxtb	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	bf18      	it	ne
 8008534:	2301      	movne	r3, #1
 8008536:	e7c1      	b.n	80084bc <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008538:	2804      	cmp	r0, #4
 800853a:	d009      	beq.n	8008550 <HAL_TIM_OC_Start_IT+0xa8>
 800853c:	2808      	cmp	r0, #8
 800853e:	d00b      	beq.n	8008558 <HAL_TIM_OC_Start_IT+0xb0>
 8008540:	280c      	cmp	r0, #12
 8008542:	d00d      	beq.n	8008560 <HAL_TIM_OC_Start_IT+0xb8>
 8008544:	2810      	cmp	r0, #16
 8008546:	d00f      	beq.n	8008568 <HAL_TIM_OC_Start_IT+0xc0>
 8008548:	2302      	movs	r3, #2
 800854a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854e:	e7bd      	b.n	80084cc <HAL_TIM_OC_Start_IT+0x24>
 8008550:	2302      	movs	r3, #2
 8008552:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008556:	e7b9      	b.n	80084cc <HAL_TIM_OC_Start_IT+0x24>
 8008558:	2302      	movs	r3, #2
 800855a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800855e:	e7b5      	b.n	80084cc <HAL_TIM_OC_Start_IT+0x24>
 8008560:	2302      	movs	r3, #2
 8008562:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008566:	e7b1      	b.n	80084cc <HAL_TIM_OC_Start_IT+0x24>
 8008568:	2302      	movs	r3, #2
 800856a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800856e:	e7ad      	b.n	80084cc <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008570:	6822      	ldr	r2, [r4, #0]
 8008572:	68d3      	ldr	r3, [r2, #12]
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800857a:	2201      	movs	r2, #1
 800857c:	4601      	mov	r1, r0
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	f7ff ff83 	bl	800848a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4a2f      	ldr	r2, [pc, #188]	; (8008644 <HAL_TIM_OC_Start_IT+0x19c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00f      	beq.n	80085ac <HAL_TIM_OC_Start_IT+0x104>
 800858c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008590:	4293      	cmp	r3, r2
 8008592:	d00b      	beq.n	80085ac <HAL_TIM_OC_Start_IT+0x104>
 8008594:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008598:	4293      	cmp	r3, r2
 800859a:	d007      	beq.n	80085ac <HAL_TIM_OC_Start_IT+0x104>
 800859c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d003      	beq.n	80085ac <HAL_TIM_OC_Start_IT+0x104>
 80085a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d103      	bne.n	80085b4 <HAL_TIM_OC_Start_IT+0x10c>
    __HAL_TIM_MOE_ENABLE(htim);
 80085ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085b2:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	4a23      	ldr	r2, [pc, #140]	; (8008644 <HAL_TIM_OC_Start_IT+0x19c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d02e      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c0:	d02b      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d027      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d023      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01f      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085da:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01b      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
 80085e2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <HAL_TIM_OC_Start_IT+0x172>
    __HAL_TIM_ENABLE(htim);
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80085f2:	2000      	movs	r0, #0
 80085f4:	e020      	b.n	8008638 <HAL_TIM_OC_Start_IT+0x190>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	68d3      	ldr	r3, [r2, #12]
 80085fa:	f043 0304 	orr.w	r3, r3, #4
 80085fe:	60d3      	str	r3, [r2, #12]
      break;
 8008600:	e7bb      	b.n	800857a <HAL_TIM_OC_Start_IT+0xd2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	68d3      	ldr	r3, [r2, #12]
 8008606:	f043 0308 	orr.w	r3, r3, #8
 800860a:	60d3      	str	r3, [r2, #12]
      break;
 800860c:	e7b5      	b.n	800857a <HAL_TIM_OC_Start_IT+0xd2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	68d3      	ldr	r3, [r2, #12]
 8008612:	f043 0310 	orr.w	r3, r3, #16
 8008616:	60d3      	str	r3, [r2, #12]
      break;
 8008618:	e7af      	b.n	800857a <HAL_TIM_OC_Start_IT+0xd2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800861a:	6899      	ldr	r1, [r3, #8]
 800861c:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <HAL_TIM_OC_Start_IT+0x1a0>)
 800861e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008620:	2a06      	cmp	r2, #6
 8008622:	d00a      	beq.n	800863a <HAL_TIM_OC_Start_IT+0x192>
 8008624:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008628:	d009      	beq.n	800863e <HAL_TIM_OC_Start_IT+0x196>
      __HAL_TIM_ENABLE(htim);
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	f042 0201 	orr.w	r2, r2, #1
 8008630:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008632:	2000      	movs	r0, #0
 8008634:	e000      	b.n	8008638 <HAL_TIM_OC_Start_IT+0x190>
    return HAL_ERROR;
 8008636:	2001      	movs	r0, #1
}
 8008638:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800863a:	2000      	movs	r0, #0
 800863c:	e7fc      	b.n	8008638 <HAL_TIM_OC_Start_IT+0x190>
 800863e:	2000      	movs	r0, #0
 8008640:	e7fa      	b.n	8008638 <HAL_TIM_OC_Start_IT+0x190>
 8008642:	bf00      	nop
 8008644:	40012c00 	.word	0x40012c00
 8008648:	00010007 	.word	0x00010007

0800864c <HAL_TIM_OC_Stop_IT>:
{
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4605      	mov	r5, r0
 8008650:	460c      	mov	r4, r1
  switch (Channel)
 8008652:	290c      	cmp	r1, #12
 8008654:	d80d      	bhi.n	8008672 <HAL_TIM_OC_Stop_IT+0x26>
 8008656:	e8df f001 	tbb	[pc, r1]
 800865a:	0c07      	.short	0x0c07
 800865c:	0c480c0c 	.word	0x0c480c0c
 8008660:	0c4e0c0c 	.word	0x0c4e0c0c
 8008664:	0c0c      	.short	0x0c0c
 8008666:	54          	.byte	0x54
 8008667:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008668:	6802      	ldr	r2, [r0, #0]
 800866a:	68d3      	ldr	r3, [r2, #12]
 800866c:	f023 0302 	bic.w	r3, r3, #2
 8008670:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008672:	2200      	movs	r2, #0
 8008674:	4621      	mov	r1, r4
 8008676:	6828      	ldr	r0, [r5, #0]
 8008678:	f7ff ff07 	bl	800848a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	4a32      	ldr	r2, [pc, #200]	; (8008748 <HAL_TIM_OC_Stop_IT+0xfc>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00f      	beq.n	80086a4 <HAL_TIM_OC_Stop_IT+0x58>
 8008684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008688:	4293      	cmp	r3, r2
 800868a:	d00b      	beq.n	80086a4 <HAL_TIM_OC_Stop_IT+0x58>
 800868c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008690:	4293      	cmp	r3, r2
 8008692:	d007      	beq.n	80086a4 <HAL_TIM_OC_Stop_IT+0x58>
 8008694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008698:	4293      	cmp	r3, r2
 800869a:	d003      	beq.n	80086a4 <HAL_TIM_OC_Stop_IT+0x58>
 800869c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d10d      	bne.n	80086c0 <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 80086a4:	6a19      	ldr	r1, [r3, #32]
 80086a6:	f241 1211 	movw	r2, #4369	; 0x1111
 80086aa:	4211      	tst	r1, r2
 80086ac:	d108      	bne.n	80086c0 <HAL_TIM_OC_Stop_IT+0x74>
 80086ae:	6a19      	ldr	r1, [r3, #32]
 80086b0:	f240 4244 	movw	r2, #1092	; 0x444
 80086b4:	4211      	tst	r1, r2
 80086b6:	d103      	bne.n	80086c0 <HAL_TIM_OC_Stop_IT+0x74>
 80086b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086be:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6a19      	ldr	r1, [r3, #32]
 80086c4:	f241 1211 	movw	r2, #4369	; 0x1111
 80086c8:	4211      	tst	r1, r2
 80086ca:	d108      	bne.n	80086de <HAL_TIM_OC_Stop_IT+0x92>
 80086cc:	6a19      	ldr	r1, [r3, #32]
 80086ce:	f240 4244 	movw	r2, #1092	; 0x444
 80086d2:	4211      	tst	r1, r2
 80086d4:	d103      	bne.n	80086de <HAL_TIM_OC_Stop_IT+0x92>
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80086de:	b9b4      	cbnz	r4, 800870e <HAL_TIM_OC_Stop_IT+0xc2>
 80086e0:	2301      	movs	r3, #1
 80086e2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 80086e6:	2000      	movs	r0, #0
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80086ea:	6802      	ldr	r2, [r0, #0]
 80086ec:	68d3      	ldr	r3, [r2, #12]
 80086ee:	f023 0304 	bic.w	r3, r3, #4
 80086f2:	60d3      	str	r3, [r2, #12]
      break;
 80086f4:	e7bd      	b.n	8008672 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80086f6:	6802      	ldr	r2, [r0, #0]
 80086f8:	68d3      	ldr	r3, [r2, #12]
 80086fa:	f023 0308 	bic.w	r3, r3, #8
 80086fe:	60d3      	str	r3, [r2, #12]
      break;
 8008700:	e7b7      	b.n	8008672 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008702:	6802      	ldr	r2, [r0, #0]
 8008704:	68d3      	ldr	r3, [r2, #12]
 8008706:	f023 0310 	bic.w	r3, r3, #16
 800870a:	60d3      	str	r3, [r2, #12]
      break;
 800870c:	e7b1      	b.n	8008672 <HAL_TIM_OC_Stop_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800870e:	2c04      	cmp	r4, #4
 8008710:	d009      	beq.n	8008726 <HAL_TIM_OC_Stop_IT+0xda>
 8008712:	2c08      	cmp	r4, #8
 8008714:	d00b      	beq.n	800872e <HAL_TIM_OC_Stop_IT+0xe2>
 8008716:	2c0c      	cmp	r4, #12
 8008718:	d00d      	beq.n	8008736 <HAL_TIM_OC_Stop_IT+0xea>
 800871a:	2c10      	cmp	r4, #16
 800871c:	d00f      	beq.n	800873e <HAL_TIM_OC_Stop_IT+0xf2>
 800871e:	2301      	movs	r3, #1
 8008720:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 8008724:	e7df      	b.n	80086e6 <HAL_TIM_OC_Stop_IT+0x9a>
 8008726:	2301      	movs	r3, #1
 8008728:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800872c:	e7db      	b.n	80086e6 <HAL_TIM_OC_Stop_IT+0x9a>
 800872e:	2301      	movs	r3, #1
 8008730:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8008734:	e7d7      	b.n	80086e6 <HAL_TIM_OC_Stop_IT+0x9a>
 8008736:	2301      	movs	r3, #1
 8008738:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800873c:	e7d3      	b.n	80086e6 <HAL_TIM_OC_Stop_IT+0x9a>
 800873e:	2301      	movs	r3, #1
 8008740:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8008744:	e7cf      	b.n	80086e6 <HAL_TIM_OC_Stop_IT+0x9a>
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00

0800874c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800874c:	4770      	bx	lr

0800874e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800874e:	4770      	bx	lr

08008750 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008750:	4770      	bx	lr

08008752 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008752:	6802      	ldr	r2, [r0, #0]
 8008754:	6813      	ldr	r3, [r2, #0]
 8008756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800875a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	6802      	ldr	r2, [r0, #0]
 800875e:	6893      	ldr	r3, [r2, #8]
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008766:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008768:	2b01      	cmp	r3, #1
 800876a:	d005      	beq.n	8008778 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800876c:	2320      	movs	r3, #32
 800876e:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008770:	2300      	movs	r3, #0
 8008772:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008774:	6643      	str	r3, [r0, #100]	; 0x64
}
 8008776:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	6802      	ldr	r2, [r0, #0]
 800877a:	6813      	ldr	r3, [r2, #0]
 800877c:	f023 0310 	bic.w	r3, r3, #16
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	e7f3      	b.n	800876c <UART_EndRxTransfer+0x1a>

08008784 <HAL_UART_TxCpltCallback>:
}
 8008784:	4770      	bx	lr

08008786 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008786:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	680a      	ldr	r2, [r1, #0]
 800878c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008790:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008792:	2220      	movs	r2, #32
 8008794:	6782      	str	r2, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008796:	2200      	movs	r2, #0
 8008798:	6682      	str	r2, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800879a:	f7ff fff3 	bl	8008784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879e:	bd08      	pop	{r3, pc}

080087a0 <HAL_UART_ErrorCallback>:
}
 80087a0:	4770      	bx	lr

080087a2 <UART_DMAAbortOnError>:
{
 80087a2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087ac:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80087b0:	f7ff fff6 	bl	80087a0 <HAL_UART_ErrorCallback>
}
 80087b4:	bd08      	pop	{r3, pc}

080087b6 <HAL_UARTEx_RxEventCallback>:
}
 80087b6:	4770      	bx	lr

080087b8 <HAL_UART_IRQHandler>:
{
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087bc:	6801      	ldr	r1, [r0, #0]
 80087be:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087c0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087c2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087c4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80087c8:	401a      	ands	r2, r3
 80087ca:	d105      	bne.n	80087d8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087cc:	f013 0f20 	tst.w	r3, #32
 80087d0:	d002      	beq.n	80087d8 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087d2:	f010 0f20 	tst.w	r0, #32
 80087d6:	d120      	bne.n	800881a <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 80087d8:	b12a      	cbz	r2, 80087e6 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80087da:	f015 0201 	ands.w	r2, r5, #1
 80087de:	d122      	bne.n	8008826 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80087e0:	4e94      	ldr	r6, [pc, #592]	; (8008a34 <HAL_UART_IRQHandler+0x27c>)
 80087e2:	4230      	tst	r0, r6
 80087e4:	d11f      	bne.n	8008826 <HAL_UART_IRQHandler+0x6e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80087e8:	2a01      	cmp	r2, #1
 80087ea:	f000 80a2 	beq.w	8008932 <HAL_UART_IRQHandler+0x17a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80087f2:	d003      	beq.n	80087fc <HAL_UART_IRQHandler+0x44>
 80087f4:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80087f8:	f040 810a 	bne.w	8008a10 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008800:	d003      	beq.n	800880a <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008802:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008806:	f040 810a 	bne.w	8008a1e <HAL_UART_IRQHandler+0x266>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800880a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800880e:	d003      	beq.n	8008818 <HAL_UART_IRQHandler+0x60>
 8008810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008814:	f040 810a 	bne.w	8008a2c <HAL_UART_IRQHandler+0x274>
}
 8008818:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800881a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0fb      	beq.n	8008818 <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 8008820:	4620      	mov	r0, r4
 8008822:	4798      	blx	r3
      return;
 8008824:	e7f8      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008826:	f013 0f01 	tst.w	r3, #1
 800882a:	d009      	beq.n	8008840 <HAL_UART_IRQHandler+0x88>
 800882c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008830:	d006      	beq.n	8008840 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008832:	2501      	movs	r5, #1
 8008834:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008836:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800883a:	4329      	orrs	r1, r5
 800883c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008840:	f013 0f02 	tst.w	r3, #2
 8008844:	d009      	beq.n	800885a <HAL_UART_IRQHandler+0xa2>
 8008846:	b142      	cbz	r2, 800885a <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008848:	6821      	ldr	r1, [r4, #0]
 800884a:	2502      	movs	r5, #2
 800884c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800884e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008852:	f041 0104 	orr.w	r1, r1, #4
 8008856:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800885a:	f013 0f04 	tst.w	r3, #4
 800885e:	d009      	beq.n	8008874 <HAL_UART_IRQHandler+0xbc>
 8008860:	b142      	cbz	r2, 8008874 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008862:	6821      	ldr	r1, [r4, #0]
 8008864:	2504      	movs	r5, #4
 8008866:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008868:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800886c:	f041 0102 	orr.w	r1, r1, #2
 8008870:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008874:	f013 0f08 	tst.w	r3, #8
 8008878:	d00b      	beq.n	8008892 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800887a:	f010 0f20 	tst.w	r0, #32
 800887e:	d100      	bne.n	8008882 <HAL_UART_IRQHandler+0xca>
 8008880:	b13a      	cbz	r2, 8008892 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	2108      	movs	r1, #8
 8008886:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008888:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800888c:	430a      	orrs	r2, r1
 800888e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008892:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008896:	d00c      	beq.n	80088b2 <HAL_UART_IRQHandler+0xfa>
 8008898:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800889c:	d009      	beq.n	80088b2 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088a4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80088aa:	f042 0220 	orr.w	r2, r2, #32
 80088ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d0ae      	beq.n	8008818 <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80088ba:	f013 0f20 	tst.w	r3, #32
 80088be:	d006      	beq.n	80088ce <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088c0:	f010 0f20 	tst.w	r0, #32
 80088c4:	d003      	beq.n	80088ce <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 80088c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088c8:	b10b      	cbz	r3, 80088ce <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 80088ca:	4620      	mov	r0, r4
 80088cc:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80088ce:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088da:	d102      	bne.n	80088e2 <HAL_UART_IRQHandler+0x12a>
 80088dc:	f012 0f28 	tst.w	r2, #40	; 0x28
 80088e0:	d020      	beq.n	8008924 <HAL_UART_IRQHandler+0x16c>
        UART_EndRxTransfer(huart);
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff ff35 	bl	8008752 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80088f0:	d014      	beq.n	800891c <HAL_UART_IRQHandler+0x164>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f8:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80088fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088fc:	b153      	cbz	r3, 8008914 <HAL_UART_IRQHandler+0x15c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088fe:	4a4e      	ldr	r2, [pc, #312]	; (8008a38 <HAL_UART_IRQHandler+0x280>)
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008902:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008904:	f7fd fb45 	bl	8005f92 <HAL_DMA_Abort_IT>
 8008908:	2800      	cmp	r0, #0
 800890a:	d085      	beq.n	8008818 <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800890c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800890e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008910:	4798      	blx	r3
 8008912:	e781      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 8008914:	4620      	mov	r0, r4
 8008916:	f7ff ff43 	bl	80087a0 <HAL_UART_ErrorCallback>
 800891a:	e77d      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff ff3f 	bl	80087a0 <HAL_UART_ErrorCallback>
 8008922:	e779      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff ff3b 	bl	80087a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892a:	2300      	movs	r3, #0
 800892c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return;
 8008930:	e772      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008932:	f013 0f10 	tst.w	r3, #16
 8008936:	f43f af5a 	beq.w	80087ee <HAL_UART_IRQHandler+0x36>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800893a:	f010 0f10 	tst.w	r0, #16
 800893e:	f43f af56 	beq.w	80087ee <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008942:	2310      	movs	r3, #16
 8008944:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008946:	6822      	ldr	r2, [r4, #0]
 8008948:	6893      	ldr	r3, [r2, #8]
 800894a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800894e:	d038      	beq.n	80089c2 <HAL_UART_IRQHandler+0x20a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008950:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008952:	680b      	ldr	r3, [r1, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8008958:	2b00      	cmp	r3, #0
 800895a:	f43f af5d 	beq.w	8008818 <HAL_UART_IRQHandler+0x60>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800895e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8008962:	4298      	cmp	r0, r3
 8008964:	f67f af58 	bls.w	8008818 <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 8008968:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800896c:	680b      	ldr	r3, [r1, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f013 0f20 	tst.w	r3, #32
 8008974:	d00a      	beq.n	800898c <HAL_UART_IRQHandler+0x1d4>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008976:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800897a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800897e:	b29b      	uxth	r3, r3
 8008980:	1ac9      	subs	r1, r1, r3
 8008982:	b289      	uxth	r1, r1
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff ff16 	bl	80087b6 <HAL_UARTEx_RxEventCallback>
      return;
 800898a:	e745      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008992:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	6893      	ldr	r3, [r2, #8]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	6893      	ldr	r3, [r2, #8]
 80089a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a6:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80089a8:	2320      	movs	r3, #32
 80089aa:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	2300      	movs	r3, #0
 80089ae:	6623      	str	r3, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b0:	6822      	ldr	r2, [r4, #0]
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	f023 0310 	bic.w	r3, r3, #16
 80089b8:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80089bc:	f7fd fac4 	bl	8005f48 <HAL_DMA_Abort>
 80089c0:	e7d9      	b.n	8008976 <HAL_UART_IRQHandler+0x1be>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089c2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80089c6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	1ac9      	subs	r1, r1, r3
 80089ce:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80089d0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f43f af1e 	beq.w	8008818 <HAL_UART_IRQHandler+0x60>
          &&(nb_rx_data > 0U) )
 80089dc:	2900      	cmp	r1, #0
 80089de:	f43f af1b 	beq.w	8008818 <HAL_UART_IRQHandler+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	6893      	ldr	r3, [r2, #8]
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80089f4:	2320      	movs	r3, #32
 80089f6:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f8:	2300      	movs	r3, #0
 80089fa:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80089fc:	6663      	str	r3, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	6813      	ldr	r3, [r2, #0]
 8008a02:	f023 0310 	bic.w	r3, r3, #16
 8008a06:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff fed4 	bl	80087b6 <HAL_UARTEx_RxEventCallback>
      return;
 8008a0e:	e703      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a14:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 fb32 	bl	8009080 <HAL_UARTEx_WakeupCallback>
    return;
 8008a1c:	e6fc      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 8008a1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f43f aef9 	beq.w	8008818 <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 8008a26:	4620      	mov	r0, r4
 8008a28:	4798      	blx	r3
    return;
 8008a2a:	e6f5      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7ff feaa 	bl	8008786 <UART_EndTransmit_IT>
    return;
 8008a32:	e6f1      	b.n	8008818 <HAL_UART_IRQHandler+0x60>
 8008a34:	04000120 	.word	0x04000120
 8008a38:	080087a3 	.word	0x080087a3

08008a3c <UART_SetConfig>:
{
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a40:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a42:	6883      	ldr	r3, [r0, #8]
 8008a44:	6902      	ldr	r2, [r0, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	6942      	ldr	r2, [r0, #20]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	69c2      	ldr	r2, [r0, #28]
 8008a4e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a50:	6808      	ldr	r0, [r1, #0]
 8008a52:	4a8e      	ldr	r2, [pc, #568]	; (8008c8c <UART_SetConfig+0x250>)
 8008a54:	4002      	ands	r2, r0
 8008a56:	4313      	orrs	r3, r2
 8008a58:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	6853      	ldr	r3, [r2, #4]
 8008a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008a62:	68e1      	ldr	r1, [r4, #12]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a68:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a6a:	6822      	ldr	r2, [r4, #0]
 8008a6c:	4b88      	ldr	r3, [pc, #544]	; (8008c90 <UART_SetConfig+0x254>)
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d001      	beq.n	8008a76 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8008a72:	6a23      	ldr	r3, [r4, #32]
 8008a74:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a76:	6893      	ldr	r3, [r2, #8]
 8008a78:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	4a84      	ldr	r2, [pc, #528]	; (8008c94 <UART_SetConfig+0x258>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d010      	beq.n	8008aaa <UART_SetConfig+0x6e>
 8008a88:	4a83      	ldr	r2, [pc, #524]	; (8008c98 <UART_SetConfig+0x25c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d021      	beq.n	8008ad2 <UART_SetConfig+0x96>
 8008a8e:	4a83      	ldr	r2, [pc, #524]	; (8008c9c <UART_SetConfig+0x260>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d037      	beq.n	8008b04 <UART_SetConfig+0xc8>
 8008a94:	4a82      	ldr	r2, [pc, #520]	; (8008ca0 <UART_SetConfig+0x264>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d05c      	beq.n	8008b54 <UART_SetConfig+0x118>
 8008a9a:	4a82      	ldr	r2, [pc, #520]	; (8008ca4 <UART_SetConfig+0x268>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d06b      	beq.n	8008b78 <UART_SetConfig+0x13c>
 8008aa0:	4a7b      	ldr	r2, [pc, #492]	; (8008c90 <UART_SetConfig+0x254>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d07d      	beq.n	8008ba2 <UART_SetConfig+0x166>
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	e03a      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008aaa:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8008aae:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008ab2:	f002 0203 	and.w	r2, r2, #3
 8008ab6:	2a03      	cmp	r2, #3
 8008ab8:	d809      	bhi.n	8008ace <UART_SetConfig+0x92>
 8008aba:	e8df f002 	tbb	[pc, r2]
 8008abe:	0402      	.short	0x0402
 8008ac0:	0687      	.short	0x0687
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	e02c      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	e02a      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008aca:	2208      	movs	r2, #8
 8008acc:	e028      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008ace:	2210      	movs	r2, #16
 8008ad0:	e026      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008ad2:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8008ad6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008ada:	f002 020c 	and.w	r2, r2, #12
 8008ade:	2a0c      	cmp	r2, #12
 8008ae0:	d80e      	bhi.n	8008b00 <UART_SetConfig+0xc4>
 8008ae2:	e8df f002 	tbb	[pc, r2]
 8008ae6:	0d07      	.short	0x0d07
 8008ae8:	0d090d0d 	.word	0x0d090d0d
 8008aec:	0d750d0d 	.word	0x0d750d0d
 8008af0:	0d0d      	.short	0x0d0d
 8008af2:	0b          	.byte	0x0b
 8008af3:	00          	.byte	0x00
 8008af4:	2200      	movs	r2, #0
 8008af6:	e013      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008af8:	2204      	movs	r2, #4
 8008afa:	e011      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008afc:	2208      	movs	r2, #8
 8008afe:	e00f      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b00:	2210      	movs	r2, #16
 8008b02:	e00d      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b04:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8008b08:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008b0c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8008b10:	2a20      	cmp	r2, #32
 8008b12:	d05f      	beq.n	8008bd4 <UART_SetConfig+0x198>
 8008b14:	d81a      	bhi.n	8008b4c <UART_SetConfig+0x110>
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d05e      	beq.n	8008bd8 <UART_SetConfig+0x19c>
 8008b1a:	2a10      	cmp	r2, #16
 8008b1c:	d15e      	bne.n	8008bdc <UART_SetConfig+0x1a0>
 8008b1e:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b20:	495b      	ldr	r1, [pc, #364]	; (8008c90 <UART_SetConfig+0x254>)
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d076      	beq.n	8008c14 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b26:	69e0      	ldr	r0, [r4, #28]
 8008b28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008b2c:	f000 80a3 	beq.w	8008c76 <UART_SetConfig+0x23a>
    switch (clocksource)
 8008b30:	2a08      	cmp	r2, #8
 8008b32:	f200 810e 	bhi.w	8008d52 <UART_SetConfig+0x316>
 8008b36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008b3a:	00dd      	.short	0x00dd
 8008b3c:	00db00f3 	.word	0x00db00f3
 8008b40:	00f6010c 	.word	0x00f6010c
 8008b44:	010c010c 	.word	0x010c010c
 8008b48:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b4c:	2a30      	cmp	r2, #48	; 0x30
 8008b4e:	d147      	bne.n	8008be0 <UART_SetConfig+0x1a4>
 8008b50:	2208      	movs	r2, #8
 8008b52:	e7e5      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b54:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8008b58:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008b5c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8008b60:	2a80      	cmp	r2, #128	; 0x80
 8008b62:	d03f      	beq.n	8008be4 <UART_SetConfig+0x1a8>
 8008b64:	d804      	bhi.n	8008b70 <UART_SetConfig+0x134>
 8008b66:	b3fa      	cbz	r2, 8008be8 <UART_SetConfig+0x1ac>
 8008b68:	2a40      	cmp	r2, #64	; 0x40
 8008b6a:	d13f      	bne.n	8008bec <UART_SetConfig+0x1b0>
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	e7d7      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b70:	2ac0      	cmp	r2, #192	; 0xc0
 8008b72:	d13d      	bne.n	8008bf0 <UART_SetConfig+0x1b4>
 8008b74:	2208      	movs	r2, #8
 8008b76:	e7d3      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b78:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8008b7c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008b80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008b84:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008b88:	d034      	beq.n	8008bf4 <UART_SetConfig+0x1b8>
 8008b8a:	d805      	bhi.n	8008b98 <UART_SetConfig+0x15c>
 8008b8c:	b3a2      	cbz	r2, 8008bf8 <UART_SetConfig+0x1bc>
 8008b8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008b92:	d133      	bne.n	8008bfc <UART_SetConfig+0x1c0>
 8008b94:	2204      	movs	r2, #4
 8008b96:	e7c3      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008b98:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008b9c:	d130      	bne.n	8008c00 <UART_SetConfig+0x1c4>
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	e7be      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008ba2:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8008ba6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008baa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8008bae:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008bb2:	d027      	beq.n	8008c04 <UART_SetConfig+0x1c8>
 8008bb4:	d805      	bhi.n	8008bc2 <UART_SetConfig+0x186>
 8008bb6:	b33a      	cbz	r2, 8008c08 <UART_SetConfig+0x1cc>
 8008bb8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008bbc:	d126      	bne.n	8008c0c <UART_SetConfig+0x1d0>
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	e7ae      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bc2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008bc6:	d123      	bne.n	8008c10 <UART_SetConfig+0x1d4>
 8008bc8:	2208      	movs	r2, #8
 8008bca:	e7a9      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bcc:	2202      	movs	r2, #2
 8008bce:	e7a7      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	e7a5      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	e7a3      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	e7a1      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bdc:	2210      	movs	r2, #16
 8008bde:	e79f      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008be0:	2210      	movs	r2, #16
 8008be2:	e79d      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008be4:	2202      	movs	r2, #2
 8008be6:	e79b      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008be8:	2200      	movs	r2, #0
 8008bea:	e799      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bec:	2210      	movs	r2, #16
 8008bee:	e797      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	e795      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	e793      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	e791      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	e78f      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008c00:	2210      	movs	r2, #16
 8008c02:	e78d      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008c04:	2202      	movs	r2, #2
 8008c06:	e78b      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	e789      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	e787      	b.n	8008b20 <UART_SetConfig+0xe4>
 8008c10:	2210      	movs	r2, #16
 8008c12:	e785      	b.n	8008b20 <UART_SetConfig+0xe4>
    switch (clocksource)
 8008c14:	2a08      	cmp	r2, #8
 8008c16:	f200 808c 	bhi.w	8008d32 <UART_SetConfig+0x2f6>
 8008c1a:	e8df f002 	tbb	[pc, r2]
 8008c1e:	8a08      	.short	0x8a08
 8008c20:	8a278a2a 	.word	0x8a278a2a
 8008c24:	8a8a      	.short	0x8a8a
 8008c26:	05          	.byte	0x05
 8008c27:	00          	.byte	0x00
 8008c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008c2c:	e003      	b.n	8008c36 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c2e:	f7fe f807 	bl	8006c40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d07f      	beq.n	8008d36 <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008c3c:	4283      	cmp	r3, r0
 8008c3e:	d87c      	bhi.n	8008d3a <UART_SetConfig+0x2fe>
 8008c40:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8008c44:	d87b      	bhi.n	8008d3e <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008c46:	0e01      	lsrs	r1, r0, #24
 8008c48:	0200      	lsls	r0, r0, #8
 8008c4a:	0853      	lsrs	r3, r2, #1
 8008c4c:	18c0      	adds	r0, r0, r3
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f141 0100 	adc.w	r1, r1, #0
 8008c56:	f7fb fb0b 	bl	8004270 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c5a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <UART_SetConfig+0x26c>)
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d86e      	bhi.n	8008d42 <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	60d8      	str	r0, [r3, #12]
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e055      	b.n	8008d18 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6c:	f7fd fbc4 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
        break;
 8008c70:	e7df      	b.n	8008c32 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8008c72:	480e      	ldr	r0, [pc, #56]	; (8008cac <UART_SetConfig+0x270>)
 8008c74:	e7df      	b.n	8008c36 <UART_SetConfig+0x1fa>
    switch (clocksource)
 8008c76:	2a08      	cmp	r2, #8
 8008c78:	d865      	bhi.n	8008d46 <UART_SetConfig+0x30a>
 8008c7a:	e8df f002 	tbb	[pc, r2]
 8008c7e:	3319      	.short	0x3319
 8008c80:	64366405 	.word	0x64366405
 8008c84:	6464      	.short	0x6464
 8008c86:	1d          	.byte	0x1d
 8008c87:	00          	.byte	0x00
 8008c88:	4808      	ldr	r0, [pc, #32]	; (8008cac <UART_SetConfig+0x270>)
 8008c8a:	e015      	b.n	8008cb8 <UART_SetConfig+0x27c>
 8008c8c:	efff69f3 	.word	0xefff69f3
 8008c90:	40008000 	.word	0x40008000
 8008c94:	40013800 	.word	0x40013800
 8008c98:	40004400 	.word	0x40004400
 8008c9c:	40004800 	.word	0x40004800
 8008ca0:	40004c00 	.word	0x40004c00
 8008ca4:	40005000 	.word	0x40005000
 8008ca8:	000ffcff 	.word	0x000ffcff
 8008cac:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb0:	f7fd ffc6 	bl	8006c40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d048      	beq.n	8008d4a <UART_SetConfig+0x30e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cb8:	6862      	ldr	r2, [r4, #4]
 8008cba:	0853      	lsrs	r3, r2, #1
 8008cbc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008cc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8008cc4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc6:	f1a0 0210 	sub.w	r2, r0, #16
 8008cca:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d83d      	bhi.n	8008d4e <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cd2:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd6:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8008cda:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	60d8      	str	r0, [r3, #12]
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e019      	b.n	8008d18 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fd ffbe 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
        break;
 8008ce8:	e7e4      	b.n	8008cb4 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetSysClockFreq();
 8008cea:	f7fd fb85 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
        break;
 8008cee:	e7e1      	b.n	8008cb4 <UART_SetConfig+0x278>
    switch (clocksource)
 8008cf0:	481b      	ldr	r0, [pc, #108]	; (8008d60 <UART_SetConfig+0x324>)
 8008cf2:	e002      	b.n	8008cfa <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf4:	f7fd ffa4 	bl	8006c40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008cf8:	b368      	cbz	r0, 8008d56 <UART_SetConfig+0x31a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cfa:	6863      	ldr	r3, [r4, #4]
 8008cfc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008d00:	fbb0 f0f3 	udiv	r0, r0, r3
 8008d04:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d06:	f1a0 0210 	sub.w	r2, r0, #16
 8008d0a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d823      	bhi.n	8008d5a <UART_SetConfig+0x31e>
        huart->Instance->BRR = usartdiv;
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	60d8      	str	r0, [r3, #12]
 8008d16:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8008d1c:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8008d1e:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d20:	f7fd ffa0 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
        break;
 8008d24:	e7e8      	b.n	8008cf8 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8008d26:	f7fd fb67 	bl	80063f8 <HAL_RCC_GetSysClockFreq>
        break;
 8008d2a:	e7e5      	b.n	8008cf8 <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 8008d2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008d30:	e7e3      	b.n	8008cfa <UART_SetConfig+0x2be>
    switch (clocksource)
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7f0      	b.n	8008d18 <UART_SetConfig+0x2dc>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e7ee      	b.n	8008d18 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7ec      	b.n	8008d18 <UART_SetConfig+0x2dc>
 8008d3e:	2001      	movs	r0, #1
 8008d40:	e7ea      	b.n	8008d18 <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7e8      	b.n	8008d18 <UART_SetConfig+0x2dc>
    switch (clocksource)
 8008d46:	2001      	movs	r0, #1
 8008d48:	e7e6      	b.n	8008d18 <UART_SetConfig+0x2dc>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7e4      	b.n	8008d18 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8008d4e:	2001      	movs	r0, #1
 8008d50:	e7e2      	b.n	8008d18 <UART_SetConfig+0x2dc>
    switch (clocksource)
 8008d52:	2001      	movs	r0, #1
 8008d54:	e7e0      	b.n	8008d18 <UART_SetConfig+0x2dc>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e7de      	b.n	8008d18 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7dc      	b.n	8008d18 <UART_SetConfig+0x2dc>
 8008d5e:	bf00      	nop
 8008d60:	00f42400 	.word	0x00f42400

08008d64 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d66:	f013 0f01 	tst.w	r3, #1
 8008d6a:	d006      	beq.n	8008d7a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	6853      	ldr	r3, [r2, #4]
 8008d70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d7c:	f013 0f02 	tst.w	r3, #2
 8008d80:	d006      	beq.n	8008d90 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d82:	6802      	ldr	r2, [r0, #0]
 8008d84:	6853      	ldr	r3, [r2, #4]
 8008d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d92:	f013 0f04 	tst.w	r3, #4
 8008d96:	d006      	beq.n	8008da6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d98:	6802      	ldr	r2, [r0, #0]
 8008d9a:	6853      	ldr	r3, [r2, #4]
 8008d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008da2:	430b      	orrs	r3, r1
 8008da4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008da6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008da8:	f013 0f08 	tst.w	r3, #8
 8008dac:	d006      	beq.n	8008dbc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dae:	6802      	ldr	r2, [r0, #0]
 8008db0:	6853      	ldr	r3, [r2, #4]
 8008db2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008db6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dbe:	f013 0f10 	tst.w	r3, #16
 8008dc2:	d006      	beq.n	8008dd2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc4:	6802      	ldr	r2, [r0, #0]
 8008dc6:	6893      	ldr	r3, [r2, #8]
 8008dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dcc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dd4:	f013 0f20 	tst.w	r3, #32
 8008dd8:	d006      	beq.n	8008de8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dda:	6802      	ldr	r2, [r0, #0]
 8008ddc:	6893      	ldr	r3, [r2, #8]
 8008dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008de2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008df0:	6802      	ldr	r2, [r0, #0]
 8008df2:	6853      	ldr	r3, [r2, #4]
 8008df4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008df8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e04:	d00b      	beq.n	8008e1e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e0c:	d006      	beq.n	8008e1c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e0e:	6802      	ldr	r2, [r0, #0]
 8008e10:	6853      	ldr	r3, [r2, #4]
 8008e12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e16:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6053      	str	r3, [r2, #4]
}
 8008e1c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e1e:	6802      	ldr	r2, [r0, #0]
 8008e20:	6853      	ldr	r3, [r2, #4]
 8008e22:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008e26:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6053      	str	r3, [r2, #4]
 8008e2c:	e7eb      	b.n	8008e06 <UART_AdvFeatureConfig+0xa2>

08008e2e <UART_WaitOnFlagUntilTimeout>:
{
 8008e2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e32:	4605      	mov	r5, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	4616      	mov	r6, r2
 8008e38:	4699      	mov	r9, r3
 8008e3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3e:	682c      	ldr	r4, [r5, #0]
 8008e40:	69e4      	ldr	r4, [r4, #28]
 8008e42:	ea37 0304 	bics.w	r3, r7, r4
 8008e46:	bf0c      	ite	eq
 8008e48:	f04f 0c01 	moveq.w	ip, #1
 8008e4c:	f04f 0c00 	movne.w	ip, #0
 8008e50:	45b4      	cmp	ip, r6
 8008e52:	d13d      	bne.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0xa2>
    if (Timeout != HAL_MAX_DELAY)
 8008e54:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008e58:	d0f1      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5a:	f7fd f803 	bl	8005e64 <HAL_GetTick>
 8008e5e:	eba0 0009 	sub.w	r0, r0, r9
 8008e62:	4540      	cmp	r0, r8
 8008e64:	d822      	bhi.n	8008eac <UART_WaitOnFlagUntilTimeout+0x7e>
 8008e66:	f1b8 0f00 	cmp.w	r8, #0
 8008e6a:	d01f      	beq.n	8008eac <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	f012 0f04 	tst.w	r2, #4
 8008e74:	d0e3      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008e7c:	d0df      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e82:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e84:	682a      	ldr	r2, [r5, #0]
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e8c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	682a      	ldr	r2, [r5, #0]
 8008e90:	6893      	ldr	r3, [r2, #8]
 8008e92:	f023 0301 	bic.w	r3, r3, #1
 8008e96:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008e98:	2320      	movs	r3, #32
 8008e9a:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e9e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
          return HAL_TIMEOUT;
 8008ea8:	2003      	movs	r0, #3
 8008eaa:	e012      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xa4>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eac:	682a      	ldr	r2, [r5, #0]
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eb4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	682a      	ldr	r2, [r5, #0]
 8008eb8:	6893      	ldr	r3, [r2, #8]
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8008ecc:	2003      	movs	r0, #3
 8008ece:	e000      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xa4>
  return HAL_OK;
 8008ed0:	2000      	movs	r0, #0
}
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008ed6 <HAL_UART_Transmit>:
{
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008ede:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d156      	bne.n	8008f92 <HAL_UART_Transmit+0xbc>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d055      	beq.n	8008f9a <HAL_UART_Transmit+0xc4>
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d055      	beq.n	8008f9e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8008ef2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d053      	beq.n	8008fa2 <HAL_UART_Transmit+0xcc>
 8008efa:	2301      	movs	r3, #1
 8008efc:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f06:	2321      	movs	r3, #33	; 0x21
 8008f08:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8008f0a:	f7fc ffab 	bl	8005e64 <HAL_GetTick>
 8008f0e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8008f10:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f14:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f18:	68a3      	ldr	r3, [r4, #8]
 8008f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f1e:	d005      	beq.n	8008f2c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8008f20:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8008f24:	2300      	movs	r3, #0
 8008f26:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8008f2a:	e014      	b.n	8008f56 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b113      	cbz	r3, 8008f36 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8008f30:	f04f 0800 	mov.w	r8, #0
 8008f34:	e7f6      	b.n	8008f24 <HAL_UART_Transmit+0x4e>
      pdata16bits = (uint16_t *) pData;
 8008f36:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8008f38:	2500      	movs	r5, #0
 8008f3a:	e7f3      	b.n	8008f24 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f3c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008f40:	6822      	ldr	r2, [r4, #0]
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008f48:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	3a01      	subs	r2, #1
 8008f50:	b292      	uxth	r2, r2
 8008f52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f56:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	b173      	cbz	r3, 8008f7c <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f5e:	9600      	str	r6, [sp, #0]
 8008f60:	463b      	mov	r3, r7
 8008f62:	2200      	movs	r2, #0
 8008f64:	2180      	movs	r1, #128	; 0x80
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff ff61 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8008f6c:	b9d8      	cbnz	r0, 8008fa6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	d0e4      	beq.n	8008f3c <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008f78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f7a:	e7e5      	b.n	8008f48 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f7c:	9600      	str	r6, [sp, #0]
 8008f7e:	463b      	mov	r3, r7
 8008f80:	2200      	movs	r2, #0
 8008f82:	2140      	movs	r1, #64	; 0x40
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff ff52 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8008f8a:	b970      	cbnz	r0, 8008faa <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8008f90:	e000      	b.n	8008f94 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8008f92:	2002      	movs	r0, #2
}
 8008f94:	b002      	add	sp, #8
 8008f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	e7fa      	b.n	8008f94 <HAL_UART_Transmit+0xbe>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	e7f8      	b.n	8008f94 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	e7f6      	b.n	8008f94 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8008fa6:	2003      	movs	r0, #3
 8008fa8:	e7f4      	b.n	8008f94 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8008faa:	2003      	movs	r0, #3
 8008fac:	e7f2      	b.n	8008f94 <HAL_UART_Transmit+0xbe>

08008fae <UART_CheckIdleState>:
{
 8008fae:	b530      	push	{r4, r5, lr}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8008fba:	f7fc ff53 	bl	8005e64 <HAL_GetTick>
 8008fbe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	f012 0f08 	tst.w	r2, #8
 8008fc8:	d10d      	bne.n	8008fe6 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f013 0f04 	tst.w	r3, #4
 8008fd2:	d116      	bne.n	8009002 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8008fd4:	2320      	movs	r3, #32
 8008fd6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008fd8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fda:	2000      	movs	r0, #0
 8008fdc:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8008fde:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8008fe2:	b003      	add	sp, #12
 8008fe4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff ff1a 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d0e5      	beq.n	8008fca <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008ffe:	2003      	movs	r0, #3
 8009000:	e7ef      	b.n	8008fe2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009002:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	462b      	mov	r3, r5
 800900a:	2200      	movs	r2, #0
 800900c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009010:	4620      	mov	r0, r4
 8009012:	f7ff ff0c 	bl	8008e2e <UART_WaitOnFlagUntilTimeout>
 8009016:	2800      	cmp	r0, #0
 8009018:	d0dc      	beq.n	8008fd4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800901a:	2003      	movs	r0, #3
 800901c:	e7e1      	b.n	8008fe2 <UART_CheckIdleState+0x34>

0800901e <HAL_UART_Init>:
  if (huart == NULL)
 800901e:	b368      	cbz	r0, 800907c <HAL_UART_Init+0x5e>
{
 8009020:	b510      	push	{r4, lr}
 8009022:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009024:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8009026:	b303      	cbz	r3, 800906a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8009028:	2324      	movs	r3, #36	; 0x24
 800902a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	6813      	ldr	r3, [r2, #0]
 8009030:	f023 0301 	bic.w	r3, r3, #1
 8009034:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff fd00 	bl	8008a3c <UART_SetConfig>
 800903c:	2801      	cmp	r0, #1
 800903e:	d013      	beq.n	8009068 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009042:	b9bb      	cbnz	r3, 8009074 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	6853      	ldr	r3, [r2, #4]
 8009048:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800904c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	6893      	ldr	r3, [r2, #8]
 8009052:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009056:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff ffa3 	bl	8008fae <UART_CheckIdleState>
}
 8009068:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800906a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800906e:	f7fc fc5d 	bl	800592c <HAL_UART_MspInit>
 8009072:	e7d9      	b.n	8009028 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8009074:	4620      	mov	r0, r4
 8009076:	f7ff fe75 	bl	8008d64 <UART_AdvFeatureConfig>
 800907a:	e7e3      	b.n	8009044 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800907c:	2001      	movs	r0, #1
}
 800907e:	4770      	bx	lr

08009080 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009080:	4770      	bx	lr

08009082 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009082:	b510      	push	{r4, lr}
 8009084:	b08a      	sub	sp, #40	; 0x28
 8009086:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009088:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800908c:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 8009090:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009094:	2100      	movs	r1, #0
 8009096:	9101      	str	r1, [sp, #4]
 8009098:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800909c:	9104      	str	r1, [sp, #16]
 800909e:	9105      	str	r1, [sp, #20]
 80090a0:	9106      	str	r1, [sp, #24]
 80090a2:	9107      	str	r1, [sp, #28]
 80090a4:	9108      	str	r1, [sp, #32]
 80090a6:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 80090a8:	233f      	movs	r3, #63	; 0x3f
 80090aa:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80090ae:	238a      	movs	r3, #138	; 0x8a
 80090b0:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80090b8:	2303      	movs	r3, #3
 80090ba:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 80090bc:	ab01      	add	r3, sp, #4
 80090be:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80090c0:	2307      	movs	r3, #7
 80090c2:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80090c4:	a804      	add	r0, sp, #16
 80090c6:	f000 fbff 	bl	80098c8 <hci_send_req>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	db0f      	blt.n	80090ee <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80090ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80090d2:	b950      	cbnz	r0, 80090ea <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80090d4:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 80090d8:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80090da:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 80090de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090e0:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80090e2:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 80090e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090e8:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 80090ea:	b00a      	add	sp, #40	; 0x28
 80090ec:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80090ee:	20ff      	movs	r0, #255	; 0xff
 80090f0:	e7fb      	b.n	80090ea <aci_gap_init_IDB05A1+0x68>

080090f2 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80090f2:	b570      	push	{r4, r5, r6, lr}
 80090f4:	b092      	sub	sp, #72	; 0x48
 80090f6:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80090fa:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80090fe:	192e      	adds	r6, r5, r4
 8009100:	360e      	adds	r6, #14
 8009102:	2e28      	cmp	r6, #40	; 0x28
 8009104:	d851      	bhi.n	80091aa <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8009106:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800910a:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800910e:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8009112:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8009116:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800911a:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800911e:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009122:	ae01      	add	r6, sp, #4
 8009124:	462a      	mov	r2, r5
 8009126:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009128:	a803      	add	r0, sp, #12
 800912a:	f000 fd61 	bl	8009bf0 <memcpy>
  indx +=  LocalNameLen;
 800912e:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8009132:	aa12      	add	r2, sp, #72	; 0x48
 8009134:	fa52 f383 	uxtab	r3, r2, r3
 8009138:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800913c:	3509      	adds	r5, #9
 800913e:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009140:	4622      	mov	r2, r4
 8009142:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009144:	1970      	adds	r0, r6, r5
 8009146:	f000 fd53 	bl	8009bf0 <memcpy>
  indx +=  ServiceUUIDLen;  
 800914a:	442c      	add	r4, r5
 800914c:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800914e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009152:	446b      	add	r3, sp
 8009154:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009158:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800915c:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800915e:	aa12      	add	r2, sp, #72	; 0x48
 8009160:	fa52 f383 	uxtab	r3, r2, r3
 8009164:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009168:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 800916c:	3404      	adds	r4, #4
 800916e:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009170:	2100      	movs	r1, #0
 8009172:	910c      	str	r1, [sp, #48]	; 0x30
 8009174:	910d      	str	r1, [sp, #52]	; 0x34
 8009176:	910e      	str	r1, [sp, #56]	; 0x38
 8009178:	910f      	str	r1, [sp, #60]	; 0x3c
 800917a:	9110      	str	r1, [sp, #64]	; 0x40
 800917c:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 800917e:	233f      	movs	r3, #63	; 0x3f
 8009180:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009184:	2383      	movs	r3, #131	; 0x83
 8009186:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800918a:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800918c:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 800918e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009192:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 8009194:	2301      	movs	r3, #1
 8009196:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8009198:	a80c      	add	r0, sp, #48	; 0x30
 800919a:	f000 fb95 	bl	80098c8 <hci_send_req>
 800919e:	2800      	cmp	r0, #0
 80091a0:	db05      	blt.n	80091ae <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80091a2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 80091a6:	b012      	add	sp, #72	; 0x48
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80091aa:	2042      	movs	r0, #66	; 0x42
 80091ac:	e7fb      	b.n	80091a6 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 80091ae:	20ff      	movs	r0, #255	; 0xff
 80091b0:	e7f9      	b.n	80091a6 <aci_gap_set_discoverable+0xb4>

080091b2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80091b2:	b500      	push	{lr}
 80091b4:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80091b6:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 80091ba:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80091be:	b161      	cbz	r1, 80091da <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80091c0:	f8d2 c000 	ldr.w	ip, [r2]
 80091c4:	6850      	ldr	r0, [r2, #4]
 80091c6:	6891      	ldr	r1, [r2, #8]
 80091c8:	68d2      	ldr	r2, [r2, #12]
 80091ca:	f8cd c006 	str.w	ip, [sp, #6]
 80091ce:	f8cd 000a 	str.w	r0, [sp, #10]
 80091d2:	f8cd 100e 	str.w	r1, [sp, #14]
 80091d6:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80091da:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 80091de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80091e2:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 80091e6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80091ea:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 80091ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f0:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 80091f4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80091f8:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091fc:	2100      	movs	r1, #0
 80091fe:	9108      	str	r1, [sp, #32]
 8009200:	9109      	str	r1, [sp, #36]	; 0x24
 8009202:	910a      	str	r1, [sp, #40]	; 0x28
 8009204:	910b      	str	r1, [sp, #44]	; 0x2c
 8009206:	910c      	str	r1, [sp, #48]	; 0x30
 8009208:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800920a:	233f      	movs	r3, #63	; 0x3f
 800920c:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009210:	2386      	movs	r3, #134	; 0x86
 8009212:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 8009216:	ab01      	add	r3, sp, #4
 8009218:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800921a:	231a      	movs	r3, #26
 800921c:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800921e:	f10d 0303 	add.w	r3, sp, #3
 8009222:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8009224:	2301      	movs	r3, #1
 8009226:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009228:	a808      	add	r0, sp, #32
 800922a:	f000 fb4d 	bl	80098c8 <hci_send_req>
 800922e:	2800      	cmp	r0, #0
 8009230:	db04      	blt.n	800923c <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009232:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 8009236:	b00f      	add	sp, #60	; 0x3c
 8009238:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800923c:	20ff      	movs	r0, #255	; 0xff
 800923e:	e7fa      	b.n	8009236 <aci_gap_set_auth_requirement+0x84>

08009240 <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 8009240:	281f      	cmp	r0, #31
 8009242:	d829      	bhi.n	8009298 <aci_gap_update_adv_data+0x58>
{
 8009244:	b510      	push	{r4, lr}
 8009246:	b090      	sub	sp, #64	; 0x40
 8009248:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800924a:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800924e:	4602      	mov	r2, r0
 8009250:	f10d 0005 	add.w	r0, sp, #5
 8009254:	f000 fccc 	bl	8009bf0 <memcpy>
  indx +=  AdvLen;
 8009258:	3401      	adds	r4, #1
 800925a:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800925c:	2100      	movs	r1, #0
 800925e:	910a      	str	r1, [sp, #40]	; 0x28
 8009260:	910b      	str	r1, [sp, #44]	; 0x2c
 8009262:	910c      	str	r1, [sp, #48]	; 0x30
 8009264:	910d      	str	r1, [sp, #52]	; 0x34
 8009266:	910e      	str	r1, [sp, #56]	; 0x38
 8009268:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 800926a:	233f      	movs	r3, #63	; 0x3f
 800926c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009270:	238e      	movs	r3, #142	; 0x8e
 8009272:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 8009276:	ab01      	add	r3, sp, #4
 8009278:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 800927a:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 800927c:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8009280:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 8009282:	2301      	movs	r3, #1
 8009284:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009286:	a80a      	add	r0, sp, #40	; 0x28
 8009288:	f000 fb1e 	bl	80098c8 <hci_send_req>
 800928c:	2800      	cmp	r0, #0
 800928e:	db05      	blt.n	800929c <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8009290:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 8009294:	b010      	add	sp, #64	; 0x40
 8009296:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009298:	2042      	movs	r0, #66	; 0x42
}
 800929a:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800929c:	20ff      	movs	r0, #255	; 0xff
 800929e:	e7f9      	b.n	8009294 <aci_gap_update_adv_data+0x54>

080092a0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80092a0:	b500      	push	{lr}
 80092a2:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092a4:	2100      	movs	r1, #0
 80092a6:	9102      	str	r1, [sp, #8]
 80092a8:	9103      	str	r1, [sp, #12]
 80092aa:	9104      	str	r1, [sp, #16]
 80092ac:	9105      	str	r1, [sp, #20]
 80092ae:	9106      	str	r1, [sp, #24]
 80092b0:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 80092b2:	233f      	movs	r3, #63	; 0x3f
 80092b4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80092b8:	f240 1301 	movw	r3, #257	; 0x101
 80092bc:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80092c0:	f10d 0307 	add.w	r3, sp, #7
 80092c4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80092c6:	2301      	movs	r3, #1
 80092c8:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80092ca:	a802      	add	r0, sp, #8
 80092cc:	f000 fafc 	bl	80098c8 <hci_send_req>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	db04      	blt.n	80092de <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 80092d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80092d8:	b009      	add	sp, #36	; 0x24
 80092da:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 80092de:	20ff      	movs	r0, #255	; 0xff
 80092e0:	e7fa      	b.n	80092d8 <aci_gatt_init+0x38>

080092e2 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80092e2:	b570      	push	{r4, r5, r6, lr}
 80092e4:	b08c      	sub	sp, #48	; 0x30
 80092e6:	4616      	mov	r6, r2
 80092e8:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 80092ea:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 80092ee:	2801      	cmp	r0, #1
 80092f0:	d038      	beq.n	8009364 <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80092f2:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80092f4:	4622      	mov	r2, r4
 80092f6:	f10d 0001 	add.w	r0, sp, #1
 80092fa:	f000 fc79 	bl	8009bf0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 80092fe:	f104 0331 	add.w	r3, r4, #49	; 0x31
 8009302:	446b      	add	r3, sp
 8009304:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 8009308:	f104 0332 	add.w	r3, r4, #50	; 0x32
 800930c:	eb0d 0203 	add.w	r2, sp, r3
 8009310:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 8009314:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009316:	ab05      	add	r3, sp, #20
 8009318:	2100      	movs	r1, #0
 800931a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800931e:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009322:	9106      	str	r1, [sp, #24]
 8009324:	9107      	str	r1, [sp, #28]
 8009326:	9108      	str	r1, [sp, #32]
 8009328:	9109      	str	r1, [sp, #36]	; 0x24
 800932a:	910a      	str	r1, [sp, #40]	; 0x28
 800932c:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 800932e:	223f      	movs	r2, #63	; 0x3f
 8009330:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8009334:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009338:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 800933c:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 8009340:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8009342:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009344:	2303      	movs	r3, #3
 8009346:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 8009348:	a806      	add	r0, sp, #24
 800934a:	f000 fabd 	bl	80098c8 <hci_send_req>
 800934e:	2800      	cmp	r0, #0
 8009350:	db0a      	blt.n	8009368 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009352:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8009356:	b918      	cbnz	r0, 8009360 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8009358:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 800935c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800935e:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8009360:	b00c      	add	sp, #48	; 0x30
 8009362:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 8009364:	2402      	movs	r4, #2
 8009366:	e7c5      	b.n	80092f4 <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 8009368:	20ff      	movs	r0, #255	; 0xff
 800936a:	e7f9      	b.n	8009360 <aci_gatt_add_serv+0x7e>

0800936c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800936c:	b530      	push	{r4, r5, lr}
 800936e:	b08f      	sub	sp, #60	; 0x3c
 8009370:	460c      	mov	r4, r1
 8009372:	4611      	mov	r1, r2
 8009374:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009376:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800937a:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 800937e:	2c01      	cmp	r4, #1
 8009380:	d056      	beq.n	8009430 <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8009382:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009384:	4622      	mov	r2, r4
 8009386:	f10d 0003 	add.w	r0, sp, #3
 800938a:	f000 fc31 	bl	8009bf0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800938e:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8009392:	eb0d 0203 	add.w	r2, sp, r3
 8009396:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 800939a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800939e:	446b      	add	r3, sp
 80093a0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80093a4:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 80093a8:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 80093ac:	446b      	add	r3, sp
 80093ae:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80093b2:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80093b6:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 80093ba:	446b      	add	r3, sp
 80093bc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80093c0:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 80093c4:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80093c8:	446b      	add	r3, sp
 80093ca:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80093ce:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 80093d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80093d6:	446b      	add	r3, sp
 80093d8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80093dc:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 80093e0:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80093e2:	ab07      	add	r3, sp, #28
 80093e4:	2100      	movs	r1, #0
 80093e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80093ea:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093ee:	9108      	str	r1, [sp, #32]
 80093f0:	9109      	str	r1, [sp, #36]	; 0x24
 80093f2:	910a      	str	r1, [sp, #40]	; 0x28
 80093f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80093f6:	910c      	str	r1, [sp, #48]	; 0x30
 80093f8:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 80093fa:	223f      	movs	r2, #63	; 0x3f
 80093fc:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009404:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 8009408:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 800940c:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 800940e:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009410:	2303      	movs	r3, #3
 8009412:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009414:	a808      	add	r0, sp, #32
 8009416:	f000 fa57 	bl	80098c8 <hci_send_req>
 800941a:	2800      	cmp	r0, #0
 800941c:	db0a      	blt.n	8009434 <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800941e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8009422:	b918      	cbnz	r0, 800942c <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8009424:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 8009428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800942a:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800942c:	b00f      	add	sp, #60	; 0x3c
 800942e:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 8009430:	2402      	movs	r4, #2
 8009432:	e7a7      	b.n	8009384 <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 8009434:	20ff      	movs	r0, #255	; 0xff
 8009436:	e7f9      	b.n	800942c <aci_gatt_add_char+0xc0>

08009438 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009438:	2b7a      	cmp	r3, #122	; 0x7a
 800943a:	d831      	bhi.n	80094a0 <aci_gatt_update_char_value+0x68>
{
 800943c:	b510      	push	{r4, lr}
 800943e:	b0a8      	sub	sp, #160	; 0xa0
 8009440:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009442:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009446:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 800944a:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 800944e:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009452:	461a      	mov	r2, r3
 8009454:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009456:	f10d 000a 	add.w	r0, sp, #10
 800945a:	f000 fbc9 	bl	8009bf0 <memcpy>
  indx +=  charValueLen;
 800945e:	3406      	adds	r4, #6
 8009460:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009462:	2100      	movs	r1, #0
 8009464:	9122      	str	r1, [sp, #136]	; 0x88
 8009466:	9123      	str	r1, [sp, #140]	; 0x8c
 8009468:	9124      	str	r1, [sp, #144]	; 0x90
 800946a:	9125      	str	r1, [sp, #148]	; 0x94
 800946c:	9126      	str	r1, [sp, #152]	; 0x98
 800946e:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009470:	233f      	movs	r3, #63	; 0x3f
 8009472:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009476:	f44f 7383 	mov.w	r3, #262	; 0x106
 800947a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800947e:	ab01      	add	r3, sp, #4
 8009480:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 8009482:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009484:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009488:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800948a:	2301      	movs	r3, #1
 800948c:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800948e:	a822      	add	r0, sp, #136	; 0x88
 8009490:	f000 fa1a 	bl	80098c8 <hci_send_req>
 8009494:	2800      	cmp	r0, #0
 8009496:	db05      	blt.n	80094a4 <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009498:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800949c:	b028      	add	sp, #160	; 0xa0
 800949e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80094a0:	2042      	movs	r0, #66	; 0x42
}
 80094a2:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 80094a4:	20ff      	movs	r0, #255	; 0xff
 80094a6:	e7f9      	b.n	800949c <aci_gatt_update_char_value+0x64>

080094a8 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80094a8:	b500      	push	{lr}
 80094aa:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80094ac:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80094b0:	2100      	movs	r1, #0
 80094b2:	9102      	str	r1, [sp, #8]
 80094b4:	9103      	str	r1, [sp, #12]
 80094b6:	9104      	str	r1, [sp, #16]
 80094b8:	9105      	str	r1, [sp, #20]
 80094ba:	9106      	str	r1, [sp, #24]
 80094bc:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 80094be:	233f      	movs	r3, #63	; 0x3f
 80094c0:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80094c4:	f240 1327 	movw	r3, #295	; 0x127
 80094c8:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 80094cc:	ab01      	add	r3, sp, #4
 80094ce:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80094d0:	2302      	movs	r3, #2
 80094d2:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 80094d4:	f10d 0303 	add.w	r3, sp, #3
 80094d8:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 80094da:	2301      	movs	r3, #1
 80094dc:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 80094de:	a802      	add	r0, sp, #8
 80094e0:	f000 f9f2 	bl	80098c8 <hci_send_req>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	db04      	blt.n	80094f2 <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 80094e8:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 80094ec:	b009      	add	sp, #36	; 0x24
 80094ee:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 80094f2:	20ff      	movs	r0, #255	; 0xff
 80094f4:	e7fa      	b.n	80094ec <aci_gatt_allow_read+0x44>

080094f6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80094f6:	b510      	push	{r4, lr}
 80094f8:	b0a8      	sub	sp, #160	; 0xa0
 80094fa:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80094fc:	297e      	cmp	r1, #126	; 0x7e
 80094fe:	d829      	bhi.n	8009554 <aci_hal_write_config_data+0x5e>
 8009500:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 8009502:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 8009506:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800950a:	4622      	mov	r2, r4
 800950c:	f10d 0006 	add.w	r0, sp, #6
 8009510:	f000 fb6e 	bl	8009bf0 <memcpy>
  indx +=  len;
 8009514:	3402      	adds	r4, #2
 8009516:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009518:	2100      	movs	r1, #0
 800951a:	9122      	str	r1, [sp, #136]	; 0x88
 800951c:	9123      	str	r1, [sp, #140]	; 0x8c
 800951e:	9124      	str	r1, [sp, #144]	; 0x90
 8009520:	9125      	str	r1, [sp, #148]	; 0x94
 8009522:	9126      	str	r1, [sp, #152]	; 0x98
 8009524:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009526:	233f      	movs	r3, #63	; 0x3f
 8009528:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800952c:	230c      	movs	r3, #12
 800952e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009532:	ab01      	add	r3, sp, #4
 8009534:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 8009536:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009538:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800953c:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800953e:	2301      	movs	r3, #1
 8009540:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8009542:	a822      	add	r0, sp, #136	; 0x88
 8009544:	f000 f9c0 	bl	80098c8 <hci_send_req>
 8009548:	2800      	cmp	r0, #0
 800954a:	db05      	blt.n	8009558 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800954c:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 8009550:	b028      	add	sp, #160	; 0xa0
 8009552:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009554:	2042      	movs	r0, #66	; 0x42
 8009556:	e7fb      	b.n	8009550 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009558:	20ff      	movs	r0, #255	; 0xff
 800955a:	e7f9      	b.n	8009550 <aci_hal_write_config_data+0x5a>

0800955c <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	b0a9      	sub	sp, #164	; 0xa4
 8009560:	460c      	mov	r4, r1
 8009562:	4616      	mov	r6, r2
 8009564:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009566:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800956a:	2100      	movs	r1, #0
 800956c:	9122      	str	r1, [sp, #136]	; 0x88
 800956e:	9123      	str	r1, [sp, #140]	; 0x8c
 8009570:	9124      	str	r1, [sp, #144]	; 0x90
 8009572:	9125      	str	r1, [sp, #148]	; 0x94
 8009574:	9126      	str	r1, [sp, #152]	; 0x98
 8009576:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009578:	233f      	movs	r3, #63	; 0x3f
 800957a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800957e:	230d      	movs	r3, #13
 8009580:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = &cp;
 8009584:	ab21      	add	r3, sp, #132	; 0x84
 8009586:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = sizeof(cp);
 8009588:	2301      	movs	r3, #1
 800958a:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &rp;
 800958c:	ab01      	add	r3, sp, #4
 800958e:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = sizeof(rp);
 8009590:	2380      	movs	r3, #128	; 0x80
 8009592:	9327      	str	r3, [sp, #156]	; 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009594:	a822      	add	r0, sp, #136	; 0x88
 8009596:	f000 f997 	bl	80098c8 <hci_send_req>
 800959a:	2800      	cmp	r0, #0
 800959c:	db18      	blt.n	80095d0 <aci_hal_read_config_data+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800959e:	f89d 7004 	ldrb.w	r7, [sp, #4]
 80095a2:	b987      	cbnz	r7, 80095c6 <aci_hal_read_config_data+0x6a>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 80095a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80095a6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80095aa:	fa5f fc8c 	uxtb.w	ip, ip
 80095ae:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80095b2:	fa1f f38c 	uxth.w	r3, ip
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	d908      	bls.n	80095cc <aci_hal_read_config_data+0x70>
 80095ba:	4622      	mov	r2, r4
 80095bc:	f10d 0105 	add.w	r1, sp, #5
 80095c0:	4628      	mov	r0, r5
 80095c2:	f000 fb15 	bl	8009bf0 <memcpy>
  
  return 0;
}
 80095c6:	4638      	mov	r0, r7
 80095c8:	b029      	add	sp, #164	; 0xa4
 80095ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80095cc:	4662      	mov	r2, ip
 80095ce:	e7f5      	b.n	80095bc <aci_hal_read_config_data+0x60>
    return BLE_STATUS_TIMEOUT;
 80095d0:	27ff      	movs	r7, #255	; 0xff
 80095d2:	e7f8      	b.n	80095c6 <aci_hal_read_config_data+0x6a>

080095d4 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80095d4:	b500      	push	{lr}
 80095d6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80095d8:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 80095dc:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095e0:	2100      	movs	r1, #0
 80095e2:	9102      	str	r1, [sp, #8]
 80095e4:	9103      	str	r1, [sp, #12]
 80095e6:	9104      	str	r1, [sp, #16]
 80095e8:	9105      	str	r1, [sp, #20]
 80095ea:	9106      	str	r1, [sp, #24]
 80095ec:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 80095ee:	233f      	movs	r3, #63	; 0x3f
 80095f0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80095f4:	230f      	movs	r3, #15
 80095f6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 80095fa:	ab01      	add	r3, sp, #4
 80095fc:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80095fe:	2302      	movs	r3, #2
 8009600:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8009602:	f10d 0303 	add.w	r3, sp, #3
 8009606:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8009608:	2301      	movs	r3, #1
 800960a:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800960c:	a802      	add	r0, sp, #8
 800960e:	f000 f95b 	bl	80098c8 <hci_send_req>
 8009612:	2800      	cmp	r0, #0
 8009614:	db04      	blt.n	8009620 <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009616:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800961a:	b009      	add	sp, #36	; 0x24
 800961c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009620:	20ff      	movs	r0, #255	; 0xff
 8009622:	e7fa      	b.n	800961a <aci_hal_set_tx_power_level+0x46>

08009624 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	b085      	sub	sp, #20
 8009628:	4605      	mov	r5, r0
 800962a:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800962c:	ab02      	add	r3, sp, #8
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	f10d 030a 	add.w	r3, sp, #10
 8009634:	f10d 020e 	add.w	r2, sp, #14
 8009638:	a903      	add	r1, sp, #12
 800963a:	f10d 000f 	add.w	r0, sp, #15
 800963e:	f000 f83a 	bl	80096b6 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009642:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009646:	d115      	bne.n	8009674 <getBlueNRGVersion+0x50>
    *hwVersion = hci_revision >> 8;
 8009648:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800964c:	0a1a      	lsrs	r2, r3, #8
 800964e:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	b29a      	uxth	r2, r3
 8009654:	8022      	strh	r2, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009656:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800965a:	091b      	lsrs	r3, r3, #4
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009662:	4313      	orrs	r3, r2
 8009664:	b21b      	sxth	r3, r3
 8009666:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009668:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800966c:	f002 020f 	and.w	r2, r2, #15
 8009670:	4313      	orrs	r3, r2
 8009672:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8009674:	b005      	add	sp, #20
 8009676:	bd30      	pop	{r4, r5, pc}

08009678 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009678:	b500      	push	{lr}
 800967a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800967c:	2100      	movs	r1, #0
 800967e:	9102      	str	r1, [sp, #8]
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	9104      	str	r1, [sp, #16]
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	9106      	str	r1, [sp, #24]
 8009688:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800968a:	2303      	movs	r3, #3
 800968c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8009690:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8009694:	f10d 0307 	add.w	r3, sp, #7
 8009698:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800969a:	2301      	movs	r3, #1
 800969c:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800969e:	a802      	add	r0, sp, #8
 80096a0:	f000 f912 	bl	80098c8 <hci_send_req>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	db04      	blt.n	80096b2 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80096a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80096ac:	b009      	add	sp, #36	; 0x24
 80096ae:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 80096b2:	20ff      	movs	r0, #255	; 0xff
 80096b4:	e7fa      	b.n	80096ac <hci_reset+0x34>

080096b6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	4680      	mov	r8, r0
 80096be:	460f      	mov	r7, r1
 80096c0:	4616      	mov	r6, r2
 80096c2:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80096c4:	ac01      	add	r4, sp, #4
 80096c6:	2100      	movs	r1, #0
 80096c8:	9101      	str	r1, [sp, #4]
 80096ca:	9102      	str	r1, [sp, #8]
 80096cc:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	9105      	str	r1, [sp, #20]
 80096d4:	9106      	str	r1, [sp, #24]
 80096d6:	9107      	str	r1, [sp, #28]
 80096d8:	9108      	str	r1, [sp, #32]
 80096da:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 80096dc:	2304      	movs	r3, #4
 80096de:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80096e2:	2301      	movs	r3, #1
 80096e4:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 80096e8:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80096ea:	2309      	movs	r3, #9
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80096ee:	a804      	add	r0, sp, #16
 80096f0:	f000 f8ea 	bl	80098c8 <hci_send_req>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	db16      	blt.n	8009726 <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80096f8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80096fc:	b980      	cbnz	r0, 8009720 <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 80096fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009702:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 8009706:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800970a:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800970c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009710:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009712:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8009716:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009718:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800971c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800971e:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8009720:	b00a      	add	sp, #40	; 0x28
 8009722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8009726:	20ff      	movs	r0, #255	; 0xff
 8009728:	e7fa      	b.n	8009720 <hci_le_read_local_version+0x6a>

0800972a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800972a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972c:	b091      	sub	sp, #68	; 0x44
 800972e:	4604      	mov	r4, r0
 8009730:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009732:	af02      	add	r7, sp, #8
 8009734:	2620      	movs	r6, #32
 8009736:	4632      	mov	r2, r6
 8009738:	2100      	movs	r1, #0
 800973a:	4638      	mov	r0, r7
 800973c:	f000 fa66 	bl	8009c0c <memset>
  scan_resp_cp.length = length;
 8009740:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009744:	4622      	mov	r2, r4
 8009746:	2c1f      	cmp	r4, #31
 8009748:	bf28      	it	cs
 800974a:	221f      	movcs	r2, #31
 800974c:	4629      	mov	r1, r5
 800974e:	f10d 0009 	add.w	r0, sp, #9
 8009752:	f000 fa4d 	bl	8009bf0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009756:	2100      	movs	r1, #0
 8009758:	910a      	str	r1, [sp, #40]	; 0x28
 800975a:	910b      	str	r1, [sp, #44]	; 0x2c
 800975c:	910c      	str	r1, [sp, #48]	; 0x30
 800975e:	910d      	str	r1, [sp, #52]	; 0x34
 8009760:	910e      	str	r1, [sp, #56]	; 0x38
 8009762:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 8009764:	2308      	movs	r3, #8
 8009766:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800976a:	2309      	movs	r3, #9
 800976c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 8009770:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009772:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 8009774:	f10d 0307 	add.w	r3, sp, #7
 8009778:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800977a:	2301      	movs	r3, #1
 800977c:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800977e:	a80a      	add	r0, sp, #40	; 0x28
 8009780:	f000 f8a2 	bl	80098c8 <hci_send_req>
 8009784:	2800      	cmp	r0, #0
 8009786:	db03      	blt.n	8009790 <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8009788:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800978c:	b011      	add	sp, #68	; 0x44
 800978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8009790:	20ff      	movs	r0, #255	; 0xff
 8009792:	e7fb      	b.n	800978c <hci_le_set_scan_resp_data+0x62>

08009794 <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009794:	7a03      	ldrb	r3, [r0, #8]
 8009796:	2b04      	cmp	r3, #4
 8009798:	d107      	bne.n	80097aa <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800979a:	7a82      	ldrb	r2, [r0, #10]
 800979c:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80097a0:	3b03      	subs	r3, #3
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d103      	bne.n	80097ae <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 80097a6:	2000      	movs	r0, #0
 80097a8:	4770      	bx	lr
    return 1; /* Incorrect type */
 80097aa:	2001      	movs	r0, #1
 80097ac:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 80097ae:	2002      	movs	r0, #2
}
 80097b0:	4770      	bx	lr
	...

080097b4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80097b4:	b510      	push	{r4, lr}
 80097b6:	b0a2      	sub	sp, #136	; 0x88
 80097b8:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80097ba:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 80097be:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 80097c2:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 80097c6:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 80097ca:	2101      	movs	r1, #1
 80097cc:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80097d0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80097d4:	b2d1      	uxtb	r1, r2
 80097d6:	f8ad 0009 	strh.w	r0, [sp, #9]
 80097da:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80097de:	4619      	mov	r1, r3
 80097e0:	a803      	add	r0, sp, #12
 80097e2:	f000 fa05 	bl	8009bf0 <memcpy>
  
  if (hciContext.io.Send)
 80097e6:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <send_cmd+0x44>)
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	b113      	cbz	r3, 80097f2 <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80097ec:	1d21      	adds	r1, r4, #4
 80097ee:	a802      	add	r0, sp, #8
 80097f0:	4798      	blx	r3
  }
}
 80097f2:	b022      	add	sp, #136	; 0x88
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	bf00      	nop
 80097f8:	20000520 	.word	0x20000520

080097fc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80097fc:	b510      	push	{r4, lr}
 80097fe:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009800:	e00a      	b.n	8009818 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009802:	4c09      	ldr	r4, [pc, #36]	; (8009828 <free_event_list+0x2c>)
 8009804:	a901      	add	r1, sp, #4
 8009806:	f104 0020 	add.w	r0, r4, #32
 800980a:	f000 f997 	bl	8009b3c <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800980e:	9901      	ldr	r1, [sp, #4]
 8009810:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009814:	f000 f97b 	bl	8009b0e <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009818:	4804      	ldr	r0, [pc, #16]	; (800982c <free_event_list+0x30>)
 800981a:	f000 f9b1 	bl	8009b80 <list_get_size>
 800981e:	2801      	cmp	r0, #1
 8009820:	ddef      	ble.n	8009802 <free_event_list+0x6>
  }
}
 8009822:	b002      	add	sp, #8
 8009824:	bd10      	pop	{r4, pc}
 8009826:	bf00      	nop
 8009828:	20000520 	.word	0x20000520
 800982c:	20000548 	.word	0x20000548

08009830 <move_list>:
{
 8009830:	b530      	push	{r4, r5, lr}
 8009832:	b083      	sub	sp, #12
 8009834:	4605      	mov	r5, r0
 8009836:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 8009838:	e007      	b.n	800984a <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800983a:	a901      	add	r1, sp, #4
 800983c:	4620      	mov	r0, r4
 800983e:	f000 f98e 	bl	8009b5e <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009842:	9901      	ldr	r1, [sp, #4]
 8009844:	4628      	mov	r0, r5
 8009846:	f000 f956 	bl	8009af6 <list_insert_head>
  while (!list_is_empty(src_list))
 800984a:	4620      	mov	r0, r4
 800984c:	f000 f947 	bl	8009ade <list_is_empty>
 8009850:	2800      	cmp	r0, #0
 8009852:	d0f2      	beq.n	800983a <move_list+0xa>
}
 8009854:	b003      	add	sp, #12
 8009856:	bd30      	pop	{r4, r5, pc}

08009858 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009858:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800985a:	b108      	cbz	r0, 8009860 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800985c:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <hci_init+0x50>)
 800985e:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009860:	4c11      	ldr	r4, [pc, #68]	; (80098a8 <hci_init+0x50>)
 8009862:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009866:	f000 f937 	bl	8009ad8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800986a:	f104 0020 	add.w	r0, r4, #32
 800986e:	f000 f933 	bl	8009ad8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009872:	f7fb fa59 	bl	8004d28 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009876:	2400      	movs	r4, #0
 8009878:	e00a      	b.n	8009890 <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800987a:	480b      	ldr	r0, [pc, #44]	; (80098a8 <hci_init+0x50>)
 800987c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009880:	218c      	movs	r1, #140	; 0x8c
 8009882:	fb01 3104 	mla	r1, r1, r4, r3
 8009886:	3028      	adds	r0, #40	; 0x28
 8009888:	f000 f941 	bl	8009b0e <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800988c:	3401      	adds	r4, #1
 800988e:	b2e4      	uxtb	r4, r4
 8009890:	2c04      	cmp	r4, #4
 8009892:	d9f2      	bls.n	800987a <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009894:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <hci_init+0x50>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	b10b      	cbz	r3, 800989e <hci_init+0x46>
 800989a:	2000      	movs	r0, #0
 800989c:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <hci_init+0x50>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	b103      	cbz	r3, 80098a6 <hci_init+0x4e>
 80098a4:	4798      	blx	r3
}
 80098a6:	bd10      	pop	{r4, pc}
 80098a8:	20000520 	.word	0x20000520

080098ac <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80098ac:	6802      	ldr	r2, [r0, #0]
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <hci_register_io_bus+0x18>)
 80098b0:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80098b2:	68c2      	ldr	r2, [r0, #12]
 80098b4:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80098b6:	6902      	ldr	r2, [r0, #16]
 80098b8:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80098ba:	6982      	ldr	r2, [r0, #24]
 80098bc:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 80098be:	6882      	ldr	r2, [r0, #8]
 80098c0:	609a      	str	r2, [r3, #8]
}
 80098c2:	4770      	bx	lr
 80098c4:	20000520 	.word	0x20000520

080098c8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80098d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80098d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098d8:	8802      	ldrh	r2, [r0, #0]
 80098da:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80098de:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80098e4:	a801      	add	r0, sp, #4
 80098e6:	f000 f8f7 	bl	8009ad8 <list_init_head>

  free_event_list();
 80098ea:	f7ff ff87 	bl	80097fc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80098ee:	68ab      	ldr	r3, [r5, #8]
 80098f0:	7b2a      	ldrb	r2, [r5, #12]
 80098f2:	8869      	ldrh	r1, [r5, #2]
 80098f4:	8828      	ldrh	r0, [r5, #0]
 80098f6:	f7ff ff5d 	bl	80097b4 <send_cmd>
  
  if (async)
 80098fa:	2c00      	cmp	r4, #0
 80098fc:	f040 8086 	bne.w	8009a0c <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009900:	f7fc fab0 	bl	8005e64 <HAL_GetTick>
 8009904:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009906:	f7fc faad 	bl	8005e64 <HAL_GetTick>
 800990a:	1b00      	subs	r0, r0, r4
 800990c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009910:	d822      	bhi.n	8009958 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009912:	483f      	ldr	r0, [pc, #252]	; (8009a10 <hci_send_req+0x148>)
 8009914:	f000 f8e3 	bl	8009ade <list_is_empty>
 8009918:	2800      	cmp	r0, #0
 800991a:	d1f4      	bne.n	8009906 <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800991c:	a903      	add	r1, sp, #12
 800991e:	483c      	ldr	r0, [pc, #240]	; (8009a10 <hci_send_req+0x148>)
 8009920:	f000 f90c 	bl	8009b3c <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009924:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009926:	7a1a      	ldrb	r2, [r3, #8]
 8009928:	2a04      	cmp	r2, #4
 800992a:	d128      	bne.n	800997e <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800992c:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009930:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 8009934:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 8009936:	7a5a      	ldrb	r2, [r3, #9]
 8009938:	2a10      	cmp	r2, #16
 800993a:	d00d      	beq.n	8009958 <hci_send_req+0x90>
 800993c:	d819      	bhi.n	8009972 <hci_send_req+0xaa>
 800993e:	2a0e      	cmp	r2, #14
 8009940:	d036      	beq.n	80099b0 <hci_send_req+0xe8>
 8009942:	2a0f      	cmp	r2, #15
 8009944:	d11b      	bne.n	800997e <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 8009946:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800994a:	42b2      	cmp	r2, r6
 800994c:	d104      	bne.n	8009958 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800994e:	686a      	ldr	r2, [r5, #4]
 8009950:	2a0f      	cmp	r2, #15
 8009952:	d024      	beq.n	800999e <hci_send_req+0xd6>
          if (cs->status) {
 8009954:	7adb      	ldrb	r3, [r3, #11]
 8009956:	b193      	cbz	r3, 800997e <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009958:	9903      	ldr	r1, [sp, #12]
 800995a:	b111      	cbz	r1, 8009962 <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800995c:	482d      	ldr	r0, [pc, #180]	; (8009a14 <hci_send_req+0x14c>)
 800995e:	f000 f8ca 	bl	8009af6 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009962:	a901      	add	r1, sp, #4
 8009964:	482a      	ldr	r0, [pc, #168]	; (8009a10 <hci_send_req+0x148>)
 8009966:	f7ff ff63 	bl	8009830 <move_list>

  return -1;
 800996a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800996e:	b004      	add	sp, #16
 8009970:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 8009972:	2a3e      	cmp	r2, #62	; 0x3e
 8009974:	d103      	bne.n	800997e <hci_send_req+0xb6>
        if (me->subevent != r->event)
 8009976:	7ad9      	ldrb	r1, [r3, #11]
 8009978:	686a      	ldr	r2, [r5, #4]
 800997a:	4291      	cmp	r1, r2
 800997c:	d033      	beq.n	80099e6 <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800997e:	4825      	ldr	r0, [pc, #148]	; (8009a14 <hci_send_req+0x14c>)
 8009980:	f000 f8ad 	bl	8009ade <list_is_empty>
 8009984:	b120      	cbz	r0, 8009990 <hci_send_req+0xc8>
 8009986:	4822      	ldr	r0, [pc, #136]	; (8009a10 <hci_send_req+0x148>)
 8009988:	f000 f8a9 	bl	8009ade <list_is_empty>
 800998c:	2800      	cmp	r0, #0
 800998e:	d136      	bne.n	80099fe <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009990:	9903      	ldr	r1, [sp, #12]
 8009992:	a801      	add	r0, sp, #4
 8009994:	f000 f8bb 	bl	8009b0e <list_insert_tail>
      hciReadPacket=NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	9303      	str	r3, [sp, #12]
 800999c:	e7b0      	b.n	8009900 <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 800999e:	696a      	ldr	r2, [r5, #20]
 80099a0:	42a2      	cmp	r2, r4
 80099a2:	bf28      	it	cs
 80099a4:	4622      	movcs	r2, r4
 80099a6:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80099a8:	6928      	ldr	r0, [r5, #16]
 80099aa:	f000 f921 	bl	8009bf0 <memcpy>
        goto done;
 80099ae:	e00d      	b.n	80099cc <hci_send_req+0x104>
        if (cc->opcode != opcode)
 80099b0:	899a      	ldrh	r2, [r3, #12]
 80099b2:	42b2      	cmp	r2, r6
 80099b4:	d1d0      	bne.n	8009958 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 80099b6:	1f82      	subs	r2, r0, #6
        r->rlen = MIN(len, r->rlen);
 80099b8:	6968      	ldr	r0, [r5, #20]
 80099ba:	4282      	cmp	r2, r0
 80099bc:	bf28      	it	cs
 80099be:	4602      	movcs	r2, r0
 80099c0:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80099c2:	f103 010e 	add.w	r1, r3, #14
 80099c6:	6928      	ldr	r0, [r5, #16]
 80099c8:	f000 f912 	bl	8009bf0 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80099cc:	4c12      	ldr	r4, [pc, #72]	; (8009a18 <hci_send_req+0x150>)
 80099ce:	9903      	ldr	r1, [sp, #12]
 80099d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80099d4:	f000 f88f 	bl	8009af6 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80099d8:	a901      	add	r1, sp, #4
 80099da:	f104 0020 	add.w	r0, r4, #32
 80099de:	f7ff ff27 	bl	8009830 <move_list>
  return 0;
 80099e2:	2000      	movs	r0, #0
 80099e4:	e7c3      	b.n	800996e <hci_send_req+0xa6>
        len -= 1;
 80099e6:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 80099e8:	696a      	ldr	r2, [r5, #20]
 80099ea:	4282      	cmp	r2, r0
 80099ec:	bf28      	it	cs
 80099ee:	4602      	movcs	r2, r0
 80099f0:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80099f2:	f103 010c 	add.w	r1, r3, #12
 80099f6:	6928      	ldr	r0, [r5, #16]
 80099f8:	f000 f8fa 	bl	8009bf0 <memcpy>
        goto done;
 80099fc:	e7e6      	b.n	80099cc <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80099fe:	9903      	ldr	r1, [sp, #12]
 8009a00:	4804      	ldr	r0, [pc, #16]	; (8009a14 <hci_send_req+0x14c>)
 8009a02:	f000 f884 	bl	8009b0e <list_insert_tail>
      hciReadPacket=NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	9303      	str	r3, [sp, #12]
 8009a0a:	e779      	b.n	8009900 <hci_send_req+0x38>
    return 0;
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	e7ae      	b.n	800996e <hci_send_req+0xa6>
 8009a10:	20000540 	.word	0x20000540
 8009a14:	20000548 	.word	0x20000548
 8009a18:	20000520 	.word	0x20000520

08009a1c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009a24:	e006      	b.n	8009a34 <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009a26:	9801      	ldr	r0, [sp, #4]
 8009a28:	3008      	adds	r0, #8
 8009a2a:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a2c:	9901      	ldr	r1, [sp, #4]
 8009a2e:	4809      	ldr	r0, [pc, #36]	; (8009a54 <hci_user_evt_proc+0x38>)
 8009a30:	f000 f86d 	bl	8009b0e <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009a34:	4808      	ldr	r0, [pc, #32]	; (8009a58 <hci_user_evt_proc+0x3c>)
 8009a36:	f000 f852 	bl	8009ade <list_is_empty>
 8009a3a:	b948      	cbnz	r0, 8009a50 <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009a3c:	4c07      	ldr	r4, [pc, #28]	; (8009a5c <hci_user_evt_proc+0x40>)
 8009a3e:	a901      	add	r1, sp, #4
 8009a40:	f104 0020 	add.w	r0, r4, #32
 8009a44:	f000 f87a 	bl	8009b3c <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8009a48:	69e3      	ldr	r3, [r4, #28]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1eb      	bne.n	8009a26 <hci_user_evt_proc+0xa>
 8009a4e:	e7ed      	b.n	8009a2c <hci_user_evt_proc+0x10>
  }
}
 8009a50:	b002      	add	sp, #8
 8009a52:	bd10      	pop	{r4, pc}
 8009a54:	20000548 	.word	0x20000548
 8009a58:	20000540 	.word	0x20000540
 8009a5c:	20000520 	.word	0x20000520

08009a60 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009a60:	b530      	push	{r4, r5, lr}
 8009a62:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009a68:	4818      	ldr	r0, [pc, #96]	; (8009acc <hci_notify_asynch_evt+0x6c>)
 8009a6a:	f000 f838 	bl	8009ade <list_is_empty>
 8009a6e:	b118      	cbz	r0, 8009a78 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 8009a70:	2401      	movs	r4, #1
  }
  return ret;

}
 8009a72:	4620      	mov	r0, r4
 8009a74:	b003      	add	sp, #12
 8009a76:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009a78:	4c15      	ldr	r4, [pc, #84]	; (8009ad0 <hci_notify_asynch_evt+0x70>)
 8009a7a:	a901      	add	r1, sp, #4
 8009a7c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009a80:	f000 f85c 	bl	8009b3c <list_remove_head>
    if (hciContext.io.Receive)
 8009a84:	68e3      	ldr	r3, [r4, #12]
 8009a86:	b1fb      	cbz	r3, 8009ac8 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009a88:	2180      	movs	r1, #128	; 0x80
 8009a8a:	9801      	ldr	r0, [sp, #4]
 8009a8c:	3008      	adds	r0, #8
 8009a8e:	4798      	blx	r3
      if (data_len > 0)
 8009a90:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009a94:	d012      	beq.n	8009abc <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 8009a96:	9d01      	ldr	r5, [sp, #4]
 8009a98:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7ff fe79 	bl	8009794 <verify_packet>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	b920      	cbnz	r0, 8009ab0 <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	480a      	ldr	r0, [pc, #40]	; (8009ad4 <hci_notify_asynch_evt+0x74>)
 8009aaa:	f000 f830 	bl	8009b0e <list_insert_tail>
 8009aae:	e7e0      	b.n	8009a72 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4806      	ldr	r0, [pc, #24]	; (8009acc <hci_notify_asynch_evt+0x6c>)
 8009ab4:	f000 f81f 	bl	8009af6 <list_insert_head>
  int32_t ret = 0;
 8009ab8:	2400      	movs	r4, #0
 8009aba:	e7da      	b.n	8009a72 <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009abc:	9901      	ldr	r1, [sp, #4]
 8009abe:	4803      	ldr	r0, [pc, #12]	; (8009acc <hci_notify_asynch_evt+0x6c>)
 8009ac0:	f000 f819 	bl	8009af6 <list_insert_head>
  int32_t ret = 0;
 8009ac4:	2400      	movs	r4, #0
 8009ac6:	e7d4      	b.n	8009a72 <hci_notify_asynch_evt+0x12>
 8009ac8:	2400      	movs	r4, #0
  return ret;
 8009aca:	e7d2      	b.n	8009a72 <hci_notify_asynch_evt+0x12>
 8009acc:	20000548 	.word	0x20000548
 8009ad0:	20000520 	.word	0x20000520
 8009ad4:	20000540 	.word	0x20000540

08009ad8 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8009ad8:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8009ada:	6040      	str	r0, [r0, #4]
}
 8009adc:	4770      	bx	lr

08009ade <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ade:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009ae2:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009ae4:	6802      	ldr	r2, [r0, #0]
 8009ae6:	4282      	cmp	r2, r0
 8009ae8:	d003      	beq.n	8009af2 <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 8009aea:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aec:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8009af0:	4770      	bx	lr
    return_value = 1;
 8009af2:	2001      	movs	r0, #1
 8009af4:	e7fa      	b.n	8009aec <list_is_empty+0xe>

08009af6 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009afa:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009afc:	6802      	ldr	r2, [r0, #0]
 8009afe:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8009b00:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8009b02:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8009b04:	680a      	ldr	r2, [r1, #0]
 8009b06:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b08:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b0c:	4770      	bx	lr

08009b0e <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b0e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b12:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009b14:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8009b16:	6842      	ldr	r2, [r0, #4]
 8009b18:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8009b1a:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8009b1c:	684a      	ldr	r2, [r1, #4]
 8009b1e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b20:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b24:	4770      	bx	lr

08009b26 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b26:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b2a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009b2c:	6841      	ldr	r1, [r0, #4]
 8009b2e:	6803      	ldr	r3, [r0, #0]
 8009b30:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 8009b32:	6841      	ldr	r1, [r0, #4]
 8009b34:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b36:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b3a:	4770      	bx	lr

08009b3c <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b40:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b44:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009b46:	6800      	ldr	r0, [r0, #0]
 8009b48:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 8009b4a:	f7ff ffec 	bl	8009b26 <list_remove_node>
  (*node)->next = NULL;
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b58:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}

08009b5e <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009b5e:	b538      	push	{r3, r4, r5, lr}
 8009b60:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b62:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b66:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009b68:	6840      	ldr	r0, [r0, #4]
 8009b6a:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 8009b6c:	f7ff ffdb 	bl	8009b26 <list_remove_node>
  (*node)->next = NULL;
 8009b70:	6822      	ldr	r2, [r4, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b7a:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}

08009b80 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009b80:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009b86:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009b88:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 8009b8a:	2000      	movs	r0, #0
  while (temp != listHead)
 8009b8c:	e001      	b.n	8009b92 <list_get_size+0x12>
  {
    size++;
 8009b8e:	3001      	adds	r0, #1
    temp = temp->next;		
 8009b90:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d1fb      	bne.n	8009b8e <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b96:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8009b9a:	4770      	bx	lr

08009b9c <__errno>:
 8009b9c:	4b01      	ldr	r3, [pc, #4]	; (8009ba4 <__errno+0x8>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2000001c 	.word	0x2000001c

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4d0d      	ldr	r5, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1b64      	subs	r4, r4, r5
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4d0b      	ldr	r5, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f000 fc8e 	bl	800a4dc <_init>
 8009bc0:	1b64      	subs	r4, r4, r5
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	42a6      	cmp	r6, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd0:	4798      	blx	r3
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bda:	4798      	blx	r3
 8009bdc:	3601      	adds	r6, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	0800a818 	.word	0x0800a818
 8009be4:	0800a818 	.word	0x0800a818
 8009be8:	0800a818 	.word	0x0800a818
 8009bec:	0800a81c 	.word	0x0800a81c

08009bf0 <memcpy>:
 8009bf0:	440a      	add	r2, r1
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009bf8:	d100      	bne.n	8009bfc <memcpy+0xc>
 8009bfa:	4770      	bx	lr
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c06:	4291      	cmp	r1, r2
 8009c08:	d1f9      	bne.n	8009bfe <memcpy+0xe>
 8009c0a:	bd10      	pop	{r4, pc}

08009c0c <memset>:
 8009c0c:	4402      	add	r2, r0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d100      	bne.n	8009c16 <memset+0xa>
 8009c14:	4770      	bx	lr
 8009c16:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1a:	e7f9      	b.n	8009c10 <memset+0x4>

08009c1c <siprintf>:
 8009c1c:	b40e      	push	{r1, r2, r3}
 8009c1e:	b500      	push	{lr}
 8009c20:	b09c      	sub	sp, #112	; 0x70
 8009c22:	ab1d      	add	r3, sp, #116	; 0x74
 8009c24:	9002      	str	r0, [sp, #8]
 8009c26:	9006      	str	r0, [sp, #24]
 8009c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c2c:	4809      	ldr	r0, [pc, #36]	; (8009c54 <siprintf+0x38>)
 8009c2e:	9107      	str	r1, [sp, #28]
 8009c30:	9104      	str	r1, [sp, #16]
 8009c32:	4909      	ldr	r1, [pc, #36]	; (8009c58 <siprintf+0x3c>)
 8009c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c38:	9105      	str	r1, [sp, #20]
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	a902      	add	r1, sp, #8
 8009c40:	f000 f868 	bl	8009d14 <_svfiprintf_r>
 8009c44:	9b02      	ldr	r3, [sp, #8]
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	b01c      	add	sp, #112	; 0x70
 8009c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c50:	b003      	add	sp, #12
 8009c52:	4770      	bx	lr
 8009c54:	2000001c 	.word	0x2000001c
 8009c58:	ffff0208 	.word	0xffff0208

08009c5c <__ssputs_r>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	688e      	ldr	r6, [r1, #8]
 8009c62:	429e      	cmp	r6, r3
 8009c64:	4682      	mov	sl, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	4690      	mov	r8, r2
 8009c6a:	461f      	mov	r7, r3
 8009c6c:	d838      	bhi.n	8009ce0 <__ssputs_r+0x84>
 8009c6e:	898a      	ldrh	r2, [r1, #12]
 8009c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c74:	d032      	beq.n	8009cdc <__ssputs_r+0x80>
 8009c76:	6825      	ldr	r5, [r4, #0]
 8009c78:	6909      	ldr	r1, [r1, #16]
 8009c7a:	eba5 0901 	sub.w	r9, r5, r1
 8009c7e:	6965      	ldr	r5, [r4, #20]
 8009c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c88:	3301      	adds	r3, #1
 8009c8a:	444b      	add	r3, r9
 8009c8c:	106d      	asrs	r5, r5, #1
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	bf38      	it	cc
 8009c92:	461d      	movcc	r5, r3
 8009c94:	0553      	lsls	r3, r2, #21
 8009c96:	d531      	bpl.n	8009cfc <__ssputs_r+0xa0>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f000 fb55 	bl	800a348 <_malloc_r>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	b950      	cbnz	r0, 8009cb8 <__ssputs_r+0x5c>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	f8ca 3000 	str.w	r3, [sl]
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cae:	81a3      	strh	r3, [r4, #12]
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	6921      	ldr	r1, [r4, #16]
 8009cba:	464a      	mov	r2, r9
 8009cbc:	f7ff ff98 	bl	8009bf0 <memcpy>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	6126      	str	r6, [r4, #16]
 8009cce:	6165      	str	r5, [r4, #20]
 8009cd0:	444e      	add	r6, r9
 8009cd2:	eba5 0509 	sub.w	r5, r5, r9
 8009cd6:	6026      	str	r6, [r4, #0]
 8009cd8:	60a5      	str	r5, [r4, #8]
 8009cda:	463e      	mov	r6, r7
 8009cdc:	42be      	cmp	r6, r7
 8009cde:	d900      	bls.n	8009ce2 <__ssputs_r+0x86>
 8009ce0:	463e      	mov	r6, r7
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	f000 faa8 	bl	800a23c <memmove>
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	1b9b      	subs	r3, r3, r6
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	4433      	add	r3, r6
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7db      	b.n	8009cb4 <__ssputs_r+0x58>
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	f000 fb97 	bl	800a430 <_realloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1e1      	bne.n	8009ccc <__ssputs_r+0x70>
 8009d08:	6921      	ldr	r1, [r4, #16]
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	f000 fab0 	bl	800a270 <_free_r>
 8009d10:	e7c7      	b.n	8009ca2 <__ssputs_r+0x46>
	...

08009d14 <_svfiprintf_r>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	4698      	mov	r8, r3
 8009d1a:	898b      	ldrh	r3, [r1, #12]
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	b09d      	sub	sp, #116	; 0x74
 8009d20:	4607      	mov	r7, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	4614      	mov	r4, r2
 8009d26:	d50e      	bpl.n	8009d46 <_svfiprintf_r+0x32>
 8009d28:	690b      	ldr	r3, [r1, #16]
 8009d2a:	b963      	cbnz	r3, 8009d46 <_svfiprintf_r+0x32>
 8009d2c:	2140      	movs	r1, #64	; 0x40
 8009d2e:	f000 fb0b 	bl	800a348 <_malloc_r>
 8009d32:	6028      	str	r0, [r5, #0]
 8009d34:	6128      	str	r0, [r5, #16]
 8009d36:	b920      	cbnz	r0, 8009d42 <_svfiprintf_r+0x2e>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d40:	e0d1      	b.n	8009ee6 <_svfiprintf_r+0x1d2>
 8009d42:	2340      	movs	r3, #64	; 0x40
 8009d44:	616b      	str	r3, [r5, #20]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d54:	2330      	movs	r3, #48	; 0x30
 8009d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f00 <_svfiprintf_r+0x1ec>
 8009d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d5e:	f04f 0901 	mov.w	r9, #1
 8009d62:	4623      	mov	r3, r4
 8009d64:	469a      	mov	sl, r3
 8009d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6a:	b10a      	cbz	r2, 8009d70 <_svfiprintf_r+0x5c>
 8009d6c:	2a25      	cmp	r2, #37	; 0x25
 8009d6e:	d1f9      	bne.n	8009d64 <_svfiprintf_r+0x50>
 8009d70:	ebba 0b04 	subs.w	fp, sl, r4
 8009d74:	d00b      	beq.n	8009d8e <_svfiprintf_r+0x7a>
 8009d76:	465b      	mov	r3, fp
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff ff6d 	bl	8009c5c <__ssputs_r>
 8009d82:	3001      	adds	r0, #1
 8009d84:	f000 80aa 	beq.w	8009edc <_svfiprintf_r+0x1c8>
 8009d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d8a:	445a      	add	r2, fp
 8009d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80a2 	beq.w	8009edc <_svfiprintf_r+0x1c8>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da2:	f10a 0a01 	add.w	sl, sl, #1
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	9307      	str	r3, [sp, #28]
 8009daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dae:	931a      	str	r3, [sp, #104]	; 0x68
 8009db0:	4654      	mov	r4, sl
 8009db2:	2205      	movs	r2, #5
 8009db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db8:	4851      	ldr	r0, [pc, #324]	; (8009f00 <_svfiprintf_r+0x1ec>)
 8009dba:	f7fa fa09 	bl	80041d0 <memchr>
 8009dbe:	9a04      	ldr	r2, [sp, #16]
 8009dc0:	b9d8      	cbnz	r0, 8009dfa <_svfiprintf_r+0xe6>
 8009dc2:	06d0      	lsls	r0, r2, #27
 8009dc4:	bf44      	itt	mi
 8009dc6:	2320      	movmi	r3, #32
 8009dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dcc:	0711      	lsls	r1, r2, #28
 8009dce:	bf44      	itt	mi
 8009dd0:	232b      	movmi	r3, #43	; 0x2b
 8009dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dda:	2b2a      	cmp	r3, #42	; 0x2a
 8009ddc:	d015      	beq.n	8009e0a <_svfiprintf_r+0xf6>
 8009dde:	9a07      	ldr	r2, [sp, #28]
 8009de0:	4654      	mov	r4, sl
 8009de2:	2000      	movs	r0, #0
 8009de4:	f04f 0c0a 	mov.w	ip, #10
 8009de8:	4621      	mov	r1, r4
 8009dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dee:	3b30      	subs	r3, #48	; 0x30
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d94e      	bls.n	8009e92 <_svfiprintf_r+0x17e>
 8009df4:	b1b0      	cbz	r0, 8009e24 <_svfiprintf_r+0x110>
 8009df6:	9207      	str	r2, [sp, #28]
 8009df8:	e014      	b.n	8009e24 <_svfiprintf_r+0x110>
 8009dfa:	eba0 0308 	sub.w	r3, r0, r8
 8009dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009e02:	4313      	orrs	r3, r2
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	46a2      	mov	sl, r4
 8009e08:	e7d2      	b.n	8009db0 <_svfiprintf_r+0x9c>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	1d19      	adds	r1, r3, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfbb      	ittet	lt
 8009e16:	425b      	neglt	r3, r3
 8009e18:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1c:	9307      	strge	r3, [sp, #28]
 8009e1e:	9307      	strlt	r3, [sp, #28]
 8009e20:	bfb8      	it	lt
 8009e22:	9204      	strlt	r2, [sp, #16]
 8009e24:	7823      	ldrb	r3, [r4, #0]
 8009e26:	2b2e      	cmp	r3, #46	; 0x2e
 8009e28:	d10c      	bne.n	8009e44 <_svfiprintf_r+0x130>
 8009e2a:	7863      	ldrb	r3, [r4, #1]
 8009e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2e:	d135      	bne.n	8009e9c <_svfiprintf_r+0x188>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	1d1a      	adds	r2, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	9203      	str	r2, [sp, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bfb8      	it	lt
 8009e3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e40:	3402      	adds	r4, #2
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f10 <_svfiprintf_r+0x1fc>
 8009e48:	7821      	ldrb	r1, [r4, #0]
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	f7fa f9bf 	bl	80041d0 <memchr>
 8009e52:	b140      	cbz	r0, 8009e66 <_svfiprintf_r+0x152>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	eba0 000a 	sub.w	r0, r0, sl
 8009e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	4303      	orrs	r3, r0
 8009e62:	3401      	adds	r4, #1
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6a:	4826      	ldr	r0, [pc, #152]	; (8009f04 <_svfiprintf_r+0x1f0>)
 8009e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e70:	2206      	movs	r2, #6
 8009e72:	f7fa f9ad 	bl	80041d0 <memchr>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d038      	beq.n	8009eec <_svfiprintf_r+0x1d8>
 8009e7a:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <_svfiprintf_r+0x1f4>)
 8009e7c:	bb1b      	cbnz	r3, 8009ec6 <_svfiprintf_r+0x1b2>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	3307      	adds	r3, #7
 8009e82:	f023 0307 	bic.w	r3, r3, #7
 8009e86:	3308      	adds	r3, #8
 8009e88:	9303      	str	r3, [sp, #12]
 8009e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8c:	4433      	add	r3, r6
 8009e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e90:	e767      	b.n	8009d62 <_svfiprintf_r+0x4e>
 8009e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e96:	460c      	mov	r4, r1
 8009e98:	2001      	movs	r0, #1
 8009e9a:	e7a5      	b.n	8009de8 <_svfiprintf_r+0xd4>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	3401      	adds	r4, #1
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f04f 0c0a 	mov.w	ip, #10
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eae:	3a30      	subs	r2, #48	; 0x30
 8009eb0:	2a09      	cmp	r2, #9
 8009eb2:	d903      	bls.n	8009ebc <_svfiprintf_r+0x1a8>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0c5      	beq.n	8009e44 <_svfiprintf_r+0x130>
 8009eb8:	9105      	str	r1, [sp, #20]
 8009eba:	e7c3      	b.n	8009e44 <_svfiprintf_r+0x130>
 8009ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f0      	b.n	8009ea8 <_svfiprintf_r+0x194>
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <_svfiprintf_r+0x1f8>)
 8009ece:	a904      	add	r1, sp, #16
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f3af 8000 	nop.w
 8009ed6:	1c42      	adds	r2, r0, #1
 8009ed8:	4606      	mov	r6, r0
 8009eda:	d1d6      	bne.n	8009e8a <_svfiprintf_r+0x176>
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	065b      	lsls	r3, r3, #25
 8009ee0:	f53f af2c 	bmi.w	8009d3c <_svfiprintf_r+0x28>
 8009ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee6:	b01d      	add	sp, #116	; 0x74
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <_svfiprintf_r+0x1f8>)
 8009ef4:	a904      	add	r1, sp, #16
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f000 f87a 	bl	8009ff0 <_printf_i>
 8009efc:	e7eb      	b.n	8009ed6 <_svfiprintf_r+0x1c2>
 8009efe:	bf00      	nop
 8009f00:	0800a7d6 	.word	0x0800a7d6
 8009f04:	0800a7e0 	.word	0x0800a7e0
 8009f08:	00000000 	.word	0x00000000
 8009f0c:	08009c5d 	.word	0x08009c5d
 8009f10:	0800a7dc 	.word	0x0800a7dc

08009f14 <_printf_common>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	4616      	mov	r6, r2
 8009f1a:	4699      	mov	r9, r3
 8009f1c:	688a      	ldr	r2, [r1, #8]
 8009f1e:	690b      	ldr	r3, [r1, #16]
 8009f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	bfb8      	it	lt
 8009f28:	4613      	movlt	r3, r2
 8009f2a:	6033      	str	r3, [r6, #0]
 8009f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f30:	4607      	mov	r7, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b10a      	cbz	r2, 8009f3a <_printf_common+0x26>
 8009f36:	3301      	adds	r3, #1
 8009f38:	6033      	str	r3, [r6, #0]
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	0699      	lsls	r1, r3, #26
 8009f3e:	bf42      	ittt	mi
 8009f40:	6833      	ldrmi	r3, [r6, #0]
 8009f42:	3302      	addmi	r3, #2
 8009f44:	6033      	strmi	r3, [r6, #0]
 8009f46:	6825      	ldr	r5, [r4, #0]
 8009f48:	f015 0506 	ands.w	r5, r5, #6
 8009f4c:	d106      	bne.n	8009f5c <_printf_common+0x48>
 8009f4e:	f104 0a19 	add.w	sl, r4, #25
 8009f52:	68e3      	ldr	r3, [r4, #12]
 8009f54:	6832      	ldr	r2, [r6, #0]
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	dc26      	bgt.n	8009faa <_printf_common+0x96>
 8009f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f60:	1e13      	subs	r3, r2, #0
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	bf18      	it	ne
 8009f66:	2301      	movne	r3, #1
 8009f68:	0692      	lsls	r2, r2, #26
 8009f6a:	d42b      	bmi.n	8009fc4 <_printf_common+0xb0>
 8009f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f70:	4649      	mov	r1, r9
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	3001      	adds	r0, #1
 8009f78:	d01e      	beq.n	8009fb8 <_printf_common+0xa4>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	68e5      	ldr	r5, [r4, #12]
 8009f7e:	6832      	ldr	r2, [r6, #0]
 8009f80:	f003 0306 	and.w	r3, r3, #6
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	bf08      	it	eq
 8009f88:	1aad      	subeq	r5, r5, r2
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	6922      	ldr	r2, [r4, #16]
 8009f8e:	bf0c      	ite	eq
 8009f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f94:	2500      	movne	r5, #0
 8009f96:	4293      	cmp	r3, r2
 8009f98:	bfc4      	itt	gt
 8009f9a:	1a9b      	subgt	r3, r3, r2
 8009f9c:	18ed      	addgt	r5, r5, r3
 8009f9e:	2600      	movs	r6, #0
 8009fa0:	341a      	adds	r4, #26
 8009fa2:	42b5      	cmp	r5, r6
 8009fa4:	d11a      	bne.n	8009fdc <_printf_common+0xc8>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e008      	b.n	8009fbc <_printf_common+0xa8>
 8009faa:	2301      	movs	r3, #1
 8009fac:	4652      	mov	r2, sl
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	47c0      	blx	r8
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d103      	bne.n	8009fc0 <_printf_common+0xac>
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc0:	3501      	adds	r5, #1
 8009fc2:	e7c6      	b.n	8009f52 <_printf_common+0x3e>
 8009fc4:	18e1      	adds	r1, r4, r3
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	2030      	movs	r0, #48	; 0x30
 8009fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fce:	4422      	add	r2, r4
 8009fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fd8:	3302      	adds	r3, #2
 8009fda:	e7c7      	b.n	8009f6c <_printf_common+0x58>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c0      	blx	r8
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d0e6      	beq.n	8009fb8 <_printf_common+0xa4>
 8009fea:	3601      	adds	r6, #1
 8009fec:	e7d9      	b.n	8009fa2 <_printf_common+0x8e>
	...

08009ff0 <_printf_i>:
 8009ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	7e0f      	ldrb	r7, [r1, #24]
 8009ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ff8:	2f78      	cmp	r7, #120	; 0x78
 8009ffa:	4691      	mov	r9, r2
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	460c      	mov	r4, r1
 800a000:	469a      	mov	sl, r3
 800a002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a006:	d807      	bhi.n	800a018 <_printf_i+0x28>
 800a008:	2f62      	cmp	r7, #98	; 0x62
 800a00a:	d80a      	bhi.n	800a022 <_printf_i+0x32>
 800a00c:	2f00      	cmp	r7, #0
 800a00e:	f000 80d8 	beq.w	800a1c2 <_printf_i+0x1d2>
 800a012:	2f58      	cmp	r7, #88	; 0x58
 800a014:	f000 80a3 	beq.w	800a15e <_printf_i+0x16e>
 800a018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a01c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a020:	e03a      	b.n	800a098 <_printf_i+0xa8>
 800a022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a026:	2b15      	cmp	r3, #21
 800a028:	d8f6      	bhi.n	800a018 <_printf_i+0x28>
 800a02a:	a101      	add	r1, pc, #4	; (adr r1, 800a030 <_printf_i+0x40>)
 800a02c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a030:	0800a089 	.word	0x0800a089
 800a034:	0800a09d 	.word	0x0800a09d
 800a038:	0800a019 	.word	0x0800a019
 800a03c:	0800a019 	.word	0x0800a019
 800a040:	0800a019 	.word	0x0800a019
 800a044:	0800a019 	.word	0x0800a019
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	0800a019 	.word	0x0800a019
 800a050:	0800a019 	.word	0x0800a019
 800a054:	0800a019 	.word	0x0800a019
 800a058:	0800a019 	.word	0x0800a019
 800a05c:	0800a1a9 	.word	0x0800a1a9
 800a060:	0800a0cd 	.word	0x0800a0cd
 800a064:	0800a18b 	.word	0x0800a18b
 800a068:	0800a019 	.word	0x0800a019
 800a06c:	0800a019 	.word	0x0800a019
 800a070:	0800a1cb 	.word	0x0800a1cb
 800a074:	0800a019 	.word	0x0800a019
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a019 	.word	0x0800a019
 800a080:	0800a019 	.word	0x0800a019
 800a084:	0800a193 	.word	0x0800a193
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	1d1a      	adds	r2, r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	602a      	str	r2, [r5, #0]
 800a090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a098:	2301      	movs	r3, #1
 800a09a:	e0a3      	b.n	800a1e4 <_printf_i+0x1f4>
 800a09c:	6820      	ldr	r0, [r4, #0]
 800a09e:	6829      	ldr	r1, [r5, #0]
 800a0a0:	0606      	lsls	r6, r0, #24
 800a0a2:	f101 0304 	add.w	r3, r1, #4
 800a0a6:	d50a      	bpl.n	800a0be <_printf_i+0xce>
 800a0a8:	680e      	ldr	r6, [r1, #0]
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	2e00      	cmp	r6, #0
 800a0ae:	da03      	bge.n	800a0b8 <_printf_i+0xc8>
 800a0b0:	232d      	movs	r3, #45	; 0x2d
 800a0b2:	4276      	negs	r6, r6
 800a0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b8:	485e      	ldr	r0, [pc, #376]	; (800a234 <_printf_i+0x244>)
 800a0ba:	230a      	movs	r3, #10
 800a0bc:	e019      	b.n	800a0f2 <_printf_i+0x102>
 800a0be:	680e      	ldr	r6, [r1, #0]
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0c6:	bf18      	it	ne
 800a0c8:	b236      	sxthne	r6, r6
 800a0ca:	e7ef      	b.n	800a0ac <_printf_i+0xbc>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	1d19      	adds	r1, r3, #4
 800a0d2:	6029      	str	r1, [r5, #0]
 800a0d4:	0601      	lsls	r1, r0, #24
 800a0d6:	d501      	bpl.n	800a0dc <_printf_i+0xec>
 800a0d8:	681e      	ldr	r6, [r3, #0]
 800a0da:	e002      	b.n	800a0e2 <_printf_i+0xf2>
 800a0dc:	0646      	lsls	r6, r0, #25
 800a0de:	d5fb      	bpl.n	800a0d8 <_printf_i+0xe8>
 800a0e0:	881e      	ldrh	r6, [r3, #0]
 800a0e2:	4854      	ldr	r0, [pc, #336]	; (800a234 <_printf_i+0x244>)
 800a0e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2308      	moveq	r3, #8
 800a0ea:	230a      	movne	r3, #10
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0f2:	6865      	ldr	r5, [r4, #4]
 800a0f4:	60a5      	str	r5, [r4, #8]
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	bfa2      	ittt	ge
 800a0fa:	6821      	ldrge	r1, [r4, #0]
 800a0fc:	f021 0104 	bicge.w	r1, r1, #4
 800a100:	6021      	strge	r1, [r4, #0]
 800a102:	b90e      	cbnz	r6, 800a108 <_printf_i+0x118>
 800a104:	2d00      	cmp	r5, #0
 800a106:	d04d      	beq.n	800a1a4 <_printf_i+0x1b4>
 800a108:	4615      	mov	r5, r2
 800a10a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a10e:	fb03 6711 	mls	r7, r3, r1, r6
 800a112:	5dc7      	ldrb	r7, [r0, r7]
 800a114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a118:	4637      	mov	r7, r6
 800a11a:	42bb      	cmp	r3, r7
 800a11c:	460e      	mov	r6, r1
 800a11e:	d9f4      	bls.n	800a10a <_printf_i+0x11a>
 800a120:	2b08      	cmp	r3, #8
 800a122:	d10b      	bne.n	800a13c <_printf_i+0x14c>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	07de      	lsls	r6, r3, #31
 800a128:	d508      	bpl.n	800a13c <_printf_i+0x14c>
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	6861      	ldr	r1, [r4, #4]
 800a12e:	4299      	cmp	r1, r3
 800a130:	bfde      	ittt	le
 800a132:	2330      	movle	r3, #48	; 0x30
 800a134:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a138:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a13c:	1b52      	subs	r2, r2, r5
 800a13e:	6122      	str	r2, [r4, #16]
 800a140:	f8cd a000 	str.w	sl, [sp]
 800a144:	464b      	mov	r3, r9
 800a146:	aa03      	add	r2, sp, #12
 800a148:	4621      	mov	r1, r4
 800a14a:	4640      	mov	r0, r8
 800a14c:	f7ff fee2 	bl	8009f14 <_printf_common>
 800a150:	3001      	adds	r0, #1
 800a152:	d14c      	bne.n	800a1ee <_printf_i+0x1fe>
 800a154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a158:	b004      	add	sp, #16
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	4835      	ldr	r0, [pc, #212]	; (800a234 <_printf_i+0x244>)
 800a160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a164:	6829      	ldr	r1, [r5, #0]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	f851 6b04 	ldr.w	r6, [r1], #4
 800a16c:	6029      	str	r1, [r5, #0]
 800a16e:	061d      	lsls	r5, r3, #24
 800a170:	d514      	bpl.n	800a19c <_printf_i+0x1ac>
 800a172:	07df      	lsls	r7, r3, #31
 800a174:	bf44      	itt	mi
 800a176:	f043 0320 	orrmi.w	r3, r3, #32
 800a17a:	6023      	strmi	r3, [r4, #0]
 800a17c:	b91e      	cbnz	r6, 800a186 <_printf_i+0x196>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	f023 0320 	bic.w	r3, r3, #32
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	2310      	movs	r3, #16
 800a188:	e7b0      	b.n	800a0ec <_printf_i+0xfc>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f043 0320 	orr.w	r3, r3, #32
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	2378      	movs	r3, #120	; 0x78
 800a194:	4828      	ldr	r0, [pc, #160]	; (800a238 <_printf_i+0x248>)
 800a196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a19a:	e7e3      	b.n	800a164 <_printf_i+0x174>
 800a19c:	0659      	lsls	r1, r3, #25
 800a19e:	bf48      	it	mi
 800a1a0:	b2b6      	uxthmi	r6, r6
 800a1a2:	e7e6      	b.n	800a172 <_printf_i+0x182>
 800a1a4:	4615      	mov	r5, r2
 800a1a6:	e7bb      	b.n	800a120 <_printf_i+0x130>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	6826      	ldr	r6, [r4, #0]
 800a1ac:	6961      	ldr	r1, [r4, #20]
 800a1ae:	1d18      	adds	r0, r3, #4
 800a1b0:	6028      	str	r0, [r5, #0]
 800a1b2:	0635      	lsls	r5, r6, #24
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	d501      	bpl.n	800a1bc <_printf_i+0x1cc>
 800a1b8:	6019      	str	r1, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <_printf_i+0x1d2>
 800a1bc:	0670      	lsls	r0, r6, #25
 800a1be:	d5fb      	bpl.n	800a1b8 <_printf_i+0x1c8>
 800a1c0:	8019      	strh	r1, [r3, #0]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	4615      	mov	r5, r2
 800a1c8:	e7ba      	b.n	800a140 <_printf_i+0x150>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	1d1a      	adds	r2, r3, #4
 800a1ce:	602a      	str	r2, [r5, #0]
 800a1d0:	681d      	ldr	r5, [r3, #0]
 800a1d2:	6862      	ldr	r2, [r4, #4]
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7f9 fffa 	bl	80041d0 <memchr>
 800a1dc:	b108      	cbz	r0, 800a1e2 <_printf_i+0x1f2>
 800a1de:	1b40      	subs	r0, r0, r5
 800a1e0:	6060      	str	r0, [r4, #4]
 800a1e2:	6863      	ldr	r3, [r4, #4]
 800a1e4:	6123      	str	r3, [r4, #16]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ec:	e7a8      	b.n	800a140 <_printf_i+0x150>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	47d0      	blx	sl
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d0ab      	beq.n	800a154 <_printf_i+0x164>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	079b      	lsls	r3, r3, #30
 800a200:	d413      	bmi.n	800a22a <_printf_i+0x23a>
 800a202:	68e0      	ldr	r0, [r4, #12]
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	4298      	cmp	r0, r3
 800a208:	bfb8      	it	lt
 800a20a:	4618      	movlt	r0, r3
 800a20c:	e7a4      	b.n	800a158 <_printf_i+0x168>
 800a20e:	2301      	movs	r3, #1
 800a210:	4632      	mov	r2, r6
 800a212:	4649      	mov	r1, r9
 800a214:	4640      	mov	r0, r8
 800a216:	47d0      	blx	sl
 800a218:	3001      	adds	r0, #1
 800a21a:	d09b      	beq.n	800a154 <_printf_i+0x164>
 800a21c:	3501      	adds	r5, #1
 800a21e:	68e3      	ldr	r3, [r4, #12]
 800a220:	9903      	ldr	r1, [sp, #12]
 800a222:	1a5b      	subs	r3, r3, r1
 800a224:	42ab      	cmp	r3, r5
 800a226:	dcf2      	bgt.n	800a20e <_printf_i+0x21e>
 800a228:	e7eb      	b.n	800a202 <_printf_i+0x212>
 800a22a:	2500      	movs	r5, #0
 800a22c:	f104 0619 	add.w	r6, r4, #25
 800a230:	e7f5      	b.n	800a21e <_printf_i+0x22e>
 800a232:	bf00      	nop
 800a234:	0800a7e7 	.word	0x0800a7e7
 800a238:	0800a7f8 	.word	0x0800a7f8

0800a23c <memmove>:
 800a23c:	4288      	cmp	r0, r1
 800a23e:	b510      	push	{r4, lr}
 800a240:	eb01 0402 	add.w	r4, r1, r2
 800a244:	d902      	bls.n	800a24c <memmove+0x10>
 800a246:	4284      	cmp	r4, r0
 800a248:	4623      	mov	r3, r4
 800a24a:	d807      	bhi.n	800a25c <memmove+0x20>
 800a24c:	1e43      	subs	r3, r0, #1
 800a24e:	42a1      	cmp	r1, r4
 800a250:	d008      	beq.n	800a264 <memmove+0x28>
 800a252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a25a:	e7f8      	b.n	800a24e <memmove+0x12>
 800a25c:	4402      	add	r2, r0
 800a25e:	4601      	mov	r1, r0
 800a260:	428a      	cmp	r2, r1
 800a262:	d100      	bne.n	800a266 <memmove+0x2a>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a26a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a26e:	e7f7      	b.n	800a260 <memmove+0x24>

0800a270 <_free_r>:
 800a270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a272:	2900      	cmp	r1, #0
 800a274:	d044      	beq.n	800a300 <_free_r+0x90>
 800a276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a27a:	9001      	str	r0, [sp, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f1a1 0404 	sub.w	r4, r1, #4
 800a282:	bfb8      	it	lt
 800a284:	18e4      	addlt	r4, r4, r3
 800a286:	f000 f913 	bl	800a4b0 <__malloc_lock>
 800a28a:	4a1e      	ldr	r2, [pc, #120]	; (800a304 <_free_r+0x94>)
 800a28c:	9801      	ldr	r0, [sp, #4]
 800a28e:	6813      	ldr	r3, [r2, #0]
 800a290:	b933      	cbnz	r3, 800a2a0 <_free_r+0x30>
 800a292:	6063      	str	r3, [r4, #4]
 800a294:	6014      	str	r4, [r2, #0]
 800a296:	b003      	add	sp, #12
 800a298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a29c:	f000 b90e 	b.w	800a4bc <__malloc_unlock>
 800a2a0:	42a3      	cmp	r3, r4
 800a2a2:	d908      	bls.n	800a2b6 <_free_r+0x46>
 800a2a4:	6825      	ldr	r5, [r4, #0]
 800a2a6:	1961      	adds	r1, r4, r5
 800a2a8:	428b      	cmp	r3, r1
 800a2aa:	bf01      	itttt	eq
 800a2ac:	6819      	ldreq	r1, [r3, #0]
 800a2ae:	685b      	ldreq	r3, [r3, #4]
 800a2b0:	1949      	addeq	r1, r1, r5
 800a2b2:	6021      	streq	r1, [r4, #0]
 800a2b4:	e7ed      	b.n	800a292 <_free_r+0x22>
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	b10b      	cbz	r3, 800a2c0 <_free_r+0x50>
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	d9fa      	bls.n	800a2b6 <_free_r+0x46>
 800a2c0:	6811      	ldr	r1, [r2, #0]
 800a2c2:	1855      	adds	r5, r2, r1
 800a2c4:	42a5      	cmp	r5, r4
 800a2c6:	d10b      	bne.n	800a2e0 <_free_r+0x70>
 800a2c8:	6824      	ldr	r4, [r4, #0]
 800a2ca:	4421      	add	r1, r4
 800a2cc:	1854      	adds	r4, r2, r1
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	6011      	str	r1, [r2, #0]
 800a2d2:	d1e0      	bne.n	800a296 <_free_r+0x26>
 800a2d4:	681c      	ldr	r4, [r3, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	6053      	str	r3, [r2, #4]
 800a2da:	4421      	add	r1, r4
 800a2dc:	6011      	str	r1, [r2, #0]
 800a2de:	e7da      	b.n	800a296 <_free_r+0x26>
 800a2e0:	d902      	bls.n	800a2e8 <_free_r+0x78>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	e7d6      	b.n	800a296 <_free_r+0x26>
 800a2e8:	6825      	ldr	r5, [r4, #0]
 800a2ea:	1961      	adds	r1, r4, r5
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	bf04      	itt	eq
 800a2f0:	6819      	ldreq	r1, [r3, #0]
 800a2f2:	685b      	ldreq	r3, [r3, #4]
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	bf04      	itt	eq
 800a2f8:	1949      	addeq	r1, r1, r5
 800a2fa:	6021      	streq	r1, [r4, #0]
 800a2fc:	6054      	str	r4, [r2, #4]
 800a2fe:	e7ca      	b.n	800a296 <_free_r+0x26>
 800a300:	b003      	add	sp, #12
 800a302:	bd30      	pop	{r4, r5, pc}
 800a304:	2000080c 	.word	0x2000080c

0800a308 <sbrk_aligned>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	4e0e      	ldr	r6, [pc, #56]	; (800a344 <sbrk_aligned+0x3c>)
 800a30c:	460c      	mov	r4, r1
 800a30e:	6831      	ldr	r1, [r6, #0]
 800a310:	4605      	mov	r5, r0
 800a312:	b911      	cbnz	r1, 800a31a <sbrk_aligned+0x12>
 800a314:	f000 f8bc 	bl	800a490 <_sbrk_r>
 800a318:	6030      	str	r0, [r6, #0]
 800a31a:	4621      	mov	r1, r4
 800a31c:	4628      	mov	r0, r5
 800a31e:	f000 f8b7 	bl	800a490 <_sbrk_r>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	d00a      	beq.n	800a33c <sbrk_aligned+0x34>
 800a326:	1cc4      	adds	r4, r0, #3
 800a328:	f024 0403 	bic.w	r4, r4, #3
 800a32c:	42a0      	cmp	r0, r4
 800a32e:	d007      	beq.n	800a340 <sbrk_aligned+0x38>
 800a330:	1a21      	subs	r1, r4, r0
 800a332:	4628      	mov	r0, r5
 800a334:	f000 f8ac 	bl	800a490 <_sbrk_r>
 800a338:	3001      	adds	r0, #1
 800a33a:	d101      	bne.n	800a340 <sbrk_aligned+0x38>
 800a33c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a340:	4620      	mov	r0, r4
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	20000810 	.word	0x20000810

0800a348 <_malloc_r>:
 800a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34c:	1ccd      	adds	r5, r1, #3
 800a34e:	f025 0503 	bic.w	r5, r5, #3
 800a352:	3508      	adds	r5, #8
 800a354:	2d0c      	cmp	r5, #12
 800a356:	bf38      	it	cc
 800a358:	250c      	movcc	r5, #12
 800a35a:	2d00      	cmp	r5, #0
 800a35c:	4607      	mov	r7, r0
 800a35e:	db01      	blt.n	800a364 <_malloc_r+0x1c>
 800a360:	42a9      	cmp	r1, r5
 800a362:	d905      	bls.n	800a370 <_malloc_r+0x28>
 800a364:	230c      	movs	r3, #12
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	2600      	movs	r6, #0
 800a36a:	4630      	mov	r0, r6
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	4e2e      	ldr	r6, [pc, #184]	; (800a42c <_malloc_r+0xe4>)
 800a372:	f000 f89d 	bl	800a4b0 <__malloc_lock>
 800a376:	6833      	ldr	r3, [r6, #0]
 800a378:	461c      	mov	r4, r3
 800a37a:	bb34      	cbnz	r4, 800a3ca <_malloc_r+0x82>
 800a37c:	4629      	mov	r1, r5
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff ffc2 	bl	800a308 <sbrk_aligned>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	4604      	mov	r4, r0
 800a388:	d14d      	bne.n	800a426 <_malloc_r+0xde>
 800a38a:	6834      	ldr	r4, [r6, #0]
 800a38c:	4626      	mov	r6, r4
 800a38e:	2e00      	cmp	r6, #0
 800a390:	d140      	bne.n	800a414 <_malloc_r+0xcc>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	4631      	mov	r1, r6
 800a396:	4638      	mov	r0, r7
 800a398:	eb04 0803 	add.w	r8, r4, r3
 800a39c:	f000 f878 	bl	800a490 <_sbrk_r>
 800a3a0:	4580      	cmp	r8, r0
 800a3a2:	d13a      	bne.n	800a41a <_malloc_r+0xd2>
 800a3a4:	6821      	ldr	r1, [r4, #0]
 800a3a6:	3503      	adds	r5, #3
 800a3a8:	1a6d      	subs	r5, r5, r1
 800a3aa:	f025 0503 	bic.w	r5, r5, #3
 800a3ae:	3508      	adds	r5, #8
 800a3b0:	2d0c      	cmp	r5, #12
 800a3b2:	bf38      	it	cc
 800a3b4:	250c      	movcc	r5, #12
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ffa5 	bl	800a308 <sbrk_aligned>
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d02b      	beq.n	800a41a <_malloc_r+0xd2>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	442b      	add	r3, r5
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	e00e      	b.n	800a3e8 <_malloc_r+0xa0>
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	1b52      	subs	r2, r2, r5
 800a3ce:	d41e      	bmi.n	800a40e <_malloc_r+0xc6>
 800a3d0:	2a0b      	cmp	r2, #11
 800a3d2:	d916      	bls.n	800a402 <_malloc_r+0xba>
 800a3d4:	1961      	adds	r1, r4, r5
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	6025      	str	r5, [r4, #0]
 800a3da:	bf18      	it	ne
 800a3dc:	6059      	strne	r1, [r3, #4]
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	bf08      	it	eq
 800a3e2:	6031      	streq	r1, [r6, #0]
 800a3e4:	5162      	str	r2, [r4, r5]
 800a3e6:	604b      	str	r3, [r1, #4]
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f104 060b 	add.w	r6, r4, #11
 800a3ee:	f000 f865 	bl	800a4bc <__malloc_unlock>
 800a3f2:	f026 0607 	bic.w	r6, r6, #7
 800a3f6:	1d23      	adds	r3, r4, #4
 800a3f8:	1af2      	subs	r2, r6, r3
 800a3fa:	d0b6      	beq.n	800a36a <_malloc_r+0x22>
 800a3fc:	1b9b      	subs	r3, r3, r6
 800a3fe:	50a3      	str	r3, [r4, r2]
 800a400:	e7b3      	b.n	800a36a <_malloc_r+0x22>
 800a402:	6862      	ldr	r2, [r4, #4]
 800a404:	42a3      	cmp	r3, r4
 800a406:	bf0c      	ite	eq
 800a408:	6032      	streq	r2, [r6, #0]
 800a40a:	605a      	strne	r2, [r3, #4]
 800a40c:	e7ec      	b.n	800a3e8 <_malloc_r+0xa0>
 800a40e:	4623      	mov	r3, r4
 800a410:	6864      	ldr	r4, [r4, #4]
 800a412:	e7b2      	b.n	800a37a <_malloc_r+0x32>
 800a414:	4634      	mov	r4, r6
 800a416:	6876      	ldr	r6, [r6, #4]
 800a418:	e7b9      	b.n	800a38e <_malloc_r+0x46>
 800a41a:	230c      	movs	r3, #12
 800a41c:	603b      	str	r3, [r7, #0]
 800a41e:	4638      	mov	r0, r7
 800a420:	f000 f84c 	bl	800a4bc <__malloc_unlock>
 800a424:	e7a1      	b.n	800a36a <_malloc_r+0x22>
 800a426:	6025      	str	r5, [r4, #0]
 800a428:	e7de      	b.n	800a3e8 <_malloc_r+0xa0>
 800a42a:	bf00      	nop
 800a42c:	2000080c 	.word	0x2000080c

0800a430 <_realloc_r>:
 800a430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a434:	4680      	mov	r8, r0
 800a436:	4614      	mov	r4, r2
 800a438:	460e      	mov	r6, r1
 800a43a:	b921      	cbnz	r1, 800a446 <_realloc_r+0x16>
 800a43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	4611      	mov	r1, r2
 800a442:	f7ff bf81 	b.w	800a348 <_malloc_r>
 800a446:	b92a      	cbnz	r2, 800a454 <_realloc_r+0x24>
 800a448:	f7ff ff12 	bl	800a270 <_free_r>
 800a44c:	4625      	mov	r5, r4
 800a44e:	4628      	mov	r0, r5
 800a450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a454:	f000 f838 	bl	800a4c8 <_malloc_usable_size_r>
 800a458:	4284      	cmp	r4, r0
 800a45a:	4607      	mov	r7, r0
 800a45c:	d802      	bhi.n	800a464 <_realloc_r+0x34>
 800a45e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a462:	d812      	bhi.n	800a48a <_realloc_r+0x5a>
 800a464:	4621      	mov	r1, r4
 800a466:	4640      	mov	r0, r8
 800a468:	f7ff ff6e 	bl	800a348 <_malloc_r>
 800a46c:	4605      	mov	r5, r0
 800a46e:	2800      	cmp	r0, #0
 800a470:	d0ed      	beq.n	800a44e <_realloc_r+0x1e>
 800a472:	42bc      	cmp	r4, r7
 800a474:	4622      	mov	r2, r4
 800a476:	4631      	mov	r1, r6
 800a478:	bf28      	it	cs
 800a47a:	463a      	movcs	r2, r7
 800a47c:	f7ff fbb8 	bl	8009bf0 <memcpy>
 800a480:	4631      	mov	r1, r6
 800a482:	4640      	mov	r0, r8
 800a484:	f7ff fef4 	bl	800a270 <_free_r>
 800a488:	e7e1      	b.n	800a44e <_realloc_r+0x1e>
 800a48a:	4635      	mov	r5, r6
 800a48c:	e7df      	b.n	800a44e <_realloc_r+0x1e>
	...

0800a490 <_sbrk_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d06      	ldr	r5, [pc, #24]	; (800a4ac <_sbrk_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7fb faf6 	bl	8005a8c <_sbrk>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_sbrk_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_sbrk_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20000814 	.word	0x20000814

0800a4b0 <__malloc_lock>:
 800a4b0:	4801      	ldr	r0, [pc, #4]	; (800a4b8 <__malloc_lock+0x8>)
 800a4b2:	f000 b811 	b.w	800a4d8 <__retarget_lock_acquire_recursive>
 800a4b6:	bf00      	nop
 800a4b8:	20000818 	.word	0x20000818

0800a4bc <__malloc_unlock>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__malloc_unlock+0x8>)
 800a4be:	f000 b80c 	b.w	800a4da <__retarget_lock_release_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	20000818 	.word	0x20000818

0800a4c8 <_malloc_usable_size_r>:
 800a4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4cc:	1f18      	subs	r0, r3, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfbc      	itt	lt
 800a4d2:	580b      	ldrlt	r3, [r1, r0]
 800a4d4:	18c0      	addlt	r0, r0, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <__retarget_lock_acquire_recursive>:
 800a4d8:	4770      	bx	lr

0800a4da <__retarget_lock_release_recursive>:
 800a4da:	4770      	bx	lr

0800a4dc <_init>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	bf00      	nop
 800a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e2:	bc08      	pop	{r3}
 800a4e4:	469e      	mov	lr, r3
 800a4e6:	4770      	bx	lr

0800a4e8 <_fini>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	bf00      	nop
 800a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ee:	bc08      	pop	{r3}
 800a4f0:	469e      	mov	lr, r3
 800a4f2:	4770      	bx	lr
 800a4f4:	0000      	movs	r0, r0
	...
