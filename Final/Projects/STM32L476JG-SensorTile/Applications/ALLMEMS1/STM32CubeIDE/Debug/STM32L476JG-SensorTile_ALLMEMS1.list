
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  08004190  08004190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b4d8  0800b4d8  000084d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b818  0800b818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b820  0800b820  00008820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b824  0800b824  00008824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800b828  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000928  20000080  0800b8a8  00009080  2**2
                  ALLOC
  8 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  9 .bss2         00000000  20000080  20000080  00009080  2**0
                  CONTENTS
 10 ._user_heap_stack 00003000  200009a8  200009a8  000099a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002930f  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000a8  00000000  00000000  000323bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000231a3  00000000  00000000  00032465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000437e  00000000  00000000  00055608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001990  00000000  00000000  00059988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0011ec48  00000000  00000000  0005b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000138d  00000000  00000000  00179f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000113b9  00000000  00000000  0017b2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fb98  00000000  00000000  0018c6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bc23e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005194  00000000  00000000  001bc284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	@ (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	@ (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000080 	.word	0x20000080
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800b4c0 	.word	0x0800b4c0

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	@ (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	@ (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	20000084 	.word	0x20000084
 80041cc:	0800b4c0 	.word	0x0800b4c0

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	@ 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_dmul>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80045ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80045f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045f6:	bf1d      	ittte	ne
 80045f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045fc:	ea94 0f0c 	teqne	r4, ip
 8004600:	ea95 0f0c 	teqne	r5, ip
 8004604:	f000 f8de 	bleq	80047c4 <__aeabi_dmul+0x1dc>
 8004608:	442c      	add	r4, r5
 800460a:	ea81 0603 	eor.w	r6, r1, r3
 800460e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800461a:	bf18      	it	ne
 800461c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004628:	d038      	beq.n	800469c <__aeabi_dmul+0xb4>
 800462a:	fba0 ce02 	umull	ip, lr, r0, r2
 800462e:	f04f 0500 	mov.w	r5, #0
 8004632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800463a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004646:	f09c 0f00 	teq	ip, #0
 800464a:	bf18      	it	ne
 800464c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800465c:	d204      	bcs.n	8004668 <__aeabi_dmul+0x80>
 800465e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004662:	416d      	adcs	r5, r5
 8004664:	eb46 0606 	adc.w	r6, r6, r6
 8004668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800466c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800467c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004680:	bf88      	it	hi
 8004682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004686:	d81e      	bhi.n	80046c6 <__aeabi_dmul+0xde>
 8004688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800468c:	bf08      	it	eq
 800468e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004692:	f150 0000 	adcs.w	r0, r0, #0
 8004696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80046a0:	ea46 0101 	orr.w	r1, r6, r1
 80046a4:	ea40 0002 	orr.w	r0, r0, r2
 80046a8:	ea81 0103 	eor.w	r1, r1, r3
 80046ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046b0:	bfc2      	ittt	gt
 80046b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ba:	bd70      	popgt	{r4, r5, r6, pc}
 80046bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80046c0:	f04f 0e00 	mov.w	lr, #0
 80046c4:	3c01      	subs	r4, #1
 80046c6:	f300 80ab 	bgt.w	8004820 <__aeabi_dmul+0x238>
 80046ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80046ce:	bfde      	ittt	le
 80046d0:	2000      	movle	r0, #0
 80046d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80046d6:	bd70      	pople	{r4, r5, r6, pc}
 80046d8:	f1c4 0400 	rsb	r4, r4, #0
 80046dc:	3c20      	subs	r4, #32
 80046de:	da35      	bge.n	800474c <__aeabi_dmul+0x164>
 80046e0:	340c      	adds	r4, #12
 80046e2:	dc1b      	bgt.n	800471c <__aeabi_dmul+0x134>
 80046e4:	f104 0414 	add.w	r4, r4, #20
 80046e8:	f1c4 0520 	rsb	r5, r4, #32
 80046ec:	fa00 f305 	lsl.w	r3, r0, r5
 80046f0:	fa20 f004 	lsr.w	r0, r0, r4
 80046f4:	fa01 f205 	lsl.w	r2, r1, r5
 80046f8:	ea40 0002 	orr.w	r0, r0, r2
 80046fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8004700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004708:	fa21 f604 	lsr.w	r6, r1, r4
 800470c:	eb42 0106 	adc.w	r1, r2, r6
 8004710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004714:	bf08      	it	eq
 8004716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f1c4 040c 	rsb	r4, r4, #12
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f304 	lsl.w	r3, r0, r4
 8004728:	fa20 f005 	lsr.w	r0, r0, r5
 800472c:	fa01 f204 	lsl.w	r2, r1, r4
 8004730:	ea40 0002 	orr.w	r0, r0, r2
 8004734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800473c:	f141 0100 	adc.w	r1, r1, #0
 8004740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004744:	bf08      	it	eq
 8004746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f1c4 0520 	rsb	r5, r4, #32
 8004750:	fa00 f205 	lsl.w	r2, r0, r5
 8004754:	ea4e 0e02 	orr.w	lr, lr, r2
 8004758:	fa20 f304 	lsr.w	r3, r0, r4
 800475c:	fa01 f205 	lsl.w	r2, r1, r5
 8004760:	ea43 0302 	orr.w	r3, r3, r2
 8004764:	fa21 f004 	lsr.w	r0, r1, r4
 8004768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800476c:	fa21 f204 	lsr.w	r2, r1, r4
 8004770:	ea20 0002 	bic.w	r0, r0, r2
 8004774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800477c:	bf08      	it	eq
 800477e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f094 0f00 	teq	r4, #0
 8004788:	d10f      	bne.n	80047aa <__aeabi_dmul+0x1c2>
 800478a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800478e:	0040      	lsls	r0, r0, #1
 8004790:	eb41 0101 	adc.w	r1, r1, r1
 8004794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004798:	bf08      	it	eq
 800479a:	3c01      	subeq	r4, #1
 800479c:	d0f7      	beq.n	800478e <__aeabi_dmul+0x1a6>
 800479e:	ea41 0106 	orr.w	r1, r1, r6
 80047a2:	f095 0f00 	teq	r5, #0
 80047a6:	bf18      	it	ne
 80047a8:	4770      	bxne	lr
 80047aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	eb43 0303 	adc.w	r3, r3, r3
 80047b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80047b8:	bf08      	it	eq
 80047ba:	3d01      	subeq	r5, #1
 80047bc:	d0f7      	beq.n	80047ae <__aeabi_dmul+0x1c6>
 80047be:	ea43 0306 	orr.w	r3, r3, r6
 80047c2:	4770      	bx	lr
 80047c4:	ea94 0f0c 	teq	r4, ip
 80047c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047cc:	bf18      	it	ne
 80047ce:	ea95 0f0c 	teqne	r5, ip
 80047d2:	d00c      	beq.n	80047ee <__aeabi_dmul+0x206>
 80047d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047d8:	bf18      	it	ne
 80047da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047de:	d1d1      	bne.n	8004784 <__aeabi_dmul+0x19c>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047f2:	bf06      	itte	eq
 80047f4:	4610      	moveq	r0, r2
 80047f6:	4619      	moveq	r1, r3
 80047f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047fc:	d019      	beq.n	8004832 <__aeabi_dmul+0x24a>
 80047fe:	ea94 0f0c 	teq	r4, ip
 8004802:	d102      	bne.n	800480a <__aeabi_dmul+0x222>
 8004804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004808:	d113      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800480a:	ea95 0f0c 	teq	r5, ip
 800480e:	d105      	bne.n	800481c <__aeabi_dmul+0x234>
 8004810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004814:	bf1c      	itt	ne
 8004816:	4610      	movne	r0, r2
 8004818:	4619      	movne	r1, r3
 800481a:	d10a      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800481c:	ea81 0103 	eor.w	r1, r1, r3
 8004820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800483a:	bd70      	pop	{r4, r5, r6, pc}

0800483c <__aeabi_ddiv>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800484a:	bf1d      	ittte	ne
 800484c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004850:	ea94 0f0c 	teqne	r4, ip
 8004854:	ea95 0f0c 	teqne	r5, ip
 8004858:	f000 f8a7 	bleq	80049aa <__aeabi_ddiv+0x16e>
 800485c:	eba4 0405 	sub.w	r4, r4, r5
 8004860:	ea81 0e03 	eor.w	lr, r1, r3
 8004864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800486c:	f000 8088 	beq.w	8004980 <__aeabi_ddiv+0x144>
 8004870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800487c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800488c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004894:	429d      	cmp	r5, r3
 8004896:	bf08      	it	eq
 8004898:	4296      	cmpeq	r6, r2
 800489a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800489e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80048a2:	d202      	bcs.n	80048aa <__aeabi_ddiv+0x6e>
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	1ab6      	subs	r6, r6, r2
 80048ac:	eb65 0503 	sbc.w	r5, r5, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80048ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80048be:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048c6:	bf22      	ittt	cs
 80048c8:	1ab6      	subcs	r6, r6, r2
 80048ca:	4675      	movcs	r5, lr
 80048cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80048da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048de:	bf22      	ittt	cs
 80048e0:	1ab6      	subcs	r6, r6, r2
 80048e2:	4675      	movcs	r5, lr
 80048e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80048f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048f6:	bf22      	ittt	cs
 80048f8:	1ab6      	subcs	r6, r6, r2
 80048fa:	4675      	movcs	r5, lr
 80048fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	ea4f 0232 	mov.w	r2, r2, rrx
 8004906:	ebb6 0e02 	subs.w	lr, r6, r2
 800490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800490e:	bf22      	ittt	cs
 8004910:	1ab6      	subcs	r6, r6, r2
 8004912:	4675      	movcs	r5, lr
 8004914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004918:	ea55 0e06 	orrs.w	lr, r5, r6
 800491c:	d018      	beq.n	8004950 <__aeabi_ddiv+0x114>
 800491e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800492e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800493a:	d1c0      	bne.n	80048be <__aeabi_ddiv+0x82>
 800493c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004940:	d10b      	bne.n	800495a <__aeabi_ddiv+0x11e>
 8004942:	ea41 0100 	orr.w	r1, r1, r0
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800494e:	e7b6      	b.n	80048be <__aeabi_ddiv+0x82>
 8004950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004954:	bf04      	itt	eq
 8004956:	4301      	orreq	r1, r0
 8004958:	2000      	moveq	r0, #0
 800495a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800495e:	bf88      	it	hi
 8004960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004964:	f63f aeaf 	bhi.w	80046c6 <__aeabi_dmul+0xde>
 8004968:	ebb5 0c03 	subs.w	ip, r5, r3
 800496c:	bf04      	itt	eq
 800496e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004976:	f150 0000 	adcs.w	r0, r0, #0
 800497a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800498c:	bfc2      	ittt	gt
 800498e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004996:	bd70      	popgt	{r4, r5, r6, pc}
 8004998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800499c:	f04f 0e00 	mov.w	lr, #0
 80049a0:	3c01      	subs	r4, #1
 80049a2:	e690      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049a4:	ea45 0e06 	orr.w	lr, r5, r6
 80049a8:	e68d      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049ae:	ea94 0f0c 	teq	r4, ip
 80049b2:	bf08      	it	eq
 80049b4:	ea95 0f0c 	teqeq	r5, ip
 80049b8:	f43f af3b 	beq.w	8004832 <__aeabi_dmul+0x24a>
 80049bc:	ea94 0f0c 	teq	r4, ip
 80049c0:	d10a      	bne.n	80049d8 <__aeabi_ddiv+0x19c>
 80049c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049c6:	f47f af34 	bne.w	8004832 <__aeabi_dmul+0x24a>
 80049ca:	ea95 0f0c 	teq	r5, ip
 80049ce:	f47f af25 	bne.w	800481c <__aeabi_dmul+0x234>
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	e72c      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049d8:	ea95 0f0c 	teq	r5, ip
 80049dc:	d106      	bne.n	80049ec <__aeabi_ddiv+0x1b0>
 80049de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049e2:	f43f aefd 	beq.w	80047e0 <__aeabi_dmul+0x1f8>
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	e722      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049f0:	bf18      	it	ne
 80049f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049f6:	f47f aec5 	bne.w	8004784 <__aeabi_dmul+0x19c>
 80049fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049fe:	f47f af0d 	bne.w	800481c <__aeabi_dmul+0x234>
 8004a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a06:	f47f aeeb 	bne.w	80047e0 <__aeabi_dmul+0x1f8>
 8004a0a:	e712      	b.n	8004832 <__aeabi_dmul+0x24a>

08004a0c <__gedf2>:
 8004a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a10:	e006      	b.n	8004a20 <__cmpdf2+0x4>
 8004a12:	bf00      	nop

08004a14 <__ledf2>:
 8004a14:	f04f 0c01 	mov.w	ip, #1
 8004a18:	e002      	b.n	8004a20 <__cmpdf2+0x4>
 8004a1a:	bf00      	nop

08004a1c <__cmpdf2>:
 8004a1c:	f04f 0c01 	mov.w	ip, #1
 8004a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a30:	bf18      	it	ne
 8004a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a36:	d01b      	beq.n	8004a70 <__cmpdf2+0x54>
 8004a38:	b001      	add	sp, #4
 8004a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a44:	ea91 0f03 	teqne	r1, r3
 8004a48:	bf02      	ittt	eq
 8004a4a:	ea90 0f02 	teqeq	r0, r2
 8004a4e:	2000      	moveq	r0, #0
 8004a50:	4770      	bxeq	lr
 8004a52:	f110 0f00 	cmn.w	r0, #0
 8004a56:	ea91 0f03 	teq	r1, r3
 8004a5a:	bf58      	it	pl
 8004a5c:	4299      	cmppl	r1, r3
 8004a5e:	bf08      	it	eq
 8004a60:	4290      	cmpeq	r0, r2
 8004a62:	bf2c      	ite	cs
 8004a64:	17d8      	asrcs	r0, r3, #31
 8004a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a6a:	f040 0001 	orr.w	r0, r0, #1
 8004a6e:	4770      	bx	lr
 8004a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a78:	d102      	bne.n	8004a80 <__cmpdf2+0x64>
 8004a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a7e:	d107      	bne.n	8004a90 <__cmpdf2+0x74>
 8004a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a88:	d1d6      	bne.n	8004a38 <__cmpdf2+0x1c>
 8004a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a8e:	d0d3      	beq.n	8004a38 <__cmpdf2+0x1c>
 8004a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <__aeabi_cdrcmple>:
 8004a98:	4684      	mov	ip, r0
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4662      	mov	r2, ip
 8004a9e:	468c      	mov	ip, r1
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	e000      	b.n	8004aa8 <__aeabi_cdcmpeq>
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_cdcmpeq>:
 8004aa8:	b501      	push	{r0, lr}
 8004aaa:	f7ff ffb7 	bl	8004a1c <__cmpdf2>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	bf48      	it	mi
 8004ab2:	f110 0f00 	cmnmi.w	r0, #0
 8004ab6:	bd01      	pop	{r0, pc}

08004ab8 <__aeabi_dcmpeq>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff fff4 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2001      	moveq	r0, #1
 8004ac4:	2000      	movne	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmplt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffea 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmple>:
 8004ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae4:	f7ff ffe0 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ae8:	bf94      	ite	ls
 8004aea:	2001      	movls	r0, #1
 8004aec:	2000      	movhi	r0, #0
 8004aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004af2:	bf00      	nop

08004af4 <__aeabi_dcmpge>:
 8004af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004af8:	f7ff ffce 	bl	8004a98 <__aeabi_cdrcmple>
 8004afc:	bf94      	ite	ls
 8004afe:	2001      	movls	r0, #1
 8004b00:	2000      	movhi	r0, #0
 8004b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b06:	bf00      	nop

08004b08 <__aeabi_dcmpgt>:
 8004b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b0c:	f7ff ffc4 	bl	8004a98 <__aeabi_cdrcmple>
 8004b10:	bf34      	ite	cc
 8004b12:	2001      	movcc	r0, #1
 8004b14:	2000      	movcs	r0, #0
 8004b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b1a:	bf00      	nop

08004b1c <__aeabi_d2iz>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8004b24:	d215      	bcs.n	8004b52 <__aeabi_d2iz+0x36>
 8004b26:	d511      	bpl.n	8004b4c <__aeabi_d2iz+0x30>
 8004b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8004b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b30:	d912      	bls.n	8004b58 <__aeabi_d2iz+0x3c>
 8004b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004b42:	fa23 f002 	lsr.w	r0, r3, r2
 8004b46:	bf18      	it	ne
 8004b48:	4240      	negne	r0, r0
 8004b4a:	4770      	bx	lr
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	4770      	bx	lr
 8004b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004b56:	d105      	bne.n	8004b64 <__aeabi_d2iz+0x48>
 8004b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004b5c:	bf08      	it	eq
 8004b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004b62:	4770      	bx	lr
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <__aeabi_uldivmod>:
 8004b6c:	b953      	cbnz	r3, 8004b84 <__aeabi_uldivmod+0x18>
 8004b6e:	b94a      	cbnz	r2, 8004b84 <__aeabi_uldivmod+0x18>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	bf08      	it	eq
 8004b74:	2800      	cmpeq	r0, #0
 8004b76:	bf1c      	itt	ne
 8004b78:	f04f 31ff 	movne.w	r1, #4294967295
 8004b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8004b80:	f000 b988 	b.w	8004e94 <__aeabi_idiv0>
 8004b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8004b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004b8c:	f000 f806 	bl	8004b9c <__udivmoddi4>
 8004b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr

08004b9c <__udivmoddi4>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	9d08      	ldr	r5, [sp, #32]
 8004ba2:	468e      	mov	lr, r1
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4688      	mov	r8, r1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d14a      	bne.n	8004c42 <__udivmoddi4+0xa6>
 8004bac:	428a      	cmp	r2, r1
 8004bae:	4617      	mov	r7, r2
 8004bb0:	d962      	bls.n	8004c78 <__udivmoddi4+0xdc>
 8004bb2:	fab2 f682 	clz	r6, r2
 8004bb6:	b14e      	cbz	r6, 8004bcc <__udivmoddi4+0x30>
 8004bb8:	f1c6 0320 	rsb	r3, r6, #32
 8004bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8004bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8004bc4:	40b7      	lsls	r7, r6
 8004bc6:	ea43 0808 	orr.w	r8, r3, r8
 8004bca:	40b4      	lsls	r4, r6
 8004bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004bd0:	fa1f fc87 	uxth.w	ip, r7
 8004bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8004bd8:	0c23      	lsrs	r3, r4, #16
 8004bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8004bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004be2:	fb01 f20c 	mul.w	r2, r1, ip
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d909      	bls.n	8004bfe <__udivmoddi4+0x62>
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8004bf0:	f080 80ea 	bcs.w	8004dc8 <__udivmoddi4+0x22c>
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	f240 80e7 	bls.w	8004dc8 <__udivmoddi4+0x22c>
 8004bfa:	3902      	subs	r1, #2
 8004bfc:	443b      	add	r3, r7
 8004bfe:	1a9a      	subs	r2, r3, r2
 8004c00:	b2a3      	uxth	r3, r4
 8004c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8004c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8004c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8004c12:	459c      	cmp	ip, r3
 8004c14:	d909      	bls.n	8004c2a <__udivmoddi4+0x8e>
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8004c1c:	f080 80d6 	bcs.w	8004dcc <__udivmoddi4+0x230>
 8004c20:	459c      	cmp	ip, r3
 8004c22:	f240 80d3 	bls.w	8004dcc <__udivmoddi4+0x230>
 8004c26:	443b      	add	r3, r7
 8004c28:	3802      	subs	r0, #2
 8004c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004c2e:	eba3 030c 	sub.w	r3, r3, ip
 8004c32:	2100      	movs	r1, #0
 8004c34:	b11d      	cbz	r5, 8004c3e <__udivmoddi4+0xa2>
 8004c36:	40f3      	lsrs	r3, r6
 8004c38:	2200      	movs	r2, #0
 8004c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8004c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c42:	428b      	cmp	r3, r1
 8004c44:	d905      	bls.n	8004c52 <__udivmoddi4+0xb6>
 8004c46:	b10d      	cbz	r5, 8004c4c <__udivmoddi4+0xb0>
 8004c48:	e9c5 0100 	strd	r0, r1, [r5]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4608      	mov	r0, r1
 8004c50:	e7f5      	b.n	8004c3e <__udivmoddi4+0xa2>
 8004c52:	fab3 f183 	clz	r1, r3
 8004c56:	2900      	cmp	r1, #0
 8004c58:	d146      	bne.n	8004ce8 <__udivmoddi4+0x14c>
 8004c5a:	4573      	cmp	r3, lr
 8004c5c:	d302      	bcc.n	8004c64 <__udivmoddi4+0xc8>
 8004c5e:	4282      	cmp	r2, r0
 8004c60:	f200 8105 	bhi.w	8004e6e <__udivmoddi4+0x2d2>
 8004c64:	1a84      	subs	r4, r0, r2
 8004c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	d0e5      	beq.n	8004c3e <__udivmoddi4+0xa2>
 8004c72:	e9c5 4800 	strd	r4, r8, [r5]
 8004c76:	e7e2      	b.n	8004c3e <__udivmoddi4+0xa2>
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	f000 8090 	beq.w	8004d9e <__udivmoddi4+0x202>
 8004c7e:	fab2 f682 	clz	r6, r2
 8004c82:	2e00      	cmp	r6, #0
 8004c84:	f040 80a4 	bne.w	8004dd0 <__udivmoddi4+0x234>
 8004c88:	1a8a      	subs	r2, r1, r2
 8004c8a:	0c03      	lsrs	r3, r0, #16
 8004c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004c90:	b280      	uxth	r0, r0
 8004c92:	b2bc      	uxth	r4, r7
 8004c94:	2101      	movs	r1, #1
 8004c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8004c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8004c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d907      	bls.n	8004cba <__udivmoddi4+0x11e>
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8004cb0:	d202      	bcs.n	8004cb8 <__udivmoddi4+0x11c>
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	f200 80e0 	bhi.w	8004e78 <__udivmoddi4+0x2dc>
 8004cb8:	46c4      	mov	ip, r8
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8004cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8004cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8004cc8:	fb02 f404 	mul.w	r4, r2, r4
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	d907      	bls.n	8004ce0 <__udivmoddi4+0x144>
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8004cd6:	d202      	bcs.n	8004cde <__udivmoddi4+0x142>
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	f200 80ca 	bhi.w	8004e72 <__udivmoddi4+0x2d6>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	1b1b      	subs	r3, r3, r4
 8004ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8004ce6:	e7a5      	b.n	8004c34 <__udivmoddi4+0x98>
 8004ce8:	f1c1 0620 	rsb	r6, r1, #32
 8004cec:	408b      	lsls	r3, r1
 8004cee:	fa22 f706 	lsr.w	r7, r2, r6
 8004cf2:	431f      	orrs	r7, r3
 8004cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8004cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8004cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8004d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8004d04:	4323      	orrs	r3, r4
 8004d06:	fa00 f801 	lsl.w	r8, r0, r1
 8004d0a:	fa1f fc87 	uxth.w	ip, r7
 8004d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8004d12:	0c1c      	lsrs	r4, r3, #16
 8004d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8004d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8004d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8004d20:	45a6      	cmp	lr, r4
 8004d22:	fa02 f201 	lsl.w	r2, r2, r1
 8004d26:	d909      	bls.n	8004d3c <__udivmoddi4+0x1a0>
 8004d28:	193c      	adds	r4, r7, r4
 8004d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8004d2e:	f080 809c 	bcs.w	8004e6a <__udivmoddi4+0x2ce>
 8004d32:	45a6      	cmp	lr, r4
 8004d34:	f240 8099 	bls.w	8004e6a <__udivmoddi4+0x2ce>
 8004d38:	3802      	subs	r0, #2
 8004d3a:	443c      	add	r4, r7
 8004d3c:	eba4 040e 	sub.w	r4, r4, lr
 8004d40:	fa1f fe83 	uxth.w	lr, r3
 8004d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8004d48:	fb09 4413 	mls	r4, r9, r3, r4
 8004d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8004d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8004d54:	45a4      	cmp	ip, r4
 8004d56:	d908      	bls.n	8004d6a <__udivmoddi4+0x1ce>
 8004d58:	193c      	adds	r4, r7, r4
 8004d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8004d5e:	f080 8082 	bcs.w	8004e66 <__udivmoddi4+0x2ca>
 8004d62:	45a4      	cmp	ip, r4
 8004d64:	d97f      	bls.n	8004e66 <__udivmoddi4+0x2ca>
 8004d66:	3b02      	subs	r3, #2
 8004d68:	443c      	add	r4, r7
 8004d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004d6e:	eba4 040c 	sub.w	r4, r4, ip
 8004d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8004d76:	4564      	cmp	r4, ip
 8004d78:	4673      	mov	r3, lr
 8004d7a:	46e1      	mov	r9, ip
 8004d7c:	d362      	bcc.n	8004e44 <__udivmoddi4+0x2a8>
 8004d7e:	d05f      	beq.n	8004e40 <__udivmoddi4+0x2a4>
 8004d80:	b15d      	cbz	r5, 8004d9a <__udivmoddi4+0x1fe>
 8004d82:	ebb8 0203 	subs.w	r2, r8, r3
 8004d86:	eb64 0409 	sbc.w	r4, r4, r9
 8004d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8004d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8004d92:	431e      	orrs	r6, r3
 8004d94:	40cc      	lsrs	r4, r1
 8004d96:	e9c5 6400 	strd	r6, r4, [r5]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	e74f      	b.n	8004c3e <__udivmoddi4+0xa2>
 8004d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8004da2:	0c01      	lsrs	r1, r0, #16
 8004da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8004da8:	b280      	uxth	r0, r0
 8004daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8004dae:	463b      	mov	r3, r7
 8004db0:	4638      	mov	r0, r7
 8004db2:	463c      	mov	r4, r7
 8004db4:	46b8      	mov	r8, r7
 8004db6:	46be      	mov	lr, r7
 8004db8:	2620      	movs	r6, #32
 8004dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8004dbe:	eba2 0208 	sub.w	r2, r2, r8
 8004dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8004dc6:	e766      	b.n	8004c96 <__udivmoddi4+0xfa>
 8004dc8:	4601      	mov	r1, r0
 8004dca:	e718      	b.n	8004bfe <__udivmoddi4+0x62>
 8004dcc:	4610      	mov	r0, r2
 8004dce:	e72c      	b.n	8004c2a <__udivmoddi4+0x8e>
 8004dd0:	f1c6 0220 	rsb	r2, r6, #32
 8004dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8004dd8:	40b7      	lsls	r7, r6
 8004dda:	40b1      	lsls	r1, r6
 8004ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8004de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004de4:	430a      	orrs	r2, r1
 8004de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8004dea:	b2bc      	uxth	r4, r7
 8004dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8004df0:	0c11      	lsrs	r1, r2, #16
 8004df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004df6:	fb08 f904 	mul.w	r9, r8, r4
 8004dfa:	40b0      	lsls	r0, r6
 8004dfc:	4589      	cmp	r9, r1
 8004dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8004e02:	b280      	uxth	r0, r0
 8004e04:	d93e      	bls.n	8004e84 <__udivmoddi4+0x2e8>
 8004e06:	1879      	adds	r1, r7, r1
 8004e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8004e0c:	d201      	bcs.n	8004e12 <__udivmoddi4+0x276>
 8004e0e:	4589      	cmp	r9, r1
 8004e10:	d81f      	bhi.n	8004e52 <__udivmoddi4+0x2b6>
 8004e12:	eba1 0109 	sub.w	r1, r1, r9
 8004e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8004e1a:	fb09 f804 	mul.w	r8, r9, r4
 8004e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8004e22:	b292      	uxth	r2, r2
 8004e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e28:	4542      	cmp	r2, r8
 8004e2a:	d229      	bcs.n	8004e80 <__udivmoddi4+0x2e4>
 8004e2c:	18ba      	adds	r2, r7, r2
 8004e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8004e32:	d2c4      	bcs.n	8004dbe <__udivmoddi4+0x222>
 8004e34:	4542      	cmp	r2, r8
 8004e36:	d2c2      	bcs.n	8004dbe <__udivmoddi4+0x222>
 8004e38:	f1a9 0102 	sub.w	r1, r9, #2
 8004e3c:	443a      	add	r2, r7
 8004e3e:	e7be      	b.n	8004dbe <__udivmoddi4+0x222>
 8004e40:	45f0      	cmp	r8, lr
 8004e42:	d29d      	bcs.n	8004d80 <__udivmoddi4+0x1e4>
 8004e44:	ebbe 0302 	subs.w	r3, lr, r2
 8004e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8004e4c:	3801      	subs	r0, #1
 8004e4e:	46e1      	mov	r9, ip
 8004e50:	e796      	b.n	8004d80 <__udivmoddi4+0x1e4>
 8004e52:	eba7 0909 	sub.w	r9, r7, r9
 8004e56:	4449      	add	r1, r9
 8004e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8004e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8004e60:	fb09 f804 	mul.w	r8, r9, r4
 8004e64:	e7db      	b.n	8004e1e <__udivmoddi4+0x282>
 8004e66:	4673      	mov	r3, lr
 8004e68:	e77f      	b.n	8004d6a <__udivmoddi4+0x1ce>
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	e766      	b.n	8004d3c <__udivmoddi4+0x1a0>
 8004e6e:	4608      	mov	r0, r1
 8004e70:	e6fd      	b.n	8004c6e <__udivmoddi4+0xd2>
 8004e72:	443b      	add	r3, r7
 8004e74:	3a02      	subs	r2, #2
 8004e76:	e733      	b.n	8004ce0 <__udivmoddi4+0x144>
 8004e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8004e7c:	443b      	add	r3, r7
 8004e7e:	e71c      	b.n	8004cba <__udivmoddi4+0x11e>
 8004e80:	4649      	mov	r1, r9
 8004e82:	e79c      	b.n	8004dbe <__udivmoddi4+0x222>
 8004e84:	eba1 0109 	sub.w	r1, r1, r9
 8004e88:	46c4      	mov	ip, r8
 8004e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8004e8e:	fb09 f804 	mul.w	r8, r9, r4
 8004e92:	e7c4      	b.n	8004e1e <__udivmoddi4+0x282>

08004e94 <__aeabi_idiv0>:
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ed0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e9e:	e003      	b.n	8004ea8 <LoopCopyDataInit>

08004ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ea6:	3104      	adds	r1, #4

08004ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ea8:	480b      	ldr	r0, [pc, #44]	@ (8004ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004eb0:	d3f6      	bcc.n	8004ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004eb4:	e002      	b.n	8004ebc <LoopFillZerobss>

08004eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004eb8:	f842 3b04 	str.w	r3, [r2], #4

08004ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8004ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ec0:	d3f9      	bcc.n	8004eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ec2:	f001 fdb1 	bl	8006a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ec6:	f005 fe8b 	bl	800abe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004eca:	f001 fa69 	bl	80063a0 <main>

08004ece <LoopForever>:

LoopForever:
    b LoopForever
 8004ece:	e7fe      	b.n	8004ece <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ed0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004ed4:	0800b828 	.word	0x0800b828
	ldr	r0, =_sdata
 8004ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004edc:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8004ee0:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8004ee4:	200009a8 	.word	0x200009a8

08004ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ee8:	e7fe      	b.n	8004ee8 <ADC1_2_IRQHandler>
	...

08004eec <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004eec:	4b03      	ldr	r3, [pc, #12]	@ (8004efc <GAP_ConnectionComplete_CB+0x10>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8004ef2:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 8004ef4:	4b02      	ldr	r3, [pc, #8]	@ (8004f00 <GAP_ConnectionComplete_CB+0x14>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
  


}
 8004efa:	4770      	bx	lr
 8004efc:	2000009c 	.word	0x2000009c
 8004f00:	200004a0 	.word	0x200004a0

08004f04 <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 8004f04:	b500      	push	{lr}
 8004f06:	b0c1      	sub	sp, #260	@ 0x104
  if (att_data[0] == 01) {
 8004f08:	7803      	ldrb	r3, [r0, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d011      	beq.n	8004f32 <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 8004f0e:	b32b      	cbz	r3, 8004f5c <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004f10:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <AccGyroMag_AttributeModified_CB+0x78>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f013 0f04 	tst.w	r3, #4
 8004f18:	d02e      	beq.n	8004f78 <AccGyroMag_AttributeModified_CB+0x74>
 8004f1a:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <AccGyroMag_AttributeModified_CB+0x7c>)
 8004f1c:	4919      	ldr	r1, [pc, #100]	@ (8004f84 <AccGyroMag_AttributeModified_CB+0x80>)
 8004f1e:	4668      	mov	r0, sp
 8004f20:	f005 fe2e 	bl	800ab80 <siprintf>
 8004f24:	b281      	uxth	r1, r0
 8004f26:	4668      	mov	r0, sp
 8004f28:	f000 fdb0 	bl	8005a8c <UART5_Transmit>

}
 8004f2c:	b041      	add	sp, #260	@ 0x104
 8004f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004f32:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <AccGyroMag_AttributeModified_CB+0x78>)
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004f3c:	210c      	movs	r1, #12
 8004f3e:	4812      	ldr	r0, [pc, #72]	@ (8004f88 <AccGyroMag_AttributeModified_CB+0x84>)
 8004f40:	f004 f8fc 	bl	800913c <HAL_TIM_OC_Start_IT>
 8004f44:	b938      	cbnz	r0, 8004f56 <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <AccGyroMag_AttributeModified_CB+0x84>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004f4c:	490f      	ldr	r1, [pc, #60]	@ (8004f8c <AccGyroMag_AttributeModified_CB+0x88>)
 8004f4e:	6809      	ldr	r1, [r1, #0]
 8004f50:	440b      	add	r3, r1
 8004f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f54:	e7dc      	b.n	8004f10 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004f56:	f001 f985 	bl	8006264 <Error_Handler>
 8004f5a:	e7f4      	b.n	8004f46 <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004f5c:	4a07      	ldr	r2, [pc, #28]	@ (8004f7c <AccGyroMag_AttributeModified_CB+0x78>)
 8004f5e:	6813      	ldr	r3, [r2, #0]
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004f66:	210c      	movs	r1, #12
 8004f68:	4807      	ldr	r0, [pc, #28]	@ (8004f88 <AccGyroMag_AttributeModified_CB+0x84>)
 8004f6a:	f004 f9cf 	bl	800930c <HAL_TIM_OC_Stop_IT>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d0ce      	beq.n	8004f10 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004f72:	f001 f977 	bl	8006264 <Error_Handler>
 8004f76:	e7cb      	b.n	8004f10 <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004f78:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <AccGyroMag_AttributeModified_CB+0x8c>)
 8004f7a:	e7cf      	b.n	8004f1c <AccGyroMag_AttributeModified_CB+0x18>
 8004f7c:	200004a0 	.word	0x200004a0
 8004f80:	0800b528 	.word	0x0800b528
 8004f84:	0800b538 	.word	0x0800b538
 8004f88:	200002b4 	.word	0x200002b4
 8004f8c:	20000010 	.word	0x20000010
 8004f90:	0800b530 	.word	0x0800b530

08004f94 <GAP_DisconnectionComplete_CB>:
{
 8004f94:	b530      	push	{r4, r5, lr}
 8004f96:	b0c1      	sub	sp, #260	@ 0x104
  connected = FALSE;
 8004f98:	2500      	movs	r5, #0
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <GAP_DisconnectionComplete_CB+0x48>)
 8004f9c:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 8004f9e:	46ec      	mov	ip, sp
 8004fa0:	4c0f      	ldr	r4, [pc, #60]	@ (8004fe0 <GAP_DisconnectionComplete_CB+0x4c>)
 8004fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fac:	f84c 0b04 	str.w	r0, [ip], #4
 8004fb0:	f88c 1000 	strb.w	r1, [ip]
 8004fb4:	2114      	movs	r1, #20
 8004fb6:	4668      	mov	r0, sp
 8004fb8:	f000 fd68 	bl	8005a8c <UART5_Transmit>
  set_connectable = TRUE;
 8004fbc:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <GAP_DisconnectionComplete_CB+0x50>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 8004fc2:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <GAP_DisconnectionComplete_CB+0x54>)
 8004fc4:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004fc6:	210c      	movs	r1, #12
 8004fc8:	4808      	ldr	r0, [pc, #32]	@ (8004fec <GAP_DisconnectionComplete_CB+0x58>)
 8004fca:	f004 f99f 	bl	800930c <HAL_TIM_OC_Stop_IT>
 8004fce:	b908      	cbnz	r0, 8004fd4 <GAP_DisconnectionComplete_CB+0x40>
}
 8004fd0:	b041      	add	sp, #260	@ 0x104
 8004fd2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004fd4:	f001 f946 	bl	8006264 <Error_Handler>
}
 8004fd8:	e7fa      	b.n	8004fd0 <GAP_DisconnectionComplete_CB+0x3c>
 8004fda:	bf00      	nop
 8004fdc:	2000009c 	.word	0x2000009c
 8004fe0:	0800b54c 	.word	0x0800b54c
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	200004a0 	.word	0x200004a0
 8004fec:	200002b4 	.word	0x200002b4

08004ff0 <safe_aci_gatt_update_char_value>:
{
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	b082      	sub	sp, #8
  if (breath > 0) {
 8004ff4:	4c09      	ldr	r4, [pc, #36]	@ (800501c <safe_aci_gatt_update_char_value+0x2c>)
 8004ff6:	68a4      	ldr	r4, [r4, #8]
 8004ff8:	2c00      	cmp	r4, #0
 8004ffa:	dd05      	ble.n	8005008 <safe_aci_gatt_update_char_value+0x18>
    breath--;
 8004ffc:	3c01      	subs	r4, #1
 8004ffe:	4b07      	ldr	r3, [pc, #28]	@ (800501c <safe_aci_gatt_update_char_value+0x2c>)
 8005000:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8005002:	2064      	movs	r0, #100	@ 0x64
}
 8005004:	b002      	add	sp, #8
 8005006:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 8005008:	9c04      	ldr	r4, [sp, #16]
 800500a:	9400      	str	r4, [sp, #0]
 800500c:	f005 f878 	bl	800a100 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 8005010:	2800      	cmp	r0, #0
 8005012:	d0f7      	beq.n	8005004 <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 8005014:	4b01      	ldr	r3, [pc, #4]	@ (800501c <safe_aci_gatt_update_char_value+0x2c>)
 8005016:	221e      	movs	r2, #30
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	e7f3      	b.n	8005004 <safe_aci_gatt_update_char_value+0x14>
 800501c:	2000009c 	.word	0x2000009c

08005020 <Add_HW_SW_ServW2ST_Service>:
{
 8005020:	b530      	push	{r4, r5, lr}
 8005022:	b0cb      	sub	sp, #300	@ 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8005024:	231b      	movs	r3, #27
 8005026:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 800502a:	23c5      	movs	r3, #197	@ 0xc5
 800502c:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8005030:	23d5      	movs	r3, #213	@ 0xd5
 8005032:	f88d 311a 	strb.w	r3, [sp, #282]	@ 0x11a
 8005036:	23a5      	movs	r3, #165	@ 0xa5
 8005038:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 800503c:	2002      	movs	r0, #2
 800503e:	f88d 011c 	strb.w	r0, [sp, #284]	@ 0x11c
 8005042:	2300      	movs	r3, #0
 8005044:	f88d 311d 	strb.w	r3, [sp, #285]	@ 0x11d
 8005048:	22b4      	movs	r2, #180	@ 0xb4
 800504a:	f88d 211e 	strb.w	r2, [sp, #286]	@ 0x11e
 800504e:	229a      	movs	r2, #154	@ 0x9a
 8005050:	f88d 211f 	strb.w	r2, [sp, #287]	@ 0x11f
 8005054:	22e1      	movs	r2, #225	@ 0xe1
 8005056:	f88d 2120 	strb.w	r2, [sp, #288]	@ 0x120
 800505a:	2211      	movs	r2, #17
 800505c:	f88d 2121 	strb.w	r2, [sp, #289]	@ 0x121
 8005060:	2201      	movs	r2, #1
 8005062:	f88d 2122 	strb.w	r2, [sp, #290]	@ 0x122
 8005066:	f88d 3123 	strb.w	r3, [sp, #291]	@ 0x123
 800506a:	f88d 3124 	strb.w	r3, [sp, #292]	@ 0x124
 800506e:	f88d 3125 	strb.w	r3, [sp, #293]	@ 0x125
 8005072:	f88d 3126 	strb.w	r3, [sp, #294]	@ 0x126
 8005076:	f88d 3127 	strb.w	r3, [sp, #295]	@ 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 800507a:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <Add_HW_SW_ServW2ST_Service+0x130>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	230d      	movs	r3, #13
 8005080:	a946      	add	r1, sp, #280	@ 0x118
 8005082:	f004 ff92 	bl	8009faa <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 8005086:	2800      	cmp	r0, #0
 8005088:	d13e      	bne.n	8005108 <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 800508a:	231b      	movs	r3, #27
 800508c:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 8005090:	23c5      	movs	r3, #197	@ 0xc5
 8005092:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 8005096:	23d5      	movs	r3, #213	@ 0xd5
 8005098:	f88d 311a 	strb.w	r3, [sp, #282]	@ 0x11a
 800509c:	23a5      	movs	r3, #165	@ 0xa5
 800509e:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 80050a2:	2102      	movs	r1, #2
 80050a4:	f88d 111c 	strb.w	r1, [sp, #284]	@ 0x11c
 80050a8:	2300      	movs	r3, #0
 80050aa:	f88d 311d 	strb.w	r3, [sp, #285]	@ 0x11d
 80050ae:	2236      	movs	r2, #54	@ 0x36
 80050b0:	f88d 211e 	strb.w	r2, [sp, #286]	@ 0x11e
 80050b4:	22ac      	movs	r2, #172	@ 0xac
 80050b6:	f88d 211f 	strb.w	r2, [sp, #287]	@ 0x11f
 80050ba:	22e1      	movs	r2, #225	@ 0xe1
 80050bc:	f88d 2120 	strb.w	r2, [sp, #288]	@ 0x120
 80050c0:	2211      	movs	r2, #17
 80050c2:	f88d 2121 	strb.w	r2, [sp, #289]	@ 0x121
 80050c6:	2201      	movs	r2, #1
 80050c8:	f88d 2122 	strb.w	r2, [sp, #290]	@ 0x122
 80050cc:	f88d 3123 	strb.w	r3, [sp, #291]	@ 0x123
 80050d0:	f88d 3124 	strb.w	r3, [sp, #292]	@ 0x124
 80050d4:	f88d 3125 	strb.w	r3, [sp, #293]	@ 0x125
 80050d8:	22e0      	movs	r2, #224	@ 0xe0
 80050da:	f88d 2126 	strb.w	r2, [sp, #294]	@ 0x126
 80050de:	f88d 3127 	strb.w	r3, [sp, #295]	@ 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 80050e2:	481c      	ldr	r0, [pc, #112]	@ (8005154 <Add_HW_SW_ServW2ST_Service+0x134>)
 80050e4:	f100 020e 	add.w	r2, r0, #14
 80050e8:	9205      	str	r2, [sp, #20]
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	2210      	movs	r2, #16
 80050ee:	9203      	str	r2, [sp, #12]
 80050f0:	2404      	movs	r4, #4
 80050f2:	9402      	str	r4, [sp, #8]
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	9200      	str	r2, [sp, #0]
 80050f8:	2314      	movs	r3, #20
 80050fa:	aa46      	add	r2, sp, #280	@ 0x118
 80050fc:	8980      	ldrh	r0, [r0, #12]
 80050fe:	f004 ff99 	bl	800a034 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 8005102:	b9a0      	cbnz	r0, 800512e <Add_HW_SW_ServW2ST_Service+0x10e>
}
 8005104:	b04b      	add	sp, #300	@ 0x12c
 8005106:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 8005108:	f10d 0c18 	add.w	ip, sp, #24
 800510c:	4c12      	ldr	r4, [pc, #72]	@ (8005158 <Add_HW_SW_ServW2ST_Service+0x138>)
 800510e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005114:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005118:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800511c:	f88c 2000 	strb.w	r2, [ip]
 8005120:	2118      	movs	r1, #24
 8005122:	eb0d 0001 	add.w	r0, sp, r1
 8005126:	f000 fcb1 	bl	8005a8c <UART5_Transmit>
  return BLE_STATUS_ERROR;
 800512a:	2047      	movs	r0, #71	@ 0x47
    goto fail;
 800512c:	e7ea      	b.n	8005104 <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 800512e:	ac06      	add	r4, sp, #24
 8005130:	4d0a      	ldr	r5, [pc, #40]	@ (800515c <Add_HW_SW_ServW2ST_Service+0x13c>)
 8005132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005136:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800513a:	c407      	stmia	r4!, {r0, r1, r2}
 800513c:	f824 3b02 	strh.w	r3, [r4], #2
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	7023      	strb	r3, [r4, #0]
 8005144:	211e      	movs	r1, #30
 8005146:	a806      	add	r0, sp, #24
 8005148:	f000 fca0 	bl	8005a8c <UART5_Transmit>
  return BLE_STATUS_ERROR;
 800514c:	2047      	movs	r0, #71	@ 0x47
    goto fail;
 800514e:	e7d9      	b.n	8005104 <Add_HW_SW_ServW2ST_Service+0xe4>
 8005150:	200000a8 	.word	0x200000a8
 8005154:	2000009c 	.word	0x2000009c
 8005158:	0800b564 	.word	0x0800b564
 800515c:	0800b580 	.word	0x0800b580

08005160 <AccGyroMag_Update>:
{  
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	b0c8      	sub	sp, #288	@ 0x120
 8005164:	4606      	mov	r6, r0
 8005166:	460d      	mov	r5, r1
 8005168:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 800516a:	f001 fcc7 	bl	8006afc <HAL_GetTick>
 800516e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8005172:	f88d 010c 	strb.w	r0, [sp, #268]	@ 0x10c
 8005176:	f001 fcc1 	bl	8006afc <HAL_GetTick>
 800517a:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 800517e:	f88d 010d 	strb.w	r0, [sp, #269]	@ 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 8005182:	6833      	ldr	r3, [r6, #0]
 8005184:	f88d 310e 	strb.w	r3, [sp, #270]	@ 0x10e
 8005188:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800518c:	f88d 310f 	strb.w	r3, [sp, #271]	@ 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 8005190:	6873      	ldr	r3, [r6, #4]
 8005192:	f88d 3110 	strb.w	r3, [sp, #272]	@ 0x110
 8005196:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800519a:	f88d 3111 	strb.w	r3, [sp, #273]	@ 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 800519e:	68b3      	ldr	r3, [r6, #8]
 80051a0:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 80051a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80051a8:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80051b2:	0052      	lsls	r2, r2, #1
 80051b4:	f88d 2114 	strb.w	r2, [sp, #276]	@ 0x114
 80051b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051bc:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80051c0:	f88d 3115 	strb.w	r3, [sp, #277]	@ 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 80051c4:	686b      	ldr	r3, [r5, #4]
 80051c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80051ca:	0052      	lsls	r2, r2, #1
 80051cc:	f88d 2116 	strb.w	r2, [sp, #278]	@ 0x116
 80051d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051d4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80051d8:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
  STORE_LE_16(buff+12,Gyro->z);
 80051dc:	68ab      	ldr	r3, [r5, #8]
 80051de:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 80051e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80051e6:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
  STORE_LE_16(buff+14,Mag->x);
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f88d 311a 	strb.w	r3, [sp, #282]	@ 0x11a
 80051f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80051f4:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
  STORE_LE_16(buff+16,Mag->y);
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	f88d 311c 	strb.w	r3, [sp, #284]	@ 0x11c
 80051fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005202:	f88d 311d 	strb.w	r3, [sp, #285]	@ 0x11d
  STORE_LE_16(buff+18,Mag->z);
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	f88d 311e 	strb.w	r3, [sp, #286]	@ 0x11e
 800520c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005210:	f88d 311f 	strb.w	r3, [sp, #287]	@ 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 8005214:	480e      	ldr	r0, [pc, #56]	@ (8005250 <AccGyroMag_Update+0xf0>)
 8005216:	ab43      	add	r3, sp, #268	@ 0x10c
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2314      	movs	r3, #20
 800521c:	2200      	movs	r2, #0
 800521e:	89c1      	ldrh	r1, [r0, #14]
 8005220:	8980      	ldrh	r0, [r0, #12]
 8005222:	f7ff fee5 	bl	8004ff0 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8005226:	b908      	cbnz	r0, 800522c <AccGyroMag_Update+0xcc>
}
 8005228:	b048      	add	sp, #288	@ 0x120
 800522a:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 800522c:	ac03      	add	r4, sp, #12
 800522e:	4d09      	ldr	r5, [pc, #36]	@ (8005254 <AccGyroMag_Update+0xf4>)
 8005230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	f824 3b02 	strh.w	r3, [r4], #2
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	7023      	strb	r3, [r4, #0]
 8005242:	2122      	movs	r1, #34	@ 0x22
 8005244:	a803      	add	r0, sp, #12
 8005246:	f000 fc21 	bl	8005a8c <UART5_Transmit>
    return BLE_STATUS_ERROR;
 800524a:	2047      	movs	r0, #71	@ 0x47
 800524c:	e7ec      	b.n	8005228 <AccGyroMag_Update+0xc8>
 800524e:	bf00      	nop
 8005250:	2000009c 	.word	0x2000009c
 8005254:	0800b5a0 	.word	0x0800b5a0

08005258 <setConnectable>:
{  
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	b092      	sub	sp, #72	@ 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 800525c:	2609      	movs	r6, #9
 800525e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8005262:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <setConnectable+0xe8>)
 8005264:	f893 e001 	ldrb.w	lr, [r3, #1]
 8005268:	f88d e041 	strb.w	lr, [sp, #65]	@ 0x41
 800526c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8005270:	f88d c042 	strb.w	ip, [sp, #66]	@ 0x42
 8005274:	78dc      	ldrb	r4, [r3, #3]
 8005276:	f88d 4043 	strb.w	r4, [sp, #67]	@ 0x43
 800527a:	7918      	ldrb	r0, [r3, #4]
 800527c:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
 8005280:	7959      	ldrb	r1, [r3, #5]
 8005282:	f88d 1045 	strb.w	r1, [sp, #69]	@ 0x45
 8005286:	799a      	ldrb	r2, [r3, #6]
 8005288:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800528c:	79db      	ldrb	r3, [r3, #7]
 800528e:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
  manuf_data[0 ] = 8U;
 8005292:	2508      	movs	r5, #8
 8005294:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
  manuf_data[1 ] = 0x09U;
 8005298:	f88d 6025 	strb.w	r6, [sp, #37]	@ 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 800529c:	f88d e026 	strb.w	lr, [sp, #38]	@ 0x26
  manuf_data[3 ] = NodeName[2];
 80052a0:	f88d c027 	strb.w	ip, [sp, #39]	@ 0x27
  manuf_data[4 ] = NodeName[3];
 80052a4:	f88d 4028 	strb.w	r4, [sp, #40]	@ 0x28
  manuf_data[5 ] = NodeName[4];
 80052a8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
  manuf_data[6 ] = NodeName[5];
 80052ac:	f88d 102a 	strb.w	r1, [sp, #42]	@ 0x2a
  manuf_data[7 ] = NodeName[6];
 80052b0:	f88d 202b 	strb.w	r2, [sp, #43]	@ 0x2b
  manuf_data[8 ] = NodeName[7];           
 80052b4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  manuf_data[9 ] = 15U;
 80052b8:	230f      	movs	r3, #15
 80052ba:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
  manuf_data[10] = 0xFFU;
 80052be:	23ff      	movs	r3, #255	@ 0xff
 80052c0:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 80052c4:	2330      	movs	r3, #48	@ 0x30
 80052c6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
  manuf_data[12] = 0x00U;
 80052ca:	2400      	movs	r4, #0
 80052cc:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
  manuf_data[13] = 0x02U;
 80052d0:	2302      	movs	r3, #2
 80052d2:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 80052d6:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 80052da:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
  manuf_data[16] = 0x00U;
 80052de:	f88d 4034 	strb.w	r4, [sp, #52]	@ 0x34
  manuf_data[17] = 0x00U;
 80052e2:	f88d 4035 	strb.w	r4, [sp, #53]	@ 0x35
  manuf_data[18] = 0x00U;
 80052e6:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  manuf_data[19] = bdaddr[5];
 80052ea:	4b16      	ldr	r3, [pc, #88]	@ (8005344 <setConnectable+0xec>)
 80052ec:	795a      	ldrb	r2, [r3, #5]
 80052ee:	f88d 2037 	strb.w	r2, [sp, #55]	@ 0x37
  manuf_data[20] = bdaddr[4];
 80052f2:	791a      	ldrb	r2, [r3, #4]
 80052f4:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
  manuf_data[21] = bdaddr[3];
 80052f8:	78da      	ldrb	r2, [r3, #3]
 80052fa:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
  manuf_data[22] = bdaddr[2];
 80052fe:	789a      	ldrb	r2, [r3, #2]
 8005300:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
  manuf_data[23] = bdaddr[1];
 8005304:	785a      	ldrb	r2, [r3, #1]
 8005306:	f88d 203b 	strb.w	r2, [sp, #59]	@ 0x3b
  manuf_data[24] = bdaddr[0];
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 8005310:	4621      	mov	r1, r4
 8005312:	4620      	mov	r0, r4
 8005314:	f005 f868 	bl	800a3e8 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8005318:	9406      	str	r4, [sp, #24]
 800531a:	9405      	str	r4, [sp, #20]
 800531c:	9404      	str	r4, [sp, #16]
 800531e:	9403      	str	r4, [sp, #12]
 8005320:	ab10      	add	r3, sp, #64	@ 0x40
 8005322:	9302      	str	r3, [sp, #8]
 8005324:	9501      	str	r5, [sp, #4]
 8005326:	9400      	str	r4, [sp, #0]
 8005328:	2301      	movs	r3, #1
 800532a:	4622      	mov	r2, r4
 800532c:	4621      	mov	r1, r4
 800532e:	4620      	mov	r0, r4
 8005330:	f004 fd43 	bl	8009dba <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 8005334:	a909      	add	r1, sp, #36	@ 0x24
 8005336:	2019      	movs	r0, #25
 8005338:	f004 fde6 	bl	8009f08 <aci_gap_update_adv_data>
}
 800533c:	b012      	add	sp, #72	@ 0x48
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	20000354 	.word	0x20000354
 8005344:	200002ac 	.word	0x200002ac

08005348 <Read_Request_CB>:
{
 8005348:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 800534a:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <Read_Request_CB+0x10>)
 800534c:	8898      	ldrh	r0, [r3, #4]
 800534e:	b900      	cbnz	r0, 8005352 <Read_Request_CB+0xa>
}
 8005350:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 8005352:	f004 ff0d 	bl	800a170 <aci_gatt_allow_read>
}
 8005356:	e7fb      	b.n	8005350 <Read_Request_CB+0x8>
 8005358:	2000009c 	.word	0x2000009c

0800535c <Attribute_Modified_CB>:
{
 800535c:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <Attribute_Modified_CB+0x18>)
 8005360:	89db      	ldrh	r3, [r3, #14]
 8005362:	3302      	adds	r3, #2
 8005364:	4298      	cmp	r0, r3
 8005366:	d000      	beq.n	800536a <Attribute_Modified_CB+0xe>
}
 8005368:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 800536a:	4608      	mov	r0, r1
 800536c:	f7ff fdca 	bl	8004f04 <AccGyroMag_AttributeModified_CB>
}
 8005370:	e7fa      	b.n	8005368 <Attribute_Modified_CB+0xc>
 8005372:	bf00      	nop
 8005374:	2000009c 	.word	0x2000009c

08005378 <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8005378:	b530      	push	{r4, r5, lr}
 800537a:	b0c1      	sub	sp, #260	@ 0x104
 800537c:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 800537e:	46ec      	mov	ip, sp
 8005380:	4c1c      	ldr	r4, [pc, #112]	@ (80053f4 <HCI_Event_CB+0x7c>)
 8005382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	f88c 3000 	strb.w	r3, [ip]
 800538e:	2110      	movs	r1, #16
 8005390:	4668      	mov	r0, sp
 8005392:	f000 fb7b 	bl	8005a8c <UART5_Transmit>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 8005396:	782b      	ldrb	r3, [r5, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d108      	bne.n	80053ae <HCI_Event_CB+0x36>
    return;
  }
  
  switch(event_pckt->evt){
 800539c:	786b      	ldrb	r3, [r5, #1]
 800539e:	2b3e      	cmp	r3, #62	@ 0x3e
 80053a0:	d007      	beq.n	80053b2 <HCI_Event_CB+0x3a>
 80053a2:	2bff      	cmp	r3, #255	@ 0xff
 80053a4:	d00f      	beq.n	80053c6 <HCI_Event_CB+0x4e>
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d101      	bne.n	80053ae <HCI_Event_CB+0x36>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80053aa:	f7ff fdf3 	bl	8004f94 <GAP_DisconnectionComplete_CB>
        break;
      }
    }
    break;
  }
}
 80053ae:	b041      	add	sp, #260	@ 0x104
 80053b0:	bd30      	pop	{r4, r5, pc}
      switch(evt->subevent){
 80053b2:	78eb      	ldrb	r3, [r5, #3]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d1fa      	bne.n	80053ae <HCI_Event_CB+0x36>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80053b8:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 80053bc:	f105 0009 	add.w	r0, r5, #9
 80053c0:	f7ff fd94 	bl	8004eec <GAP_ConnectionComplete_CB>
        break;
 80053c4:	e7f3      	b.n	80053ae <HCI_Event_CB+0x36>
      switch(blue_evt->ecode){
 80053c6:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 80053ca:	f640 4201 	movw	r2, #3073	@ 0xc01
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d008      	beq.n	80053e4 <HCI_Event_CB+0x6c>
 80053d2:	f640 4214 	movw	r2, #3092	@ 0xc14
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d1e9      	bne.n	80053ae <HCI_Event_CB+0x36>
          Read_Request_CB(pr->attr_handle);                    
 80053da:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80053de:	f7ff ffb3 	bl	8005348 <Read_Request_CB>
        break;
 80053e2:	e7e4      	b.n	80053ae <HCI_Event_CB+0x36>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 80053e4:	7a6a      	ldrb	r2, [r5, #9]
 80053e6:	f105 010c 	add.w	r1, r5, #12
 80053ea:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80053ee:	f7ff ffb5 	bl	800535c <Attribute_Modified_CB>
        break;
 80053f2:	e7dc      	b.n	80053ae <HCI_Event_CB+0x36>
 80053f4:	0800b5c4 	.word	0x0800b5c4

080053f8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80053f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fa:	b0c9      	sub	sp, #292	@ 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80053fc:	f001 fe06 	bl	800700c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005400:	4b2a      	ldr	r3, [pc, #168]	@ (80054ac <HCI_TL_SPI_Init+0xb4>)
 8005402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005404:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005408:	64da      	str	r2, [r3, #76]	@ 0x4c
 800540a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800540c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005410:	9200      	str	r2, [sp, #0]
 8005412:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005414:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005416:	f042 0204 	orr.w	r2, r2, #4
 800541a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800541c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800541e:	f002 0204 	and.w	r2, r2, #4
 8005422:	9201      	str	r2, [sp, #4]
 8005424:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005428:	f042 0202 	orr.w	r2, r2, #2
 800542c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800542e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	9302      	str	r3, [sp, #8]
 8005436:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005438:	4e1d      	ldr	r6, [pc, #116]	@ (80054b0 <HCI_TL_SPI_Init+0xb8>)
 800543a:	2201      	movs	r2, #1
 800543c:	2104      	movs	r1, #4
 800543e:	4630      	mov	r0, r6
 8005440:	f001 fdb7 	bl	8006fb2 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8005444:	2320      	movs	r3, #32
 8005446:	9343      	str	r3, [sp, #268]	@ 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HCI_TL_SPI_Init+0xbc>)
 800544a:	9344      	str	r3, [sp, #272]	@ 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544c:	2400      	movs	r4, #0
 800544e:	9445      	str	r4, [sp, #276]	@ 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8005450:	a943      	add	r1, sp, #268	@ 0x10c
 8005452:	4819      	ldr	r0, [pc, #100]	@ (80054b8 <HCI_TL_SPI_Init+0xc0>)
 8005454:	f001 fc22 	bl	8006c9c <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8005458:	2501      	movs	r5, #1
 800545a:	9543      	str	r5, [sp, #268]	@ 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545c:	9544      	str	r5, [sp, #272]	@ 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	9445      	str	r4, [sp, #276]	@ 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005460:	9446      	str	r4, [sp, #280]	@ 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8005462:	a943      	add	r1, sp, #268	@ 0x10c
 8005464:	4815      	ldr	r0, [pc, #84]	@ (80054bc <HCI_TL_SPI_Init+0xc4>)
 8005466:	f001 fc19 	bl	8006c9c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800546a:	2704      	movs	r7, #4
 800546c:	9743      	str	r7, [sp, #268]	@ 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800546e:	9544      	str	r5, [sp, #272]	@ 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005470:	9445      	str	r4, [sp, #276]	@ 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005472:	9446      	str	r4, [sp, #280]	@ 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005474:	a943      	add	r1, sp, #268	@ 0x10c
 8005476:	4630      	mov	r0, r6
 8005478:	f001 fc10 	bl	8006c9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800547c:	462a      	mov	r2, r5
 800547e:	4639      	mov	r1, r7
 8005480:	4630      	mov	r0, r6
 8005482:	f001 fd96 	bl	8006fb2 <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 8005486:	f10d 0c0c 	add.w	ip, sp, #12
 800548a:	4c0d      	ldr	r4, [pc, #52]	@ (80054c0 <HCI_TL_SPI_Init+0xc8>)
 800548c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800548e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005496:	e88c 0003 	stmia.w	ip, {r0, r1}
 800549a:	2117      	movs	r1, #23
 800549c:	a803      	add	r0, sp, #12
 800549e:	f000 faf5 	bl	8005a8c <UART5_Transmit>
    
  return BSP_SPI1_Init();
 80054a2:	f001 fa53 	bl	800694c <BSP_SPI1_Init>
}
 80054a6:	b049      	add	sp, #292	@ 0x124
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
 80054b0:	48000400 	.word	0x48000400
 80054b4:	10110000 	.word	0x10110000
 80054b8:	48000800 	.word	0x48000800
 80054bc:	48001c00 	.word	0x48001c00
 80054c0:	0800b5d8 	.word	0x0800b5d8

080054c4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80054c4:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 80054c6:	2120      	movs	r1, #32
 80054c8:	4806      	ldr	r0, [pc, #24]	@ (80054e4 <HCI_TL_SPI_DeInit+0x20>)
 80054ca:	f001 fcd3 	bl	8006e74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80054ce:	2104      	movs	r1, #4
 80054d0:	4805      	ldr	r0, [pc, #20]	@ (80054e8 <HCI_TL_SPI_DeInit+0x24>)
 80054d2:	f001 fccf 	bl	8006e74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80054d6:	2101      	movs	r1, #1
 80054d8:	4804      	ldr	r0, [pc, #16]	@ (80054ec <HCI_TL_SPI_DeInit+0x28>)
 80054da:	f001 fccb 	bl	8006e74 <HAL_GPIO_DeInit>
  return 0;
}
 80054de:	2000      	movs	r0, #0
 80054e0:	bd08      	pop	{r3, pc}
 80054e2:	bf00      	nop
 80054e4:	48000800 	.word	0x48000800
 80054e8:	48000400 	.word	0x48000400
 80054ec:	48001c00 	.word	0x48001c00

080054f0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80054f0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80054f2:	4c09      	ldr	r4, [pc, #36]	@ (8005518 <HCI_TL_SPI_Reset+0x28>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	2101      	movs	r1, #1
 80054f8:	4620      	mov	r0, r4
 80054fa:	f001 fd5a 	bl	8006fb2 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80054fe:	2005      	movs	r0, #5
 8005500:	f000 fea0 	bl	8006244 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8005504:	2201      	movs	r2, #1
 8005506:	4611      	mov	r1, r2
 8005508:	4620      	mov	r0, r4
 800550a:	f001 fd52 	bl	8006fb2 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800550e:	2005      	movs	r0, #5
 8005510:	f000 fe98 	bl	8006244 <HAL_Delay>
  return 0;
}  
 8005514:	2000      	movs	r0, #0
 8005516:	bd10      	pop	{r4, pc}
 8005518:	48001c00 	.word	0x48001c00

0800551c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	4606      	mov	r6, r0
 8005522:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8005524:	23ff      	movs	r3, #255	@ 0xff
 8005526:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800552a:	230b      	movs	r3, #11
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	f88d 200c 	strb.w	r2, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005534:	2104      	movs	r1, #4
 8005536:	4819      	ldr	r0, [pc, #100]	@ (800559c <HCI_TL_SPI_Receive+0x80>)
 8005538:	f001 fd3b 	bl	8006fb2 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800553c:	2205      	movs	r2, #5
 800553e:	4669      	mov	r1, sp
 8005540:	a802      	add	r0, sp, #8
 8005542:	f001 f9c7 	bl	80068d4 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8005546:	f89d 3000 	ldrb.w	r3, [sp]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d008      	beq.n	8005560 <HCI_TL_SPI_Receive+0x44>
  uint8_t len = 0;
 800554e:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005550:	2201      	movs	r2, #1
 8005552:	2104      	movs	r1, #4
 8005554:	4811      	ldr	r0, [pc, #68]	@ (800559c <HCI_TL_SPI_Receive+0x80>)
 8005556:	f001 fd2c 	bl	8006fb2 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 800555a:	4620      	mov	r0, r4
 800555c:	b004      	add	sp, #16
 800555e:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8005560:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8005568:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800556c:	d013      	beq.n	8005596 <HCI_TL_SPI_Receive+0x7a>
      if (byte_count > size){
 800556e:	42ab      	cmp	r3, r5
 8005570:	d800      	bhi.n	8005574 <HCI_TL_SPI_Receive+0x58>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8005572:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 8005574:	2400      	movs	r4, #0
 8005576:	e00b      	b.n	8005590 <HCI_TL_SPI_Receive+0x74>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8005578:	2201      	movs	r2, #1
 800557a:	f10d 010e 	add.w	r1, sp, #14
 800557e:	f10d 000f 	add.w	r0, sp, #15
 8005582:	f001 f9a7 	bl	80068d4 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8005586:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800558a:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 800558c:	3401      	adds	r4, #1
 800558e:	b2e4      	uxtb	r4, r4
 8005590:	42ac      	cmp	r4, r5
 8005592:	d3f1      	bcc.n	8005578 <HCI_TL_SPI_Receive+0x5c>
 8005594:	e7dc      	b.n	8005550 <HCI_TL_SPI_Receive+0x34>
  uint8_t len = 0;
 8005596:	2400      	movs	r4, #0
 8005598:	e7da      	b.n	8005550 <HCI_TL_SPI_Receive+0x34>
 800559a:	bf00      	nop
 800559c:	48000400 	.word	0x48000400

080055a0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a2:	b085      	sub	sp, #20
 80055a4:	4607      	mov	r7, r0
 80055a6:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80055a8:	230a      	movs	r3, #10
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	2300      	movs	r3, #0
 80055ae:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80055b2:	f001 faa3 	bl	8006afc <HAL_GetTick>
 80055b6:	4605      	mov	r5, r0
 80055b8:	e011      	b.n	80055de <HCI_TL_SPI_Send+0x3e>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80055ba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80055be:	42b3      	cmp	r3, r6
 80055c0:	d21e      	bcs.n	8005600 <HCI_TL_SPI_Send+0x60>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80055c2:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80055c6:	2201      	movs	r2, #1
 80055c8:	2104      	movs	r1, #4
 80055ca:	4813      	ldr	r0, [pc, #76]	@ (8005618 <HCI_TL_SPI_Send+0x78>)
 80055cc:	f001 fcf1 	bl	8006fb2 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80055d0:	f001 fa94 	bl	8006afc <HAL_GetTick>
 80055d4:	1b40      	subs	r0, r0, r5
 80055d6:	280f      	cmp	r0, #15
 80055d8:	d819      	bhi.n	800560e <HCI_TL_SPI_Send+0x6e>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80055da:	2c00      	cmp	r4, #0
 80055dc:	da19      	bge.n	8005612 <HCI_TL_SPI_Send+0x72>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80055de:	2200      	movs	r2, #0
 80055e0:	2104      	movs	r1, #4
 80055e2:	480d      	ldr	r0, [pc, #52]	@ (8005618 <HCI_TL_SPI_Send+0x78>)
 80055e4:	f001 fce5 	bl	8006fb2 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80055e8:	2205      	movs	r2, #5
 80055ea:	4669      	mov	r1, sp
 80055ec:	a802      	add	r0, sp, #8
 80055ee:	f001 f971 	bl	80068d4 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80055f2:	f89d 3000 	ldrb.w	r3, [sp]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d0df      	beq.n	80055ba <HCI_TL_SPI_Send+0x1a>
      result = -1;
 80055fa:	f04f 34ff 	mov.w	r4, #4294967295
 80055fe:	e7e2      	b.n	80055c6 <HCI_TL_SPI_Send+0x26>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8005600:	4632      	mov	r2, r6
 8005602:	4906      	ldr	r1, [pc, #24]	@ (800561c <HCI_TL_SPI_Send+0x7c>)
 8005604:	4638      	mov	r0, r7
 8005606:	f001 f965 	bl	80068d4 <BSP_SPI1_SendRecv>
    result = 0;
 800560a:	2400      	movs	r4, #0
 800560c:	e7db      	b.n	80055c6 <HCI_TL_SPI_Send+0x26>
      result = -3;
 800560e:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 8005612:	4620      	mov	r0, r4
 8005614:	b005      	add	sp, #20
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	48000400 	.word	0x48000400
 800561c:	200000b0 	.word	0x200000b0

08005620 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8005620:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8005622:	2120      	movs	r1, #32
 8005624:	4803      	ldr	r0, [pc, #12]	@ (8005634 <IsDataAvailable+0x14>)
 8005626:	f001 fcbd 	bl	8006fa4 <HAL_GPIO_ReadPin>
} 
 800562a:	2801      	cmp	r0, #1
 800562c:	bf14      	ite	ne
 800562e:	2000      	movne	r0, #0
 8005630:	2001      	moveq	r0, #1
 8005632:	bd08      	pop	{r3, pc}
 8005634:	48000800 	.word	0x48000800

08005638 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8005638:	b500      	push	{lr}
 800563a:	b089      	sub	sp, #36	@ 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <hci_tl_lowlevel_init+0x38>)
 800563e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8005640:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <hci_tl_lowlevel_init+0x3c>)
 8005642:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <hci_tl_lowlevel_init+0x40>)
 8005646:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8005648:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <hci_tl_lowlevel_init+0x44>)
 800564a:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <hci_tl_lowlevel_init+0x48>)
 800564e:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8005650:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <hci_tl_lowlevel_init+0x4c>)
 8005652:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 8005654:	a801      	add	r0, sp, #4
 8005656:	f004 ff87 	bl	800a568 <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 800565a:	2200      	movs	r2, #0
 800565c:	2103      	movs	r1, #3
 800565e:	2017      	movs	r0, #23
 8005660:	f001 faa6 	bl	8006bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005664:	2017      	movs	r0, #23
 8005666:	f001 fab3 	bl	8006bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800566a:	b009      	add	sp, #36	@ 0x24
 800566c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005670:	080053f9 	.word	0x080053f9
 8005674:	080054c5 	.word	0x080054c5
 8005678:	080055a1 	.word	0x080055a1
 800567c:	0800551d 	.word	0x0800551d
 8005680:	080054f1 	.word	0x080054f1
 8005684:	08006901 	.word	0x08006901

08005688 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8005688:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 800568a:	f7ff ffc9 	bl	8005620 <IsDataAvailable>
 800568e:	b120      	cbz	r0, 800569a <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8005690:	2000      	movs	r0, #0
 8005692:	f005 f843 	bl	800a71c <hci_notify_asynch_evt>
 8005696:	2800      	cmp	r0, #0
 8005698:	d0f7      	beq.n	800568a <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 800569a:	bd08      	pop	{r3, pc}

0800569c <SystemClock_Config>:
 *            PLL_Q                          = 4
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 800569c:	b510      	push	{r4, lr}
 800569e:	b0ba      	sub	sp, #232	@ 0xe8
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80056a0:	2400      	movs	r4, #0
 80056a2:	9435      	str	r4, [sp, #212]	@ 0xd4
 80056a4:	9436      	str	r4, [sp, #216]	@ 0xd8
 80056a6:	9437      	str	r4, [sp, #220]	@ 0xdc
 80056a8:	9438      	str	r4, [sp, #224]	@ 0xe0
 80056aa:	9439      	str	r4, [sp, #228]	@ 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80056ac:	2244      	movs	r2, #68	@ 0x44
 80056ae:	4621      	mov	r1, r4
 80056b0:	a824      	add	r0, sp, #144	@ 0x90
 80056b2:	f005 fa87 	bl	800abc4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80056b6:	2288      	movs	r2, #136	@ 0x88
 80056b8:	4621      	mov	r1, r4
 80056ba:	a802      	add	r0, sp, #8
 80056bc:	f005 fa82 	bl	800abc4 <memset>

	__HAL_RCC_PWR_CLK_ENABLE();
 80056c0:	4b26      	ldr	r3, [pc, #152]	@ (800575c <SystemClock_Config+0xc0>)
 80056c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80056c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	9b01      	ldr	r3, [sp, #4]
	HAL_PWR_EnableBkUpAccess();
 80056d4:	f001 fc8a 	bl	8006fec <HAL_PWR_EnableBkUpAccess>

	/* Enable the LSE Oscilator */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80056d8:	2304      	movs	r3, #4
 80056da:	9324      	str	r3, [sp, #144]	@ 0x90
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80056dc:	2301      	movs	r3, #1
 80056de:	9326      	str	r3, [sp, #152]	@ 0x98
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80056e0:	a824      	add	r0, sp, #144	@ 0x90
 80056e2:	f001 fd37 	bl	8007154 <HAL_RCC_OscConfig>
 80056e6:	b100      	cbz	r0, 80056ea <SystemClock_Config+0x4e>
		while (1)
 80056e8:	e7fe      	b.n	80056e8 <SystemClock_Config+0x4c>
			;
	}

	/* Enable the CSS interrupt in case LSE signal is corrupted or not present */
	HAL_RCCEx_DisableLSECSS();
 80056ea:	f002 fca9 	bl	8008040 <HAL_RCCEx_DisableLSECSS>

	/* Enable MSI Oscillator and activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80056ee:	2310      	movs	r3, #16
 80056f0:	9324      	str	r3, [sp, #144]	@ 0x90
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80056f2:	2301      	movs	r3, #1
 80056f4:	932a      	str	r3, [sp, #168]	@ 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80056f6:	2200      	movs	r2, #0
 80056f8:	9228      	str	r2, [sp, #160]	@ 0xa0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80056fa:	22b0      	movs	r2, #176	@ 0xb0
 80056fc:	922c      	str	r2, [sp, #176]	@ 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056fe:	2202      	movs	r2, #2
 8005700:	922e      	str	r2, [sp, #184]	@ 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005702:	932f      	str	r3, [sp, #188]	@ 0xbc
	RCC_OscInitStruct.PLL.PLLM = 6;
 8005704:	2306      	movs	r3, #6
 8005706:	9330      	str	r3, [sp, #192]	@ 0xc0
	RCC_OscInitStruct.PLL.PLLN = 40;
 8005708:	2328      	movs	r3, #40	@ 0x28
 800570a:	9331      	str	r3, [sp, #196]	@ 0xc4
	RCC_OscInitStruct.PLL.PLLP = 7;
 800570c:	2307      	movs	r3, #7
 800570e:	9332      	str	r3, [sp, #200]	@ 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8005710:	2304      	movs	r3, #4
 8005712:	9333      	str	r3, [sp, #204]	@ 0xcc
	RCC_OscInitStruct.PLL.PLLR = 4;
 8005714:	9334      	str	r3, [sp, #208]	@ 0xd0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005716:	a824      	add	r0, sp, #144	@ 0x90
 8005718:	f001 fd1c 	bl	8007154 <HAL_RCC_OscConfig>
 800571c:	b100      	cbz	r0, 8005720 <SystemClock_Config+0x84>
		while (1)
 800571e:	e7fe      	b.n	800571e <SystemClock_Config+0x82>
			;
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005724:	9302      	str	r3, [sp, #8]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800572a:	9323      	str	r3, [sp, #140]	@ 0x8c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800572c:	a802      	add	r0, sp, #8
 800572e:	f002 fa5d 	bl	8007bec <HAL_RCCEx_PeriphCLKConfig>
 8005732:	b100      	cbz	r0, 8005736 <SystemClock_Config+0x9a>
		while (1)
 8005734:	e7fe      	b.n	8005734 <SystemClock_Config+0x98>
			;
	}

	/* Enable MSI Auto-calibration through LSE */
	HAL_RCCEx_EnableMSIPLLMode();
 8005736:	f002 fc91 	bl	800805c <HAL_RCCEx_EnableMSIPLLMode>
//  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
//  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
//  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800573a:	230f      	movs	r3, #15
 800573c:	9335      	str	r3, [sp, #212]	@ 0xd4
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800573e:	2303      	movs	r3, #3
 8005740:	9336      	str	r3, [sp, #216]	@ 0xd8
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005742:	2300      	movs	r3, #0
 8005744:	9337      	str	r3, [sp, #220]	@ 0xdc
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005746:	9338      	str	r3, [sp, #224]	@ 0xe0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005748:	9339      	str	r3, [sp, #228]	@ 0xe4
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800574a:	2104      	movs	r1, #4
 800574c:	a835      	add	r0, sp, #212	@ 0xd4
 800574e:	f002 f817 	bl	8007780 <HAL_RCC_ClockConfig>
 8005752:	b100      	cbz	r0, 8005756 <SystemClock_Config+0xba>
		while (1)
 8005754:	e7fe      	b.n	8005754 <SystemClock_Config+0xb8>
			;
	}
}
 8005756:	b03a      	add	sp, #232	@ 0xe8
 8005758:	bd10      	pop	{r4, pc}
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000

08005760 <BSP_LSM303AGR_WriteReg_Acc>:
static int32_t BSP_LSM303AGR_WriteReg_Acc(uint16_t Reg, uint8_t *pdata,	uint16_t len) {
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	460d      	mov	r5, r1
 8005766:	4614      	mov	r4, r2
	uint8_t dataReg = (uint8_t) Reg;
 8005768:	f88d 0007 	strb.w	r0, [sp, #7]
	LSM_ACC_CS_LOW();
 800576c:	2200      	movs	r2, #0
 800576e:	2110      	movs	r1, #16
 8005770:	480f      	ldr	r0, [pc, #60]	@ (80057b0 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8005772:	f001 fc1e 	bl	8006fb2 <HAL_GPIO_WritePin>
	if (BSP_SPI2_Send(&dataReg, 1) != 1) {
 8005776:	2101      	movs	r1, #1
 8005778:	f10d 0007 	add.w	r0, sp, #7
 800577c:	f001 f898 	bl	80068b0 <BSP_SPI2_Send>
 8005780:	2801      	cmp	r0, #1
 8005782:	d00f      	beq.n	80057a4 <BSP_LSM303AGR_WriteReg_Acc+0x44>
		ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005784:	f06f 0605 	mvn.w	r6, #5
	if (BSP_SPI2_Send(pdata, len) != len) {
 8005788:	4621      	mov	r1, r4
 800578a:	4628      	mov	r0, r5
 800578c:	f001 f890 	bl	80068b0 <BSP_SPI2_Send>
 8005790:	42a0      	cmp	r0, r4
 8005792:	d109      	bne.n	80057a8 <BSP_LSM303AGR_WriteReg_Acc+0x48>
	LSM_ACC_CS_HIGH();
 8005794:	2201      	movs	r2, #1
 8005796:	2110      	movs	r1, #16
 8005798:	4805      	ldr	r0, [pc, #20]	@ (80057b0 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 800579a:	f001 fc0a 	bl	8006fb2 <HAL_GPIO_WritePin>
}
 800579e:	4630      	mov	r0, r6
 80057a0:	b002      	add	sp, #8
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ret = BSP_ERROR_NONE;
 80057a4:	2600      	movs	r6, #0
 80057a6:	e7ef      	b.n	8005788 <BSP_LSM303AGR_WriteReg_Acc+0x28>
		ret = BSP_ERROR_UNKNOWN_FAILURE;
 80057a8:	f06f 0605 	mvn.w	r6, #5
 80057ac:	e7f2      	b.n	8005794 <BSP_LSM303AGR_WriteReg_Acc+0x34>
 80057ae:	bf00      	nop
 80057b0:	48000800 	.word	0x48000800

080057b4 <startAcc>:
static void startAcc() {
 80057b4:	b500      	push	{lr}
 80057b6:	b085      	sub	sp, #20
	inData[0] = 0x57;  // write 0b01010111/0x57 to CTRL_REG1_A
 80057b8:	2357      	movs	r3, #87	@ 0x57
 80057ba:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(0x20, inData, 1);
 80057be:	2201      	movs	r2, #1
 80057c0:	a901      	add	r1, sp, #4
 80057c2:	2020      	movs	r0, #32
 80057c4:	f7ff ffcc 	bl	8005760 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x9;   // write 0b00001001/0x9 to CTRL_REG4_A
 80057c8:	2309      	movs	r3, #9
 80057ca:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Acc(0x23, inData, 1);
 80057ce:	2201      	movs	r2, #1
 80057d0:	a901      	add	r1, sp, #4
 80057d2:	2023      	movs	r0, #35	@ 0x23
 80057d4:	f7ff ffc4 	bl	8005760 <BSP_LSM303AGR_WriteReg_Acc>
}
 80057d8:	b005      	add	sp, #20
 80057da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080057e0 <BSP_LSM303AGR_WriteReg_Mag>:
static int32_t BSP_LSM303AGR_WriteReg_Mag(uint16_t Reg, uint8_t *pdata,	uint16_t len) {
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	460d      	mov	r5, r1
 80057e6:	4614      	mov	r4, r2
	uint8_t dataReg = (uint8_t) Reg;
 80057e8:	f88d 0007 	strb.w	r0, [sp, #7]
	LSM_MAG_CS_LOW();
 80057ec:	2200      	movs	r2, #0
 80057ee:	2102      	movs	r1, #2
 80057f0:	480f      	ldr	r0, [pc, #60]	@ (8005830 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 80057f2:	f001 fbde 	bl	8006fb2 <HAL_GPIO_WritePin>
	if (BSP_SPI2_Send(&dataReg, 1) != 1) {
 80057f6:	2101      	movs	r1, #1
 80057f8:	f10d 0007 	add.w	r0, sp, #7
 80057fc:	f001 f858 	bl	80068b0 <BSP_SPI2_Send>
 8005800:	2801      	cmp	r0, #1
 8005802:	d00f      	beq.n	8005824 <BSP_LSM303AGR_WriteReg_Mag+0x44>
		ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005804:	f06f 0605 	mvn.w	r6, #5
	if (BSP_SPI2_Send(pdata, len) != len) {
 8005808:	4621      	mov	r1, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f001 f850 	bl	80068b0 <BSP_SPI2_Send>
 8005810:	42a0      	cmp	r0, r4
 8005812:	d109      	bne.n	8005828 <BSP_LSM303AGR_WriteReg_Mag+0x48>
	LSM_MAG_CS_HIGH();
 8005814:	2201      	movs	r2, #1
 8005816:	2102      	movs	r1, #2
 8005818:	4805      	ldr	r0, [pc, #20]	@ (8005830 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 800581a:	f001 fbca 	bl	8006fb2 <HAL_GPIO_WritePin>
}
 800581e:	4630      	mov	r0, r6
 8005820:	b002      	add	sp, #8
 8005822:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ret = BSP_ERROR_NONE;
 8005824:	2600      	movs	r6, #0
 8005826:	e7ef      	b.n	8005808 <BSP_LSM303AGR_WriteReg_Mag+0x28>
		ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005828:	f06f 0605 	mvn.w	r6, #5
 800582c:	e7f2      	b.n	8005814 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 800582e:	bf00      	nop
 8005830:	48000400 	.word	0x48000400

08005834 <startMag>:
static void startMag() {
 8005834:	b500      	push	{lr}
 8005836:	b085      	sub	sp, #20
	inData[0] = 0x0;  // write 0b00000000/0x0 to CFG_REG_A_M
 8005838:	2300      	movs	r3, #0
 800583a:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Mag(0x60, inData, 1);
 800583e:	2201      	movs	r2, #1
 8005840:	a901      	add	r1, sp, #4
 8005842:	2060      	movs	r0, #96	@ 0x60
 8005844:	f7ff ffcc 	bl	80057e0 <BSP_LSM303AGR_WriteReg_Mag>
	inData[0] = 0x21;  // write 0b00100001/0x21 to CFG_REG_C_M
 8005848:	2321      	movs	r3, #33	@ 0x21
 800584a:	f88d 3004 	strb.w	r3, [sp, #4]
	BSP_LSM303AGR_WriteReg_Mag(0x62, inData, 1);
 800584e:	2201      	movs	r2, #1
 8005850:	a901      	add	r1, sp, #4
 8005852:	2062      	movs	r0, #98	@ 0x62
 8005854:	f7ff ffc4 	bl	80057e0 <BSP_LSM303AGR_WriteReg_Mag>
}
 8005858:	b005      	add	sp, #20
 800585a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005860 <SendMotionData>:
static void SendMotionData(void) {
 8005860:	b508      	push	{r3, lr}
	AccGyroMag_Update(&ACC_Value, (BSP_MOTION_SENSOR_Axes_t*) &COMP_Value,
 8005862:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <SendMotionData+0x14>)
 8005864:	f102 010c 	add.w	r1, r2, #12
 8005868:	f102 0018 	add.w	r0, r2, #24
 800586c:	f7ff fc78 	bl	8005160 <AccGyroMag_Update>
}
 8005870:	bd08      	pop	{r3, pc}
 8005872:	bf00      	nop
 8005874:	200001b0 	.word	0x200001b0

08005878 <LPF_A>:
	Xin = ACC_Value.z;           // input
 8005878:	4b0f      	ldr	r3, [pc, #60]	@ (80058b8 <LPF_A+0x40>)
 800587a:	edd3 7a08 	vldr	s15, [r3, #32]
 800587e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005882:	ed83 7a09 	vstr	s14, [r3, #36]	@ 0x24
	Yout = d*Yprev + (1-d)*Xin;  // filtered output
 8005886:	4a0d      	ldr	r2, [pc, #52]	@ (80058bc <LPF_A+0x44>)
 8005888:	ed92 6a00 	vldr	s12, [r2]
 800588c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005890:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005898:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800589c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80058a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058a4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	Yprev = Yout;
 80058a8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	ACC_Value.z = Yout;
 80058ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	200001b0 	.word	0x200001b0
 80058bc:	20000004 	.word	0x20000004

080058c0 <LPF_M>:
	Xin_mx = MAG_Value.x;           // input
 80058c0:	4b1a      	ldr	r3, [pc, #104]	@ (800592c <LPF_M+0x6c>)
 80058c2:	edd3 7a00 	vldr	s15, [r3]
 80058c6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80058ca:	ed83 6a0c 	vstr	s12, [r3, #48]	@ 0x30
	Xin_my = MAG_Value.y;           // input
 80058ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
	Yout_mx = d_m*Yprev_mx + (1-d_m)*Xin_mx;  // filtered output
 80058da:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <LPF_M+0x70>)
 80058dc:	edd2 7a01 	vldr	s15, [r2, #4]
 80058e0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80058e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058e8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80058ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80058f0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80058f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80058f8:	ed83 7a0f 	vstr	s14, [r3, #60]	@ 0x3c
	Yout_my = d_m*Yprev_my + (1-d_m)*Xin_my;  // filtered output
 80058fc:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 8005900:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005904:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	Yprev_mx = Yout_mx;
 8005910:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
	Yprev_my = Yout_my;
 8005914:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	MAG_Value.x = Yout_mx;
 8005918:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800591c:	ed83 7a00 	vstr	s14, [r3]
	MAG_Value.y = Yout_my;
 8005920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005924:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	200001b0 	.word	0x200001b0
 8005930:	20000004 	.word	0x20000004

08005934 <check_local>:
	for (int i = 0; i < buffer_n-1; i++) {
 8005934:	2200      	movs	r2, #0
 8005936:	e008      	b.n	800594a <check_local+0x16>
		y_buffer[i] = y_buffer[i+1];
 8005938:	1c51      	adds	r1, r2, #1
 800593a:	4b17      	ldr	r3, [pc, #92]	@ (8005998 <check_local+0x64>)
 800593c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8005940:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8005942:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005946:	6498      	str	r0, [r3, #72]	@ 0x48
	for (int i = 0; i < buffer_n-1; i++) {
 8005948:	460a      	mov	r2, r1
 800594a:	4b14      	ldr	r3, [pc, #80]	@ (800599c <check_local+0x68>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	3b01      	subs	r3, #1
 8005950:	4293      	cmp	r3, r2
 8005952:	dcf1      	bgt.n	8005938 <check_local+0x4>
	y_buffer[buffer_n-1] = ACC_Value.z;
 8005954:	4a10      	ldr	r2, [pc, #64]	@ (8005998 <check_local+0x64>)
 8005956:	6a11      	ldr	r1, [r2, #32]
 8005958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800595c:	6499      	str	r1, [r3, #72]	@ 0x48
	if ((y_buffer[0] > max_threshold) && (y_buffer[1] < max_threshold)) {
 800595e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8005960:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8005964:	4293      	cmp	r3, r2
 8005966:	dd08      	ble.n	800597a <check_local+0x46>
 8005968:	4a0b      	ldr	r2, [pc, #44]	@ (8005998 <check_local+0x64>)
 800596a:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 800596c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8005970:	4291      	cmp	r1, r2
 8005972:	dc02      	bgt.n	800597a <check_local+0x46>
		local_max = 1;
 8005974:	4a08      	ldr	r2, [pc, #32]	@ (8005998 <check_local+0x64>)
 8005976:	2101      	movs	r1, #1
 8005978:	6711      	str	r1, [r2, #112]	@ 0x70
	if ((y_buffer[0] < min_threshold) && (y_buffer[1] > min_threshold)) {
 800597a:	f240 3251 	movw	r2, #849	@ 0x351
 800597e:	4293      	cmp	r3, r2
 8005980:	dc08      	bgt.n	8005994 <check_local+0x60>
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <check_local+0x64>)
 8005984:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005986:	f240 3352 	movw	r3, #850	@ 0x352
 800598a:	429a      	cmp	r2, r3
 800598c:	dd02      	ble.n	8005994 <check_local+0x60>
		local_min = 1;
 800598e:	4b02      	ldr	r3, [pc, #8]	@ (8005998 <check_local+0x64>)
 8005990:	2201      	movs	r2, #1
 8005992:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	200001b0 	.word	0x200001b0
 800599c:	20000004 	.word	0x20000004

080059a0 <calc_orientation>:
void calc_orientation() {
 80059a0:	b508      	push	{r3, lr}
	int32_t mx = MAG_Value.x;
 80059a2:	4a37      	ldr	r2, [pc, #220]	@ (8005a80 <calc_orientation+0xe0>)
 80059a4:	ed92 7a00 	vldr	s14, [r2]
	int32_t my = MAG_Value.y;
 80059a8:	edd2 7a01 	vldr	s15, [r2, #4]
	float hx = mx;
 80059ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float hy = my;
 80059b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (hy > 0) {
 80059b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059bc:	dd1d      	ble.n	80059fa <calc_orientation+0x5a>
		heading_deg = 90 - atan(hx/hy)*180/3.141;
 80059be:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80059c2:	ee17 0a90 	vmov	r0, s15
 80059c6:	f7fe fdb7 	bl	8004538 <__aeabi_f2d>
 80059ca:	f004 ff45 	bl	800a858 <atan>
 80059ce:	2200      	movs	r2, #0
 80059d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <calc_orientation+0xe4>)
 80059d2:	f7fe fe09 	bl	80045e8 <__aeabi_dmul>
 80059d6:	a326      	add	r3, pc, #152	@ (adr r3, 8005a70 <calc_orientation+0xd0>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fe ff2e 	bl	800483c <__aeabi_ddiv>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	2000      	movs	r0, #0
 80059e6:	4928      	ldr	r1, [pc, #160]	@ (8005a88 <calc_orientation+0xe8>)
 80059e8:	f7fe fc46 	bl	8004278 <__aeabi_dsub>
 80059ec:	f7ff f896 	bl	8004b1c <__aeabi_d2iz>
	COMP_Value.Heading = -heading_deg + 360;
 80059f0:	f5c0 70b4 	rsb	r0, r0, #360	@ 0x168
 80059f4:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <calc_orientation+0xe0>)
 80059f6:	6118      	str	r0, [r3, #16]
}
 80059f8:	bd08      	pop	{r3, pc}
	} else if (hy < 0) {
 80059fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	d415      	bmi.n	8005a30 <calc_orientation+0x90>
	} else if (hy == 0 && hx < 0) {
 8005a04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	d104      	bne.n	8005a18 <calc_orientation+0x78>
 8005a0e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a16:	d426      	bmi.n	8005a66 <calc_orientation+0xc6>
	} else if (hy == 0 && hx > 0) {
 8005a18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	d1e6      	bne.n	80059f0 <calc_orientation+0x50>
 8005a22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	dde1      	ble.n	80059f0 <calc_orientation+0x50>
		heading_deg = 0;
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e7df      	b.n	80059f0 <calc_orientation+0x50>
		heading_deg = 270 - atan(hx/hy)*180/3.141;
 8005a30:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005a34:	ee17 0a90 	vmov	r0, s15
 8005a38:	f7fe fd7e 	bl	8004538 <__aeabi_f2d>
 8005a3c:	f004 ff0c 	bl	800a858 <atan>
 8005a40:	2200      	movs	r2, #0
 8005a42:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <calc_orientation+0xe4>)
 8005a44:	f7fe fdd0 	bl	80045e8 <__aeabi_dmul>
 8005a48:	a309      	add	r3, pc, #36	@ (adr r3, 8005a70 <calc_orientation+0xd0>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fe fef5 	bl	800483c <__aeabi_ddiv>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	a108      	add	r1, pc, #32	@ (adr r1, 8005a78 <calc_orientation+0xd8>)
 8005a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a5c:	f7fe fc0c 	bl	8004278 <__aeabi_dsub>
 8005a60:	f7ff f85c 	bl	8004b1c <__aeabi_d2iz>
 8005a64:	e7c4      	b.n	80059f0 <calc_orientation+0x50>
		heading_deg = 180;
 8005a66:	20b4      	movs	r0, #180	@ 0xb4
 8005a68:	e7c2      	b.n	80059f0 <calc_orientation+0x50>
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w
 8005a70:	9ba5e354 	.word	0x9ba5e354
 8005a74:	400920c4 	.word	0x400920c4
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	4070e000 	.word	0x4070e000
 8005a80:	200001b0 	.word	0x200001b0
 8005a84:	40668000 	.word	0x40668000
 8005a88:	40568000 	.word	0x40568000

08005a8c <UART5_Transmit>:
void UART5_Transmit(uint8_t *BufferToWrite, uint16_t BytesToWrite) {
 8005a8c:	b508      	push	{r3, lr}
 8005a8e:	460a      	mov	r2, r1
	HAL_UART_Transmit(&UartHandle, (uint8_t*) BufferToWrite, BytesToWrite,
 8005a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a94:	4601      	mov	r1, r0
 8005a96:	4802      	ldr	r0, [pc, #8]	@ (8005aa0 <UART5_Transmit+0x14>)
 8005a98:	f004 f881 	bl	8009b9e <HAL_UART_Transmit>
}
 8005a9c:	bd08      	pop	{r3, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000228 	.word	0x20000228

08005aa4 <Init_BlueNRG_Stack>:
static void Init_BlueNRG_Stack(void) {
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	b0d3      	sub	sp, #332	@ 0x14c
	char customName[8] = "CSys704";
 8005aa8:	4a70      	ldr	r2, [pc, #448]	@ (8005c6c <Init_BlueNRG_Stack+0x1c8>)
 8005aaa:	ab4e      	add	r3, sp, #312	@ 0x138
 8005aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ab0:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 7; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	dc08      	bgt.n	8005acc <Init_BlueNRG_Stack+0x28>
		BoardName[i] = customName[i];
 8005aba:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
 8005abe:	446a      	add	r2, sp
 8005ac0:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8005ac4:	f802 1c08 	strb.w	r1, [r2, #-8]
	for (int i = 0; i < 7; i++)
 8005ac8:	3301      	adds	r3, #1
 8005aca:	e7f4      	b.n	8005ab6 <Init_BlueNRG_Stack+0x12>
	BoardName[7] = 0;
 8005acc:	2100      	movs	r1, #0
 8005ace:	f88d 1147 	strb.w	r1, [sp, #327]	@ 0x147
	hci_init(HCI_Event_CB, NULL);
 8005ad2:	4867      	ldr	r0, [pc, #412]	@ (8005c70 <Init_BlueNRG_Stack+0x1cc>)
 8005ad4:	f004 fd1e 	bl	800a514 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8005ad8:	f50d 7197 	add.w	r1, sp, #302	@ 0x12e
 8005adc:	a84c      	add	r0, sp, #304	@ 0x130
 8005ade:	f004 fc03 	bl	800a2e8 <getBlueNRGVersion>
	aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out,
 8005ae2:	4c64      	ldr	r4, [pc, #400]	@ (8005c74 <Init_BlueNRG_Stack+0x1d0>)
 8005ae4:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 8005ae8:	f20d 1231 	addw	r2, sp, #305	@ 0x131
 8005aec:	2106      	movs	r1, #6
 8005aee:	2080      	movs	r0, #128	@ 0x80
 8005af0:	f004 fb98 	bl	800a224 <aci_hal_read_config_data>
	if ((bdaddr[5] & 0xC0) != 0xC0) {
 8005af4:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8005af8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005afc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005afe:	d016      	beq.n	8005b2e <Init_BlueNRG_Stack+0x8a>
		XPRINTF("\r\nStatic Random address not well formed.\r\n");
 8005b00:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8005b04:	4c5c      	ldr	r4, [pc, #368]	@ (8005c78 <Init_BlueNRG_Stack+0x1d4>)
 8005b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005b12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005b16:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005b1a:	f82c 2b02 	strh.w	r2, [ip], #2
 8005b1e:	0c12      	lsrs	r2, r2, #16
 8005b20:	f88c 2000 	strb.w	r2, [ip]
 8005b24:	212a      	movs	r1, #42	@ 0x2a
 8005b26:	a80b      	add	r0, sp, #44	@ 0x2c
 8005b28:	f7ff ffb0 	bl	8005a8c <UART5_Transmit>
		while (1)
 8005b2c:	e7fe      	b.n	8005b2c <Init_BlueNRG_Stack+0x88>
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 8005b2e:	4a53      	ldr	r2, [pc, #332]	@ (8005c7c <Init_BlueNRG_Stack+0x1d8>)
 8005b30:	f89d 1131 	ldrb.w	r1, [sp, #305]	@ 0x131
 8005b34:	2000      	movs	r0, #0
 8005b36:	f004 fb42 	bl	800a1be <aci_hal_write_config_data>
	hci_reset();
 8005b3a:	f004 fbfc 	bl	800a336 <hci_reset>
	ret = aci_gatt_init();
 8005b3e:	f004 fa13 	bl	8009f68 <aci_gatt_init>
	if (ret) {
 8005b42:	bb38      	cbnz	r0, 8005b94 <Init_BlueNRG_Stack+0xf0>
	ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07,
 8005b44:	f50d 7399 	add.w	r3, sp, #306	@ 0x132
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	ab4d      	add	r3, sp, #308	@ 0x134
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	f50d 739b 	add.w	r3, sp, #310	@ 0x136
 8005b52:	2207      	movs	r2, #7
 8005b54:	2100      	movs	r1, #0
 8005b56:	2001      	movs	r0, #1
 8005b58:	f004 f8f7 	bl	8009d4a <aci_gap_init_IDB05A1>
	if (ret != BLE_STATUS_SUCCESS) {
 8005b5c:	bb48      	cbnz	r0, 8005bb2 <Init_BlueNRG_Stack+0x10e>
	ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8005b5e:	ab50      	add	r3, sp, #320	@ 0x140
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2307      	movs	r3, #7
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8bd 1134 	ldrh.w	r1, [sp, #308]	@ 0x134
 8005b6a:	f8bd 0136 	ldrh.w	r0, [sp, #310]	@ 0x136
 8005b6e:	f004 fac7 	bl	800a100 <aci_gatt_update_char_value>
	if (ret) {
 8005b72:	b348      	cbz	r0, 8005bc8 <Init_BlueNRG_Stack+0x124>
		XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8005b74:	ac0b      	add	r4, sp, #44	@ 0x2c
 8005b76:	4d42      	ldr	r5, [pc, #264]	@ (8005c80 <Init_BlueNRG_Stack+0x1dc>)
 8005b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005b84:	f844 0b04 	str.w	r0, [r4], #4
 8005b88:	8021      	strh	r1, [r4, #0]
 8005b8a:	2125      	movs	r1, #37	@ 0x25
 8005b8c:	a80b      	add	r0, sp, #44	@ 0x2c
 8005b8e:	f7ff ff7d 	bl	8005a8c <UART5_Transmit>
		while (1)
 8005b92:	e7fe      	b.n	8005b92 <Init_BlueNRG_Stack+0xee>
		XPRINTF("\r\nGATT_Init failed\r\n");
 8005b94:	ac0b      	add	r4, sp, #44	@ 0x2c
 8005b96:	4d3b      	ldr	r5, [pc, #236]	@ (8005c84 <Init_BlueNRG_Stack+0x1e0>)
 8005b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ba0:	f844 0b04 	str.w	r0, [r4], #4
 8005ba4:	7021      	strb	r1, [r4, #0]
 8005ba6:	2114      	movs	r1, #20
 8005ba8:	a80b      	add	r0, sp, #44	@ 0x2c
 8005baa:	f7ff ff6f 	bl	8005a8c <UART5_Transmit>
}
 8005bae:	b053      	add	sp, #332	@ 0x14c
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		XPRINTF("\r\nGAP_Init failed\r\n");
 8005bb2:	ac0b      	add	r4, sp, #44	@ 0x2c
 8005bb4:	4d34      	ldr	r5, [pc, #208]	@ (8005c88 <Init_BlueNRG_Stack+0x1e4>)
 8005bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bba:	682b      	ldr	r3, [r5, #0]
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	2113      	movs	r1, #19
 8005bc0:	a80b      	add	r0, sp, #44	@ 0x2c
 8005bc2:	f7ff ff63 	bl	8005a8c <UART5_Transmit>
		goto fail;
 8005bc6:	e7f2      	b.n	8005bae <Init_BlueNRG_Stack+0x10a>
	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8005bc8:	2001      	movs	r0, #1
 8005bca:	9003      	str	r0, [sp, #12]
 8005bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005c8c <Init_BlueNRG_Stack+0x1e8>)
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	9101      	str	r1, [sp, #4]
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2307      	movs	r3, #7
 8005bda:	460a      	mov	r2, r1
 8005bdc:	f004 f94d 	bl	8009e7a <aci_gap_set_auth_requirement>
	if (ret != BLE_STATUS_SUCCESS) {
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d132      	bne.n	8005c4a <Init_BlueNRG_Stack+0x1a6>
	XPRINTF("SERVER: BLE Stack Initialized \r\n"
 8005be4:	f89d 2130 	ldrb.w	r2, [sp, #304]	@ 0x130
 8005be8:	f8bd 112e 	ldrh.w	r1, [sp, #302]	@ 0x12e
 8005bec:	f001 000f 	and.w	r0, r1, #15
 8005bf0:	4b20      	ldr	r3, [pc, #128]	@ (8005c74 <Init_BlueNRG_Stack+0x1d0>)
 8005bf2:	f893 4101 	ldrb.w	r4, [r3, #257]	@ 0x101
 8005bf6:	f893 7100 	ldrb.w	r7, [r3, #256]	@ 0x100
 8005bfa:	f893 e0ff 	ldrb.w	lr, [r3, #255]	@ 0xff
 8005bfe:	f893 50fe 	ldrb.w	r5, [r3, #254]	@ 0xfe
 8005c02:	f893 60fd 	ldrb.w	r6, [r3, #253]	@ 0xfd
 8005c06:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8005c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0c:	9608      	str	r6, [sp, #32]
 8005c0e:	9507      	str	r5, [sp, #28]
 8005c10:	f8cd e018 	str.w	lr, [sp, #24]
 8005c14:	9705      	str	r7, [sp, #20]
 8005c16:	9404      	str	r4, [sp, #16]
 8005c18:	ab50      	add	r3, sp, #320	@ 0x140
 8005c1a:	9303      	str	r3, [sp, #12]
 8005c1c:	3061      	adds	r0, #97	@ 0x61
 8005c1e:	9002      	str	r0, [sp, #8]
 8005c20:	f3c1 1303 	ubfx	r3, r1, #4, #4
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	0a09      	lsrs	r1, r1, #8
 8005c28:	9100      	str	r1, [sp, #0]
 8005c2a:	f002 030f 	and.w	r3, r2, #15
 8005c2e:	0912      	lsrs	r2, r2, #4
 8005c30:	4917      	ldr	r1, [pc, #92]	@ (8005c90 <Init_BlueNRG_Stack+0x1ec>)
 8005c32:	a80b      	add	r0, sp, #44	@ 0x2c
 8005c34:	f004 ffa4 	bl	800ab80 <siprintf>
 8005c38:	b281      	uxth	r1, r0
 8005c3a:	a80b      	add	r0, sp, #44	@ 0x2c
 8005c3c:	f7ff ff26 	bl	8005a8c <UART5_Transmit>
	aci_hal_set_tx_power_level(1, 4);
 8005c40:	2104      	movs	r1, #4
 8005c42:	2001      	movs	r0, #1
 8005c44:	f004 fb28 	bl	800a298 <aci_hal_set_tx_power_level>
	return;
 8005c48:	e7b1      	b.n	8005bae <Init_BlueNRG_Stack+0x10a>
		XPRINTF("\r\nGAP setting Authentication failed\r\n");
 8005c4a:	ac0b      	add	r4, sp, #44	@ 0x2c
 8005c4c:	4d11      	ldr	r5, [pc, #68]	@ (8005c94 <Init_BlueNRG_Stack+0x1f0>)
 8005c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c5a:	f844 0b04 	str.w	r0, [r4], #4
 8005c5e:	8021      	strh	r1, [r4, #0]
 8005c60:	2125      	movs	r1, #37	@ 0x25
 8005c62:	a80b      	add	r0, sp, #44	@ 0x2c
 8005c64:	f7ff ff12 	bl	8005a8c <UART5_Transmit>
		goto fail;
 8005c68:	e7a1      	b.n	8005bae <Init_BlueNRG_Stack+0x10a>
 8005c6a:	bf00      	nop
 8005c6c:	0800b70c 	.word	0x0800b70c
 8005c70:	08005379 	.word	0x08005379
 8005c74:	200001b0 	.word	0x200001b0
 8005c78:	0800b5f0 	.word	0x0800b5f0
 8005c7c:	200002ac 	.word	0x200002ac
 8005c80:	0800b648 	.word	0x0800b648
 8005c84:	0800b61c 	.word	0x0800b61c
 8005c88:	0800b634 	.word	0x0800b634
 8005c8c:	0001e240 	.word	0x0001e240
 8005c90:	0800b698 	.word	0x0800b698
 8005c94:	0800b670 	.word	0x0800b670

08005c98 <Init_BlueNRG_Custom_Services>:
static void Init_BlueNRG_Custom_Services(void) {
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	b0c0      	sub	sp, #256	@ 0x100
	ret = Add_HW_SW_ServW2ST_Service();
 8005c9c:	f7ff f9c0 	bl	8005020 <Add_HW_SW_ServW2ST_Service>
	if (ret == BLE_STATUS_SUCCESS) {
 8005ca0:	b998      	cbnz	r0, 8005cca <Init_BlueNRG_Custom_Services+0x32>
		XPRINTF("HW & SW Service W2ST added successfully\r\n");
 8005ca2:	46ec      	mov	ip, sp
 8005ca4:	4c11      	ldr	r4, [pc, #68]	@ (8005cec <Init_BlueNRG_Custom_Services+0x54>)
 8005ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005cb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005cb6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005cba:	f8ac 2000 	strh.w	r2, [ip]
 8005cbe:	2129      	movs	r1, #41	@ 0x29
 8005cc0:	4668      	mov	r0, sp
 8005cc2:	f7ff fee3 	bl	8005a8c <UART5_Transmit>
}
 8005cc6:	b040      	add	sp, #256	@ 0x100
 8005cc8:	bd10      	pop	{r4, pc}
		XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 8005cca:	46ec      	mov	ip, sp
 8005ccc:	4c08      	ldr	r4, [pc, #32]	@ (8005cf0 <Init_BlueNRG_Custom_Services+0x58>)
 8005cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005cda:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005cde:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005ce2:	212b      	movs	r1, #43	@ 0x2b
 8005ce4:	4668      	mov	r0, sp
 8005ce6:	f7ff fed1 	bl	8005a8c <UART5_Transmit>
}
 8005cea:	e7ec      	b.n	8005cc6 <Init_BlueNRG_Custom_Services+0x2e>
 8005cec:	0800b714 	.word	0x0800b714
 8005cf0:	0800b740 	.word	0x0800b740

08005cf4 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8005cf4:	b508      	push	{r3, lr}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8005cf6:	7f03      	ldrb	r3, [r0, #28]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d000      	beq.n	8005cfe <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8005cfc:	bd08      	pop	{r3, pc}
		uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8005cfe:	210c      	movs	r1, #12
 8005d00:	f002 ffe4 	bl	8008ccc <HAL_TIM_ReadCapturedValue>
		__HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4,
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8005d06:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005d0a:	4905      	ldr	r1, [pc, #20]	@ (8005d20 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8005d0c:	68c9      	ldr	r1, [r1, #12]
 8005d0e:	4408      	add	r0, r1
 8005d10:	6410      	str	r0, [r2, #64]	@ 0x40
		SendAccGyroMag = 1;
 8005d12:	2201      	movs	r2, #1
 8005d14:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8005d18:	e7f0      	b.n	8005cfc <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8005d1a:	bf00      	nop
 8005d1c:	200001b0 	.word	0x200001b0
 8005d20:	20000004 	.word	0x20000004

08005d24 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == (&TimEnvHandle)) {
 8005d24:	4b04      	ldr	r3, [pc, #16]	@ (8005d38 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8005d26:	4283      	cmp	r3, r0
 8005d28:	d000      	beq.n	8005d2c <HAL_TIM_PeriodElapsedCallback+0x8>
}
 8005d2a:	4770      	bx	lr
		ReadSensor = 1;
 8005d2c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005d30:	2201      	movs	r2, #1
 8005d32:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
}
 8005d36:	e7f8      	b.n	8005d2a <HAL_TIM_PeriodElapsedCallback+0x6>
 8005d38:	20000304 	.word	0x20000304

08005d3c <Sensor_IO_SPI_CS_Init_All>:
uint8_t Sensor_IO_SPI_CS_Init_All(void) {
 8005d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	b08b      	sub	sp, #44	@ 0x2c
	BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8005d42:	4b72      	ldr	r3, [pc, #456]	@ (8005f0c <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 8005d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d46:	f042 0202 	orr.w	r2, r2, #2
 8005d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d4e:	f002 0202 	and.w	r2, r2, #2
 8005d52:	9200      	str	r2, [sp, #0]
 8005d54:	9a00      	ldr	r2, [sp, #0]
	BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8005d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d58:	f042 0202 	orr.w	r2, r2, #2
 8005d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d60:	f002 0202 	and.w	r2, r2, #2
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	9a01      	ldr	r2, [sp, #4]
	BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8005d68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d6a:	f042 0204 	orr.w	r2, r2, #4
 8005d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d72:	f002 0204 	and.w	r2, r2, #4
 8005d76:	9202      	str	r2, [sp, #8]
 8005d78:	9a02      	ldr	r2, [sp, #8]
	BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8005d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	9303      	str	r3, [sp, #12]
 8005d8a:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005d8c:	4d60      	ldr	r5, [pc, #384]	@ (8005f10 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d94:	4628      	mov	r0, r5
 8005d96:	f001 f90c 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,
 8005d9a:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 8005f14 <Sensor_IO_SPI_CS_Init_All+0x1d8>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	2110      	movs	r1, #16
 8005da2:	4640      	mov	r0, r8
 8005da4:	f001 f905 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 8005da8:	2201      	movs	r2, #1
 8005daa:	2102      	movs	r1, #2
 8005dac:	4628      	mov	r0, r5
 8005dae:	f001 f900 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005db2:	2201      	movs	r2, #1
 8005db4:	2108      	movs	r1, #8
 8005db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dba:	f001 f8fa 	bl	8006fb2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dc6:	2401      	movs	r4, #1
 8005dc8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8005dca:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 8005dce:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8005dd2:	a905      	add	r1, sp, #20
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 ff61 	bl	8006c9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005dda:	4622      	mov	r2, r4
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4628      	mov	r0, r5
 8005de0:	f001 f8e7 	bl	8006fb2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8005de4:	2710      	movs	r7, #16
 8005de6:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8005de8:	a905      	add	r1, sp, #20
 8005dea:	4640      	mov	r0, r8
 8005dec:	f000 ff56 	bl	8006c9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,
 8005df0:	4622      	mov	r2, r4
 8005df2:	4639      	mov	r1, r7
 8005df4:	4640      	mov	r0, r8
 8005df6:	f001 f8dc 	bl	8006fb2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8005dfa:	f04f 0b02 	mov.w	fp, #2
 8005dfe:	f8cd b014 	str.w	fp, [sp, #20]
	HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8005e02:	a905      	add	r1, sp, #20
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 ff49 	bl	8006c9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f001 f8cf 	bl	8006fb2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8005e14:	f04f 0a08 	mov.w	sl, #8
 8005e18:	f8cd a014 	str.w	sl, [sp, #20]
	HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8005e1c:	a905      	add	r1, sp, #20
 8005e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e22:	f000 ff3b 	bl	8006c9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005e26:	4622      	mov	r2, r4
 8005e28:	4651      	mov	r1, sl
 8005e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e2e:	f001 f8c0 	bl	8006fb2 <HAL_GPIO_WritePin>
	if (BSP_SPI2_Init() == BSP_ERROR_NONE) {
 8005e32:	f000 fddf 	bl	80069f4 <BSP_SPI2_Init>
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 8005e36:	4632      	mov	r2, r6
 8005e38:	4659      	mov	r1, fp
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f001 f8b9 	bl	8006fb2 <HAL_GPIO_WritePin>
	inData[0] = (0x62U);
 8005e40:	2362      	movs	r3, #98	@ 0x62
 8005e42:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005e46:	4621      	mov	r1, r4
 8005e48:	eb0d 0007 	add.w	r0, sp, r7
 8005e4c:	f000 fd30 	bl	80068b0 <BSP_SPI2_Send>
	inData[0] = 0x20;
 8005e50:	2320      	movs	r3, #32
 8005e52:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005e56:	4621      	mov	r1, r4
 8005e58:	eb0d 0007 	add.w	r0, sp, r7
 8005e5c:	f000 fd28 	bl	80068b0 <BSP_SPI2_Send>
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 8005e60:	4622      	mov	r2, r4
 8005e62:	4659      	mov	r1, fp
 8005e64:	4628      	mov	r0, r5
 8005e66:	f001 f8a4 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f001 f89f 	bl	8006fb2 <HAL_GPIO_WritePin>
	inData[0] = (0x23U);
 8005e74:	2323      	movs	r3, #35	@ 0x23
 8005e76:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	eb0d 0007 	add.w	r0, sp, r7
 8005e80:	f000 fd16 	bl	80068b0 <BSP_SPI2_Send>
	inData[0] = 0x01;
 8005e84:	f88d 4010 	strb.w	r4, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005e88:	4621      	mov	r1, r4
 8005e8a:	eb0d 0007 	add.w	r0, sp, r7
 8005e8e:	f000 fd0f 	bl	80068b0 <BSP_SPI2_Send>
	HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,
 8005e92:	4622      	mov	r2, r4
 8005e94:	4639      	mov	r1, r7
 8005e96:	4640      	mov	r0, r8
 8005e98:	f001 f88b 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ea4:	f001 f885 	bl	8006fb2 <HAL_GPIO_WritePin>
	inData[0] = (0x10U);
 8005ea8:	f88d 7010 	strb.w	r7, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005eac:	4621      	mov	r1, r4
 8005eae:	eb0d 0007 	add.w	r0, sp, r7
 8005eb2:	f000 fcfd 	bl	80068b0 <BSP_SPI2_Send>
	inData[0] = 0x01;
 8005eb6:	f88d 4010 	strb.w	r4, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005eba:	4621      	mov	r1, r4
 8005ebc:	eb0d 0007 	add.w	r0, sp, r7
 8005ec0:	f000 fcf6 	bl	80068b0 <BSP_SPI2_Send>
	HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ecc:	f001 f871 	bl	8006fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f001 f86c 	bl	8006fb2 <HAL_GPIO_WritePin>
	inData[0] = (0x12U);
 8005eda:	2312      	movs	r3, #18
 8005edc:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	eb0d 0007 	add.w	r0, sp, r7
 8005ee6:	f000 fce3 	bl	80068b0 <BSP_SPI2_Send>
	inData[0] = 0x0C;
 8005eea:	230c      	movs	r3, #12
 8005eec:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_SPI2_Send(inData, 1);
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	eb0d 0007 	add.w	r0, sp, r7
 8005ef6:	f000 fcdb 	bl	80068b0 <BSP_SPI2_Send>
	HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005efa:	4622      	mov	r2, r4
 8005efc:	4649      	mov	r1, r9
 8005efe:	4628      	mov	r0, r5
 8005f00:	f001 f857 	bl	8006fb2 <HAL_GPIO_WritePin>
}
 8005f04:	4630      	mov	r0, r6
 8005f06:	b00b      	add	sp, #44	@ 0x2c
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	48000400 	.word	0x48000400
 8005f14:	48000800 	.word	0x48000800

08005f18 <LSM303AGR_SPI_Read_nBytes>:
		uint16_t nBytesToRead) {
 8005f18:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f1a:	b672      	cpsid	i
	__HAL_SPI_ENABLE(xSpiHandle);
 8005f1c:	6804      	ldr	r4, [r0, #0]
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f24:	6023      	str	r3, [r4, #0]
	while (nBytesToRead > 1U) {
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	d90a      	bls.n	8005f40 <LSM303AGR_SPI_Read_nBytes+0x28>
		if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE) {
 8005f2a:	6803      	ldr	r3, [r0, #0]
 8005f2c:	689c      	ldr	r4, [r3, #8]
 8005f2e:	f014 0f01 	tst.w	r4, #1
 8005f32:	d0f8      	beq.n	8005f26 <LSM303AGR_SPI_Read_nBytes+0xe>
			*val = *(__IO uint8_t*) &xSpiHandle->Instance->DR;
 8005f34:	7b1b      	ldrb	r3, [r3, #12]
 8005f36:	f801 3b01 	strb.w	r3, [r1], #1
			nBytesToRead--;
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	e7f2      	b.n	8005f26 <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
	__HAL_SPI_DISABLE(xSpiHandle);
 8005f48:	6802      	ldr	r2, [r0, #0]
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f50:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f52:	b662      	cpsie	i
	while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE)
 8005f54:	6803      	ldr	r3, [r0, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	f012 0f01 	tst.w	r2, #1
 8005f5c:	d0fa      	beq.n	8005f54 <LSM303AGR_SPI_Read_nBytes+0x3c>
	*val = *(__IO uint8_t*) &xSpiHandle->Instance->DR;
 8005f5e:	7b1b      	ldrb	r3, [r3, #12]
 8005f60:	700b      	strb	r3, [r1, #0]
	while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f6a:	d1fa      	bne.n	8005f62 <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005f72:	b672      	cpsid	i
	__HAL_SPI_ENABLE(xSpiHandle);
 8005f74:	6802      	ldr	r2, [r0, #0]
 8005f76:	6813      	ldr	r3, [r2, #0]
 8005f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7c:	6013      	str	r3, [r2, #0]
	__asm("dsb\n");
 8005f7e:	f3bf 8f4f 	dsb	sy
	__asm("dsb\n");
 8005f82:	f3bf 8f4f 	dsb	sy
	__HAL_SPI_DISABLE(xSpiHandle);
 8005f86:	6802      	ldr	r2, [r0, #0]
 8005f88:	6813      	ldr	r3, [r2, #0]
 8005f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f8e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f90:	b662      	cpsie	i
	while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE)
 8005f92:	6803      	ldr	r3, [r0, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	f012 0f01 	tst.w	r2, #1
 8005f9a:	d0fa      	beq.n	8005f92 <LSM303AGR_SPI_Read+0x20>
	*val = *(__IO uint8_t*) &xSpiHandle->Instance->DR;
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	700b      	strb	r3, [r1, #0]
	while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fa8:	d1fa      	bne.n	8005fa0 <LSM303AGR_SPI_Read+0x2e>
}
 8005faa:	4770      	bx	lr

08005fac <LSM303AGR_SPI_Write>:
	while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8005fac:	6803      	ldr	r3, [r0, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	f012 0f02 	tst.w	r2, #2
 8005fb4:	d0fa      	beq.n	8005fac <LSM303AGR_SPI_Write>
	*((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005fb6:	7319      	strb	r1, [r3, #12]
	while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8005fb8:	6803      	ldr	r3, [r0, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f412 5fc0 	tst.w	r2, #6144	@ 0x1800
 8005fc0:	d1fa      	bne.n	8005fb8 <LSM303AGR_SPI_Write+0xc>
	while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005fc8:	d1fb      	bne.n	8005fc2 <LSM303AGR_SPI_Write+0x16>
}
 8005fca:	4770      	bx	lr

08005fcc <BSP_LSM303AGR_ReadReg_Mag>:
		uint16_t len) {
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	460d      	mov	r5, r1
 8005fd0:	4614      	mov	r4, r2
	uint8_t dataReg = (uint8_t) Reg;
 8005fd2:	b2c7      	uxtb	r7, r0
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	4818      	ldr	r0, [pc, #96]	@ (800603c <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005fda:	f000 ffea 	bl	8006fb2 <HAL_GPIO_WritePin>
	LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005fde:	4e18      	ldr	r6, [pc, #96]	@ (8006040 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005fe0:	f047 0180 	orr.w	r1, r7, #128	@ 0x80
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff ffe1 	bl	8005fac <LSM303AGR_SPI_Write>
	__HAL_SPI_DISABLE(&hbusspi2);
 8005fea:	6832      	ldr	r2, [r6, #0]
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ff2:	6013      	str	r3, [r2, #0]
	SPI_1LINE_RX(&hbusspi2);
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ffc:	6013      	str	r3, [r2, #0]
	if (len > 1) {
 8005ffe:	2c01      	cmp	r4, #1
 8006000:	d916      	bls.n	8006030 <BSP_LSM303AGR_ReadReg_Mag+0x64>
		LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8006002:	4622      	mov	r2, r4
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f7ff ff86 	bl	8005f18 <LSM303AGR_SPI_Read_nBytes>
	HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,
 800600c:	2201      	movs	r2, #1
 800600e:	2102      	movs	r1, #2
 8006010:	480a      	ldr	r0, [pc, #40]	@ (800603c <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8006012:	f000 ffce 	bl	8006fb2 <HAL_GPIO_WritePin>
	SPI_1LINE_TX(&hbusspi2);
 8006016:	4a0a      	ldr	r2, [pc, #40]	@ (8006040 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	680b      	ldr	r3, [r1, #0]
 800601c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006020:	600b      	str	r3, [r1, #0]
	__HAL_SPI_ENABLE(&hbusspi2);
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	2000      	movs	r0, #0
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8006030:	4629      	mov	r1, r5
 8006032:	4803      	ldr	r0, [pc, #12]	@ (8006040 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8006034:	f7ff ff9d 	bl	8005f72 <LSM303AGR_SPI_Read>
 8006038:	e7e8      	b.n	800600c <BSP_LSM303AGR_ReadReg_Mag+0x40>
 800603a:	bf00      	nop
 800603c:	48000400 	.word	0x48000400
 8006040:	200004a8 	.word	0x200004a8

08006044 <readMag>:
static void readMag() {
 8006044:	b530      	push	{r4, r5, lr}
 8006046:	b087      	sub	sp, #28
	BSP_LSM303AGR_ReadReg_Mag(0x68, inDataL, 1);
 8006048:	2201      	movs	r2, #1
 800604a:	a903      	add	r1, sp, #12
 800604c:	2068      	movs	r0, #104	@ 0x68
 800604e:	f7ff ffbd 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x69, inDataH, 1);
 8006052:	2201      	movs	r2, #1
 8006054:	4669      	mov	r1, sp
 8006056:	2069      	movs	r0, #105	@ 0x69
 8006058:	f7ff ffb8 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	magx = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 800605c:	f89d 3000 	ldrb.w	r3, [sp]
 8006060:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8006064:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8006068:	b22d      	sxth	r5, r5
	BSP_LSM303AGR_ReadReg_Mag(0x6A, inDataL, 1);
 800606a:	2201      	movs	r2, #1
 800606c:	a903      	add	r1, sp, #12
 800606e:	206a      	movs	r0, #106	@ 0x6a
 8006070:	f7ff ffac 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x6B, inDataH, 1);
 8006074:	2201      	movs	r2, #1
 8006076:	4669      	mov	r1, sp
 8006078:	206b      	movs	r0, #107	@ 0x6b
 800607a:	f7ff ffa7 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	magy = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 800607e:	f89d 3000 	ldrb.w	r3, [sp]
 8006082:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8006086:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800608a:	b224      	sxth	r4, r4
	BSP_LSM303AGR_ReadReg_Mag(0x6C, inDataL, 1);
 800608c:	2201      	movs	r2, #1
 800608e:	a903      	add	r1, sp, #12
 8006090:	206c      	movs	r0, #108	@ 0x6c
 8006092:	f7ff ff9b 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x6D, inDataH, 1);
 8006096:	2201      	movs	r2, #1
 8006098:	4669      	mov	r1, sp
 800609a:	206d      	movs	r0, #109	@ 0x6d
 800609c:	f7ff ff96 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	magz = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 80060a0:	f89d 2000 	ldrb.w	r2, [sp]
 80060a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80060a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80060ac:	b21b      	sxth	r3, r3
	MAG_Value.x = magx;
 80060ae:	4a03      	ldr	r2, [pc, #12]	@ (80060bc <readMag+0x78>)
 80060b0:	6015      	str	r5, [r2, #0]
	MAG_Value.y = magy;
 80060b2:	6054      	str	r4, [r2, #4]
	MAG_Value.z = magz;
 80060b4:	6093      	str	r3, [r2, #8]
}
 80060b6:	b007      	add	sp, #28
 80060b8:	bd30      	pop	{r4, r5, pc}
 80060ba:	bf00      	nop
 80060bc:	200001b0 	.word	0x200001b0

080060c0 <BSP_LSM303AGR_ReadReg_Acc>:
static int32_t BSP_LSM303AGR_ReadReg_Acc(uint16_t Reg, uint8_t *pdata, uint16_t len) {
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	460d      	mov	r5, r1
 80060c4:	4614      	mov	r4, r2
	uint8_t dataReg = (uint8_t) Reg;
 80060c6:	b2c6      	uxtb	r6, r0
	LSM_ACC_CS_LOW();
 80060c8:	2200      	movs	r2, #0
 80060ca:	2110      	movs	r1, #16
 80060cc:	481c      	ldr	r0, [pc, #112]	@ (8006140 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 80060ce:	f000 ff70 	bl	8006fb2 <HAL_GPIO_WritePin>
	if (len > 1) {
 80060d2:	2c01      	cmp	r4, #1
 80060d4:	d928      	bls.n	8006128 <BSP_LSM303AGR_ReadReg_Acc+0x68>
		LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 80060d6:	f046 01c0 	orr.w	r1, r6, #192	@ 0xc0
 80060da:	481a      	ldr	r0, [pc, #104]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 80060dc:	f7ff ff66 	bl	8005fac <LSM303AGR_SPI_Write>
	__HAL_SPI_DISABLE(&hbusspi2);
 80060e0:	4a18      	ldr	r2, [pc, #96]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 80060e2:	6811      	ldr	r1, [r2, #0]
 80060e4:	680b      	ldr	r3, [r1, #0]
 80060e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ea:	600b      	str	r3, [r1, #0]
	SPI_1LINE_RX(&hbusspi2);
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060f4:	6013      	str	r3, [r2, #0]
	if (len > 1) {
 80060f6:	2c01      	cmp	r4, #1
 80060f8:	d91c      	bls.n	8006134 <BSP_LSM303AGR_ReadReg_Acc+0x74>
		LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 80060fa:	4622      	mov	r2, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	4811      	ldr	r0, [pc, #68]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8006100:	f7ff ff0a 	bl	8005f18 <LSM303AGR_SPI_Read_nBytes>
	LSM_ACC_CS_HIGH();
 8006104:	2201      	movs	r2, #1
 8006106:	2110      	movs	r1, #16
 8006108:	480d      	ldr	r0, [pc, #52]	@ (8006140 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 800610a:	f000 ff52 	bl	8006fb2 <HAL_GPIO_WritePin>
	SPI_1LINE_TX(&hbusspi2);
 800610e:	4a0d      	ldr	r2, [pc, #52]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	680b      	ldr	r3, [r1, #0]
 8006114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006118:	600b      	str	r3, [r1, #0]
	__HAL_SPI_ENABLE(&hbusspi2);
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006122:	6013      	str	r3, [r2, #0]
}
 8006124:	2000      	movs	r0, #0
 8006126:	bd70      	pop	{r4, r5, r6, pc}
		LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8006128:	f046 0180 	orr.w	r1, r6, #128	@ 0x80
 800612c:	4805      	ldr	r0, [pc, #20]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800612e:	f7ff ff3d 	bl	8005fac <LSM303AGR_SPI_Write>
 8006132:	e7d5      	b.n	80060e0 <BSP_LSM303AGR_ReadReg_Acc+0x20>
		LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8006134:	4629      	mov	r1, r5
 8006136:	4803      	ldr	r0, [pc, #12]	@ (8006144 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8006138:	f7ff ff1b 	bl	8005f72 <LSM303AGR_SPI_Read>
 800613c:	e7e2      	b.n	8006104 <BSP_LSM303AGR_ReadReg_Acc+0x44>
 800613e:	bf00      	nop
 8006140:	48000800 	.word	0x48000800
 8006144:	200004a8 	.word	0x200004a8

08006148 <InitLSM>:
static void InitLSM() {
 8006148:	b510      	push	{r4, lr}
 800614a:	b0c4      	sub	sp, #272	@ 0x110
	Sensor_IO_SPI_CS_Init_All();
 800614c:	f7ff fdf6 	bl	8005d3c <Sensor_IO_SPI_CS_Init_All>
	inData[0] = 0x01;
 8006150:	2401      	movs	r4, #1
 8006152:	f88d 4104 	strb.w	r4, [sp, #260]	@ 0x104
	BSP_LSM303AGR_WriteReg_Acc(0x23, inData, 1);
 8006156:	4622      	mov	r2, r4
 8006158:	a941      	add	r1, sp, #260	@ 0x104
 800615a:	2023      	movs	r0, #35	@ 0x23
 800615c:	f7ff fb00 	bl	8005760 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x20;
 8006160:	2320      	movs	r3, #32
 8006162:	f88d 3104 	strb.w	r3, [sp, #260]	@ 0x104
	BSP_LSM303AGR_WriteReg_Mag(0x62U, inData, 1);
 8006166:	4622      	mov	r2, r4
 8006168:	a941      	add	r1, sp, #260	@ 0x104
 800616a:	2062      	movs	r0, #98	@ 0x62
 800616c:	f7ff fb38 	bl	80057e0 <BSP_LSM303AGR_WriteReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x4F, inData, 1);
 8006170:	4622      	mov	r2, r4
 8006172:	a941      	add	r1, sp, #260	@ 0x104
 8006174:	204f      	movs	r0, #79	@ 0x4f
 8006176:	f7ff ff29 	bl	8005fcc <BSP_LSM303AGR_ReadReg_Mag>
	XPRINTF("IAM Mag= %d,%d", inData[0], inData[1]);
 800617a:	f89d 3105 	ldrb.w	r3, [sp, #261]	@ 0x105
 800617e:	f89d 2104 	ldrb.w	r2, [sp, #260]	@ 0x104
 8006182:	490d      	ldr	r1, [pc, #52]	@ (80061b8 <InitLSM+0x70>)
 8006184:	a801      	add	r0, sp, #4
 8006186:	f004 fcfb 	bl	800ab80 <siprintf>
 800618a:	b281      	uxth	r1, r0
 800618c:	a801      	add	r0, sp, #4
 800618e:	f7ff fc7d 	bl	8005a8c <UART5_Transmit>
	BSP_LSM303AGR_ReadReg_Acc(0x0F, inData, 1);
 8006192:	4622      	mov	r2, r4
 8006194:	a941      	add	r1, sp, #260	@ 0x104
 8006196:	200f      	movs	r0, #15
 8006198:	f7ff ff92 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	XPRINTF("IAM Acc= %d,%d", inData[0], inData[1]);
 800619c:	f89d 3105 	ldrb.w	r3, [sp, #261]	@ 0x105
 80061a0:	f89d 2104 	ldrb.w	r2, [sp, #260]	@ 0x104
 80061a4:	4905      	ldr	r1, [pc, #20]	@ (80061bc <InitLSM+0x74>)
 80061a6:	a801      	add	r0, sp, #4
 80061a8:	f004 fcea 	bl	800ab80 <siprintf>
 80061ac:	b281      	uxth	r1, r0
 80061ae:	a801      	add	r0, sp, #4
 80061b0:	f7ff fc6c 	bl	8005a8c <UART5_Transmit>
}
 80061b4:	b044      	add	sp, #272	@ 0x110
 80061b6:	bd10      	pop	{r4, pc}
 80061b8:	0800b76c 	.word	0x0800b76c
 80061bc:	0800b77c 	.word	0x0800b77c

080061c0 <readAcc>:
static void readAcc() {
 80061c0:	b530      	push	{r4, r5, lr}
 80061c2:	b087      	sub	sp, #28
	BSP_LSM303AGR_ReadReg_Acc(0x28, inDataL, 1);
 80061c4:	2201      	movs	r2, #1
 80061c6:	a903      	add	r1, sp, #12
 80061c8:	2028      	movs	r0, #40	@ 0x28
 80061ca:	f7ff ff79 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(0x29, inDataH, 1);
 80061ce:	2201      	movs	r2, #1
 80061d0:	4669      	mov	r1, sp
 80061d2:	2029      	movs	r0, #41	@ 0x29
 80061d4:	f7ff ff74 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	accx = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 80061d8:	f89d 3000 	ldrb.w	r3, [sp]
 80061dc:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80061e0:	eb05 2503 	add.w	r5, r5, r3, lsl #8
	accx = accx >> 4;  // shift non-data bits out (using 12-bit precision in HR mode)
 80061e4:	f345 150b 	sbfx	r5, r5, #4, #12
 80061e8:	b22d      	sxth	r5, r5
	BSP_LSM303AGR_ReadReg_Acc(0x2A, inDataL, 1);
 80061ea:	2201      	movs	r2, #1
 80061ec:	a903      	add	r1, sp, #12
 80061ee:	202a      	movs	r0, #42	@ 0x2a
 80061f0:	f7ff ff66 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(0x2B, inDataH, 1);
 80061f4:	2201      	movs	r2, #1
 80061f6:	4669      	mov	r1, sp
 80061f8:	202b      	movs	r0, #43	@ 0x2b
 80061fa:	f7ff ff61 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	accy = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 80061fe:	f89d 3000 	ldrb.w	r3, [sp]
 8006202:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8006206:	eb04 2403 	add.w	r4, r4, r3, lsl #8
	accy = accy >> 4;  // shift non-data bits out (using 12-bit precision in HR mode)
 800620a:	f344 140b 	sbfx	r4, r4, #4, #12
 800620e:	b224      	sxth	r4, r4
	BSP_LSM303AGR_ReadReg_Acc(0x2C, inDataL, 1);
 8006210:	2201      	movs	r2, #1
 8006212:	a903      	add	r1, sp, #12
 8006214:	202c      	movs	r0, #44	@ 0x2c
 8006216:	f7ff ff53 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	BSP_LSM303AGR_ReadReg_Acc(0x2D, inDataH, 1);
 800621a:	2201      	movs	r2, #1
 800621c:	4669      	mov	r1, sp
 800621e:	202d      	movs	r0, #45	@ 0x2d
 8006220:	f7ff ff4e 	bl	80060c0 <BSP_LSM303AGR_ReadReg_Acc>
	accz = (inDataH[0] << 8) + inDataL[0];  // concatenate inDataH and inDataL
 8006224:	f89d 2000 	ldrb.w	r2, [sp]
 8006228:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800622c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	accz = accz >> 4;  // shift non-data bits out (using 12-bit precision in HR mode)
 8006230:	f343 130b 	sbfx	r3, r3, #4, #12
	ACC_Value.x = accx;
 8006234:	4a02      	ldr	r2, [pc, #8]	@ (8006240 <readAcc+0x80>)
 8006236:	6195      	str	r5, [r2, #24]
	ACC_Value.y = accy;
 8006238:	61d4      	str	r4, [r2, #28]
	ACC_Value.z = accz;
 800623a:	6213      	str	r3, [r2, #32]
}
 800623c:	b007      	add	sp, #28
 800623e:	bd30      	pop	{r4, r5, pc}
 8006240:	200001b0 	.word	0x200001b0

08006244 <HAL_Delay>:
 *        on variable incremented.
 * @note This is a user implementation using WFI state
 * @param Delay: specifies the delay time length, in milliseconds.
 * @retval None
 */
void HAL_Delay(__IO uint32_t Delay) {
 8006244:	b510      	push	{r4, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	9001      	str	r0, [sp, #4]
	uint32_t tickstart = 0;
	tickstart = HAL_GetTick();
 800624a:	f000 fc57 	bl	8006afc <HAL_GetTick>
 800624e:	4604      	mov	r4, r0
	while ((HAL_GetTick() - tickstart) < Delay) {
 8006250:	e000      	b.n	8006254 <HAL_Delay+0x10>
		__WFI();
 8006252:	bf30      	wfi
	while ((HAL_GetTick() - tickstart) < Delay) {
 8006254:	f000 fc52 	bl	8006afc <HAL_GetTick>
 8006258:	1b00      	subs	r0, r0, r4
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	4298      	cmp	r0, r3
 800625e:	d3f8      	bcc.n	8006252 <HAL_Delay+0xe>
	}
}
 8006260:	b002      	add	sp, #8
 8006262:	bd10      	pop	{r4, pc}

08006264 <Error_Handler>:
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
	/* User may add here some code to deal with this error */
	while (1) {
 8006264:	e7fe      	b.n	8006264 <Error_Handler>
	...

08006268 <InitTimers>:
static void InitTimers(void) {
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	b089      	sub	sp, #36	@ 0x24
	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 800626c:	4f31      	ldr	r7, [pc, #196]	@ (8006334 <InitTimers+0xcc>)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	4e31      	ldr	r6, [pc, #196]	@ (8006338 <InitTimers+0xd0>)
 8006272:	fba6 2303 	umull	r2, r3, r6, r3
 8006276:	0b5b      	lsrs	r3, r3, #13
 8006278:	3b01      	subs	r3, #1
	TimEnvHandle.Instance = TIM4;
 800627a:	4c30      	ldr	r4, [pc, #192]	@ (800633c <InitTimers+0xd4>)
 800627c:	4a30      	ldr	r2, [pc, #192]	@ (8006340 <InitTimers+0xd8>)
 800627e:	f8c4 2154 	str.w	r2, [r4, #340]	@ 0x154
	TimEnvHandle.Init.Period = 100; // change timer period to 10ms
 8006282:	2264      	movs	r2, #100	@ 0x64
 8006284:	f8c4 2160 	str.w	r2, [r4, #352]	@ 0x160
	TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 8006288:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
	TimEnvHandle.Init.ClockDivision = 0;
 800628c:	2500      	movs	r5, #0
 800628e:	f8c4 5164 	str.w	r5, [r4, #356]	@ 0x164
	TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006292:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
	if (HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 8006296:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 800629a:	f002 fe65 	bl	8008f68 <HAL_TIM_Base_Init>
	uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	fba6 6303 	umull	r6, r3, r6, r3
 80062a4:	0b5b      	lsrs	r3, r3, #13
 80062a6:	3b01      	subs	r3, #1
	TimCCHandle.Instance = TIM1;
 80062a8:	4a26      	ldr	r2, [pc, #152]	@ (8006344 <InitTimers+0xdc>)
 80062aa:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
	TimCCHandle.Init.Period = 65535;
 80062ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062b2:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
	TimCCHandle.Init.Prescaler = uwPrescalerValue;
 80062b6:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
	TimCCHandle.Init.ClockDivision = 0;
 80062ba:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
	TimCCHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062be:	f8c4 510c 	str.w	r5, [r4, #268]	@ 0x10c
	if (HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK) {
 80062c2:	f504 7082 	add.w	r0, r4, #260	@ 0x104
 80062c6:	f002 fe7f 	bl	8008fc8 <HAL_TIM_OC_Init>
 80062ca:	bb40      	cbnz	r0, 800631e <InitTimers+0xb6>
	sConfig.OCMode = TIM_OCMODE_TOGGLE;
 80062cc:	2330      	movs	r3, #48	@ 0x30
 80062ce:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 80062d0:	2302      	movs	r3, #2
 80062d2:	9303      	str	r3, [sp, #12]
	sConfig.Pulse = DEFAULT_uhCCR1_Val;
 80062d4:	2364      	movs	r3, #100	@ 0x64
 80062d6:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1)
 80062d8:	2200      	movs	r2, #0
 80062da:	a901      	add	r1, sp, #4
 80062dc:	481a      	ldr	r0, [pc, #104]	@ (8006348 <InitTimers+0xe0>)
 80062de:	f002 fee9 	bl	80090b4 <HAL_TIM_OC_ConfigChannel>
 80062e2:	b9f0      	cbnz	r0, 8006322 <InitTimers+0xba>
	sConfig.Pulse = DEFAULT_uhCCR2_Val;
 80062e4:	23c8      	movs	r3, #200	@ 0xc8
 80062e6:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2)
 80062e8:	2204      	movs	r2, #4
 80062ea:	eb0d 0102 	add.w	r1, sp, r2
 80062ee:	4816      	ldr	r0, [pc, #88]	@ (8006348 <InitTimers+0xe0>)
 80062f0:	f002 fee0 	bl	80090b4 <HAL_TIM_OC_ConfigChannel>
 80062f4:	b9b8      	cbnz	r0, 8006326 <InitTimers+0xbe>
	sConfig.Pulse = DEFAULT_uhCCR3_Val;
 80062f6:	f240 2371 	movw	r3, #625	@ 0x271
 80062fa:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3)
 80062fc:	2208      	movs	r2, #8
 80062fe:	a901      	add	r1, sp, #4
 8006300:	4811      	ldr	r0, [pc, #68]	@ (8006348 <InitTimers+0xe0>)
 8006302:	f002 fed7 	bl	80090b4 <HAL_TIM_OC_ConfigChannel>
 8006306:	b980      	cbnz	r0, 800632a <InitTimers+0xc2>
	sConfig.Pulse = DEFAULT_uhCCR4_Val;
 8006308:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800630c:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4)
 800630e:	220c      	movs	r2, #12
 8006310:	a901      	add	r1, sp, #4
 8006312:	480d      	ldr	r0, [pc, #52]	@ (8006348 <InitTimers+0xe0>)
 8006314:	f002 fece 	bl	80090b4 <HAL_TIM_OC_ConfigChannel>
 8006318:	b948      	cbnz	r0, 800632e <InitTimers+0xc6>
}
 800631a:	b009      	add	sp, #36	@ 0x24
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 800631e:	f7ff ffa1 	bl	8006264 <Error_Handler>
		Error_Handler();
 8006322:	f7ff ff9f 	bl	8006264 <Error_Handler>
		Error_Handler();
 8006326:	f7ff ff9d 	bl	8006264 <Error_Handler>
		Error_Handler();
 800632a:	f7ff ff9b 	bl	8006264 <Error_Handler>
		Error_Handler();
 800632e:	f7ff ff99 	bl	8006264 <Error_Handler>
 8006332:	bf00      	nop
 8006334:	20000020 	.word	0x20000020
 8006338:	d1b71759 	.word	0xd1b71759
 800633c:	200001b0 	.word	0x200001b0
 8006340:	40000800 	.word	0x40000800
 8006344:	40012c00 	.word	0x40012c00
 8006348:	200002b4 	.word	0x200002b4

0800634c <MX_UART5_UART_Init>:
void MX_UART5_UART_Init(void) {
 800634c:	b508      	push	{r3, lr}
	UartHandle.Instance = UART5;
 800634e:	480d      	ldr	r0, [pc, #52]	@ (8006384 <MX_UART5_UART_Init+0x38>)
 8006350:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <MX_UART5_UART_Init+0x3c>)
 8006352:	6783      	str	r3, [r0, #120]	@ 0x78
	UartHandle.Init.BaudRate = 115200;
 8006354:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006358:	67c3      	str	r3, [r0, #124]	@ 0x7c
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800635a:	2300      	movs	r3, #0
 800635c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8006360:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
	UartHandle.Init.Parity = UART_PARITY_NONE;
 8006364:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8006368:	220c      	movs	r2, #12
 800636a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800636e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006372:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8006376:	3078      	adds	r0, #120	@ 0x78
 8006378:	f003 fcb5 	bl	8009ce6 <HAL_UART_Init>
 800637c:	b900      	cbnz	r0, 8006380 <MX_UART5_UART_Init+0x34>
}
 800637e:	bd08      	pop	{r3, pc}
		Error_Handler();
 8006380:	f7ff ff70 	bl	8006264 <Error_Handler>
 8006384:	200001b0 	.word	0x200001b0
 8006388:	40005000 	.word	0x40005000

0800638c <InitTargetPlatform>:
void InitTargetPlatform(void) {
 800638c:	b508      	push	{r3, lr}
	BSP_LED_Init(LED1);
 800638e:	2000      	movs	r0, #0
 8006390:	f000 f9ec 	bl	800676c <BSP_LED_Init>
	MX_UART5_UART_Init();
 8006394:	f7ff ffda 	bl	800634c <MX_UART5_UART_Init>
	InitLSM(); //N4S
 8006398:	f7ff fed6 	bl	8006148 <InitLSM>
}
 800639c:	bd08      	pop	{r3, pc}
	...

080063a0 <main>:
int main(void) {
 80063a0:	b510      	push	{r4, lr}
 80063a2:	b0c0      	sub	sp, #256	@ 0x100
	HAL_Init();
 80063a4:	f000 fb8e 	bl	8006ac4 <HAL_Init>
	SystemClock_Config();
 80063a8:	f7ff f978 	bl	800569c <SystemClock_Config>
	InitTargetPlatform();
 80063ac:	f7ff ffee 	bl	800638c <InitTargetPlatform>
	Init_BlueNRG_Stack();
 80063b0:	f7ff fb78 	bl	8005aa4 <Init_BlueNRG_Stack>
	Init_BlueNRG_Custom_Services();
 80063b4:	f7ff fc70 	bl	8005c98 <Init_BlueNRG_Custom_Services>
	InitTimers();
 80063b8:	f7ff ff56 	bl	8006268 <InitTimers>
	if (HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK) {
 80063bc:	484b      	ldr	r0, [pc, #300]	@ (80064ec <main+0x14c>)
 80063be:	f002 fc3f 	bl	8008c40 <HAL_TIM_Base_Start_IT>
 80063c2:	b108      	cbz	r0, 80063c8 <main+0x28>
		Error_Handler();
 80063c4:	f7ff ff4e 	bl	8006264 <Error_Handler>
	connected = FALSE;
 80063c8:	4b49      	ldr	r3, [pc, #292]	@ (80064f0 <main+0x150>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
	NodeName[1] = 'g';
 80063ce:	4b49      	ldr	r3, [pc, #292]	@ (80064f4 <main+0x154>)
 80063d0:	2267      	movs	r2, #103	@ 0x67
 80063d2:	f883 21a5 	strb.w	r2, [r3, #421]	@ 0x1a5
	NodeName[2] = 'r';
 80063d6:	2272      	movs	r2, #114	@ 0x72
 80063d8:	f883 21a6 	strb.w	r2, [r3, #422]	@ 0x1a6
	NodeName[3] = 'o';
 80063dc:	226f      	movs	r2, #111	@ 0x6f
 80063de:	f883 21a7 	strb.w	r2, [r3, #423]	@ 0x1a7
	NodeName[4] = 'u';
 80063e2:	2275      	movs	r2, #117	@ 0x75
 80063e4:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
	NodeName[5] = 'p';
 80063e8:	2270      	movs	r2, #112	@ 0x70
 80063ea:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
	NodeName[6] = '0';
 80063ee:	2230      	movs	r2, #48	@ 0x30
 80063f0:	f883 21aa 	strb.w	r2, [r3, #426]	@ 0x1aa
	NodeName[7] = '1';
 80063f4:	2231      	movs	r2, #49	@ 0x31
 80063f6:	f883 21ab 	strb.w	r2, [r3, #427]	@ 0x1ab
	startMag();
 80063fa:	f7ff fa1b 	bl	8005834 <startMag>
	startAcc();
 80063fe:	f7ff f9d9 	bl	80057b4 <startAcc>
 8006402:	e05b      	b.n	80064bc <main+0x11c>
			if (!(HAL_GetTick() & 0x3FF)) {
 8006404:	f000 fb7a 	bl	8006afc <HAL_GetTick>
 8006408:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800640c:	2800      	cmp	r0, #0
 800640e:	d159      	bne.n	80064c4 <main+0x124>
				BSP_LED_Toggle(LED1);
 8006410:	f000 f9ec 	bl	80067ec <BSP_LED_Toggle>
 8006414:	e056      	b.n	80064c4 <main+0x124>
			setConnectable();
 8006416:	f7fe ff1f 	bl	8005258 <setConnectable>
			set_connectable = FALSE;
 800641a:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <main+0x158>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e054      	b.n	80064cc <main+0x12c>
			HCI_ProcessEvent = 0;
 8006422:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <main+0x154>)
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
			hci_user_evt_proc();
 800642a:	f004 f955 	bl	800a6d8 <hci_user_evt_proc>
 800642e:	e052      	b.n	80064d6 <main+0x136>
			ReadSensor = 0;
 8006430:	4c30      	ldr	r4, [pc, #192]	@ (80064f4 <main+0x154>)
 8006432:	2300      	movs	r3, #0
 8006434:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
			readMag(); LPF_M();
 8006438:	f7ff fe04 	bl	8006044 <readMag>
 800643c:	f7ff fa40 	bl	80058c0 <LPF_M>
			readAcc();
 8006440:	f7ff febe 	bl	80061c0 <readAcc>
			MAG_Value.x += 165;
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	33a5      	adds	r3, #165	@ 0xa5
 8006448:	6023      	str	r3, [r4, #0]
			MAG_Value.y += 90;
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	335a      	adds	r3, #90	@ 0x5a
 800644e:	6063      	str	r3, [r4, #4]
			LPF_A();        // apply low-pass filter
 8006450:	f7ff fa12 	bl	8005878 <LPF_A>
			check_local();  // check for local maximum/minimum
 8006454:	f7ff fa6e 	bl	8005934 <check_local>
			if (local_max && local_min) {  // update step count if step detected
 8006458:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800645a:	b13b      	cbz	r3, 800646c <main+0xcc>
 800645c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800645e:	b12b      	cbz	r3, 800646c <main+0xcc>
				COMP_Value.Steps++;
 8006460:	68e2      	ldr	r2, [r4, #12]
 8006462:	3201      	adds	r2, #1
 8006464:	60e2      	str	r2, [r4, #12]
				local_max = 0;
 8006466:	2200      	movs	r2, #0
 8006468:	6722      	str	r2, [r4, #112]	@ 0x70
				local_min = 0;
 800646a:	6762      	str	r2, [r4, #116]	@ 0x74
			calc_orientation();  // calculate current orientation (relative to start)
 800646c:	f7ff fa98 	bl	80059a0 <calc_orientation>
			if (heading_offset == -1) {  // set heading offset during initialisation
 8006470:	4b22      	ldr	r3, [pc, #136]	@ (80064fc <main+0x15c>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d010      	beq.n	800649c <main+0xfc>
			int calibrated_angle = COMP_Value.Heading + heading_offset;  // apply heading offset
 800647a:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <main+0x154>)
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	4b1f      	ldr	r3, [pc, #124]	@ (80064fc <main+0x15c>)
 8006480:	691b      	ldr	r3, [r3, #16]
			if (calibrated_angle < 0) {
 8006482:	18d2      	adds	r2, r2, r3
 8006484:	d410      	bmi.n	80064a8 <main+0x108>
			COMP_Value.Heading = calibrated_angle;
 8006486:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <main+0x154>)
 8006488:	611a      	str	r2, [r3, #16]
			XPRINTF("Orientation = %d \r\n", (int)COMP_Value.Heading);
 800648a:	491d      	ldr	r1, [pc, #116]	@ (8006500 <main+0x160>)
 800648c:	4668      	mov	r0, sp
 800648e:	f004 fb77 	bl	800ab80 <siprintf>
 8006492:	b281      	uxth	r1, r0
 8006494:	4668      	mov	r0, sp
 8006496:	f7ff faf9 	bl	8005a8c <UART5_Transmit>
 800649a:	e021      	b.n	80064e0 <main+0x140>
				heading_offset = -COMP_Value.Heading;
 800649c:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <main+0x154>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	425b      	negs	r3, r3
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <main+0x15c>)
 80064a4:	6113      	str	r3, [r2, #16]
 80064a6:	e7e8      	b.n	800647a <main+0xda>
				calibrated_angle += 360;
 80064a8:	f502 72b4 	add.w	r2, r2, #360	@ 0x168
 80064ac:	e7eb      	b.n	8006486 <main+0xe6>
			SendMotionData();
 80064ae:	f7ff f9d7 	bl	8005860 <SendMotionData>
			SendAccGyroMag = 0;
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <main+0x154>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
		__WFI();
 80064ba:	bf30      	wfi
		if (!connected) {
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <main+0x150>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d09f      	beq.n	8006404 <main+0x64>
		if (set_connectable) {
 80064c4:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <main+0x158>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1a4      	bne.n	8006416 <main+0x76>
		if (HCI_ProcessEvent) {
 80064cc:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <main+0x154>)
 80064ce:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1a5      	bne.n	8006422 <main+0x82>
		if (ReadSensor) {
 80064d6:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <main+0x154>)
 80064d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1a7      	bne.n	8006430 <main+0x90>
		if (SendAccGyroMag) {
 80064e0:	4b04      	ldr	r3, [pc, #16]	@ (80064f4 <main+0x154>)
 80064e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0e7      	beq.n	80064ba <main+0x11a>
 80064ea:	e7e0      	b.n	80064ae <main+0x10e>
 80064ec:	20000304 	.word	0x20000304
 80064f0:	2000009c 	.word	0x2000009c
 80064f4:	200001b0 	.word	0x200001b0
 80064f8:	20000000 	.word	0x20000000
 80064fc:	20000004 	.word	0x20000004
 8006500:	0800b78c 	.word	0x0800b78c

08006504 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	switch (GPIO_Pin) {
 8006504:	2820      	cmp	r0, #32
 8006506:	d000      	beq.n	800650a <HAL_GPIO_EXTI_Callback+0x6>
 8006508:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800650a:	b508      	push	{r3, lr}
	case HCI_TL_SPI_EXTI_PIN:
		hci_tl_lowlevel_isr();
 800650c:	f7ff f8bc 	bl	8005688 <hci_tl_lowlevel_isr>
		HCI_ProcessEvent = 1;
 8006510:	4b02      	ldr	r3, [pc, #8]	@ (800651c <HAL_GPIO_EXTI_Callback+0x18>)
 8006512:	2201      	movs	r2, #1
 8006514:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac

//  case BSP_LSM6DSM_INT2:
//    MEMSInterrupt=1;
//    break;
	}
}
 8006518:	bd08      	pop	{r3, pc}
 800651a:	bf00      	nop
 800651c:	200001b0 	.word	0x200001b0

08006520 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006520:	b500      	push	{lr}
 8006522:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 8006524:	6803      	ldr	r3, [r0, #0]
 8006526:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <HAL_TIM_Base_MspInit+0x64>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d005      	beq.n	8006538 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 800652c:	4a16      	ldr	r2, [pc, #88]	@ (8006588 <HAL_TIM_Base_MspInit+0x68>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d015      	beq.n	800655e <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 8006532:	b003      	add	sp, #12
 8006534:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006538:	4b14      	ldr	r3, [pc, #80]	@ (800658c <HAL_TIM_Base_MspInit+0x6c>)
 800653a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800653c:	f042 0204 	orr.w	r2, r2, #4
 8006540:	659a      	str	r2, [r3, #88]	@ 0x58
 8006542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 800654c:	2200      	movs	r2, #0
 800654e:	210f      	movs	r1, #15
 8006550:	201e      	movs	r0, #30
 8006552:	f000 fb2d 	bl	8006bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006556:	201e      	movs	r0, #30
 8006558:	f000 fb3a 	bl	8006bd0 <HAL_NVIC_EnableIRQ>
 800655c:	e7e9      	b.n	8006532 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <HAL_TIM_Base_MspInit+0x6c>)
 8006560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006562:	f042 0208 	orr.w	r2, r2, #8
 8006566:	659a      	str	r2, [r3, #88]	@ 0x58
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 8006572:	2200      	movs	r2, #0
 8006574:	210f      	movs	r1, #15
 8006576:	2032      	movs	r0, #50	@ 0x32
 8006578:	f000 fb1a 	bl	8006bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800657c:	2032      	movs	r0, #50	@ 0x32
 800657e:	f000 fb27 	bl	8006bd0 <HAL_NVIC_EnableIRQ>
}  
 8006582:	e7d6      	b.n	8006532 <HAL_TIM_Base_MspInit+0x12>
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40021000 	.word	0x40021000

08006590 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8006590:	b500      	push	{lr}
 8006592:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <HAL_TIM_OC_MspInit+0x30>)
 8006596:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659c:	661a      	str	r2, [r3, #96]	@ 0x60
 800659e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 80065a8:	2200      	movs	r2, #0
 80065aa:	2108      	movs	r1, #8
 80065ac:	201b      	movs	r0, #27
 80065ae:	f000 faff 	bl	8006bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80065b2:	201b      	movs	r0, #27
 80065b4:	f000 fb0c 	bl	8006bd0 <HAL_NVIC_EnableIRQ>
}
 80065b8:	b003      	add	sp, #12
 80065ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <HAL_UART_MspInit>:
  /* Release CRC from reset state */
  __HAL_RCC_CRC_RELEASE_RESET();
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	b08a      	sub	sp, #40	@ 0x28
 80065c8:	4604      	mov	r4, r0
	if (huart->Instance == UART5) {
 80065ca:	6802      	ldr	r2, [r0, #0]
 80065cc:	4b37      	ldr	r3, [pc, #220]	@ (80066ac <HAL_UART_MspInit+0xe8>)
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d005      	beq.n	80065de <HAL_UART_MspInit+0x1a>
		  HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
		  HAL_NVIC_EnableIRQ(UART5_IRQn);

	}

	if (huart->Instance == USART1) {
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	4b36      	ldr	r3, [pc, #216]	@ (80066b0 <HAL_UART_MspInit+0xec>)
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d03c      	beq.n	8006654 <HAL_UART_MspInit+0x90>
//		  HAL_NVIC_EnableIRQ(UART5_IRQn);

	}


}
 80065da:	b00a      	add	sp, #40	@ 0x28
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065de:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 80065e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065e4:	f042 0204 	orr.w	r2, r2, #4
 80065e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80065ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065ec:	f002 0204 	and.w	r2, r2, #4
 80065f0:	9200      	str	r2, [sp, #0]
 80065f2:	9a00      	ldr	r2, [sp, #0]
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065f6:	f042 0208 	orr.w	r2, r2, #8
 80065fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80065fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065fe:	f002 0208 	and.w	r2, r2, #8
 8006602:	9201      	str	r2, [sp, #4]
 8006604:	9a01      	ldr	r2, [sp, #4]
		  __HAL_RCC_UART5_CLK_ENABLE();
 8006606:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006608:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800660c:	659a      	str	r2, [r3, #88]	@ 0x58
 800660e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	9b02      	ldr	r3, [sp, #8]
		  GPIO_InitStruct.Pin       = GPIO_PIN_12;
 8006618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800661c:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	9306      	str	r3, [sp, #24]
		  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006622:	2500      	movs	r5, #0
 8006624:	9507      	str	r5, [sp, #28]
		  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006626:	9308      	str	r3, [sp, #32]
		  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006628:	2608      	movs	r6, #8
 800662a:	9609      	str	r6, [sp, #36]	@ 0x24
		  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800662c:	a905      	add	r1, sp, #20
 800662e:	4821      	ldr	r0, [pc, #132]	@ (80066b4 <HAL_UART_MspInit+0xf0>)
 8006630:	f000 fb34 	bl	8006c9c <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006634:	2304      	movs	r3, #4
 8006636:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006638:	9609      	str	r6, [sp, #36]	@ 0x24
		  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800663a:	a905      	add	r1, sp, #20
 800663c:	481e      	ldr	r0, [pc, #120]	@ (80066b8 <HAL_UART_MspInit+0xf4>)
 800663e:	f000 fb2d 	bl	8006c9c <HAL_GPIO_Init>
		  HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8006642:	2201      	movs	r2, #1
 8006644:	4629      	mov	r1, r5
 8006646:	2035      	movs	r0, #53	@ 0x35
 8006648:	f000 fab2 	bl	8006bb0 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(UART5_IRQn);
 800664c:	2035      	movs	r0, #53	@ 0x35
 800664e:	f000 fabf 	bl	8006bd0 <HAL_NVIC_EnableIRQ>
 8006652:	e7be      	b.n	80065d2 <HAL_UART_MspInit+0xe>
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006654:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8006658:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800665a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800665e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006660:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006662:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006666:	9203      	str	r2, [sp, #12]
 8006668:	9a03      	ldr	r2, [sp, #12]
		  __HAL_RCC_USART1_CLK_ENABLE();
 800666a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800666c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006670:	661a      	str	r2, [r3, #96]	@ 0x60
 8006672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9b04      	ldr	r3, [sp, #16]
		  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800667c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006680:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006682:	2302      	movs	r3, #2
 8006684:	9306      	str	r3, [sp, #24]
		  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006686:	2200      	movs	r2, #0
 8006688:	9207      	str	r2, [sp, #28]
		  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800668a:	9308      	str	r3, [sp, #32]
		  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800668c:	2507      	movs	r5, #7
 800668e:	9509      	str	r5, [sp, #36]	@ 0x24
		  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006690:	4c0a      	ldr	r4, [pc, #40]	@ (80066bc <HAL_UART_MspInit+0xf8>)
 8006692:	a905      	add	r1, sp, #20
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fb01 	bl	8006c9c <HAL_GPIO_Init>
		  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800669a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800669e:	9305      	str	r3, [sp, #20]
		  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066a0:	9509      	str	r5, [sp, #36]	@ 0x24
		  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066a2:	a905      	add	r1, sp, #20
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 faf9 	bl	8006c9c <HAL_GPIO_Init>
}
 80066aa:	e796      	b.n	80065da <HAL_UART_MspInit+0x16>
 80066ac:	40005000 	.word	0x40005000
 80066b0:	40013800 	.word	0x40013800
 80066b4:	48000800 	.word	0x48000800
 80066b8:	48000c00 	.word	0x48000c00
 80066bc:	48001800 	.word	0x48001800

080066c0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80066c0:	4770      	bx	lr

080066c2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80066c2:	e7fe      	b.n	80066c2 <HardFault_Handler>

080066c4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80066c4:	e7fe      	b.n	80066c4 <MemManage_Handler>

080066c6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80066c6:	e7fe      	b.n	80066c6 <BusFault_Handler>

080066c8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80066c8:	e7fe      	b.n	80066c8 <UsageFault_Handler>

080066ca <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80066ca:	4770      	bx	lr

080066cc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80066cc:	4770      	bx	lr

080066ce <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80066ce:	4770      	bx	lr

080066d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80066d0:	b508      	push	{r3, lr}
  HAL_IncTick();
 80066d2:	f000 fa07 	bl	8006ae4 <HAL_IncTick>
}
 80066d6:	bd08      	pop	{r3, pc}

080066d8 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80066d8:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 80066da:	4802      	ldr	r0, [pc, #8]	@ (80066e4 <TIM4_IRQHandler+0xc>)
 80066dc:	f002 fb12 	bl	8008d04 <HAL_TIM_IRQHandler>
}
 80066e0:	bd08      	pop	{r3, pc}
 80066e2:	bf00      	nop
 80066e4:	20000304 	.word	0x20000304

080066e8 <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 80066e8:	4770      	bx	lr
	...

080066ec <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 80066ec:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 80066ee:	4802      	ldr	r0, [pc, #8]	@ (80066f8 <TIM1_CC_IRQHandler+0xc>)
 80066f0:	f002 fb08 	bl	8008d04 <HAL_TIM_IRQHandler>
}
 80066f4:	bd08      	pop	{r3, pc}
 80066f6:	bf00      	nop
 80066f8:	200002b4 	.word	0x200002b4

080066fc <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 80066fc:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80066fe:	2008      	movs	r0, #8
 8006700:	f000 fc66 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 8006704:	bd08      	pop	{r3, pc}

08006706 <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8006706:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 8006708:	2020      	movs	r0, #32
 800670a:	f000 fc61 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
}
 800670e:	bd08      	pop	{r3, pc}

08006710 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 8006710:	4770      	bx	lr
	...

08006714 <UART5_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void UART5_IRQHandler(void)
{
 8006714:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&UartHandle);
 8006716:	4802      	ldr	r0, [pc, #8]	@ (8006720 <UART5_IRQHandler+0xc>)
 8006718:	f002 feb2 	bl	8009480 <HAL_UART_IRQHandler>
}
 800671c:	bd08      	pop	{r3, pc}
 800671e:	bf00      	nop
 8006720:	20000228 	.word	0x20000228

08006724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006724:	b510      	push	{r4, lr}
 8006726:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006728:	4a0c      	ldr	r2, [pc, #48]	@ (800675c <_sbrk+0x38>)
 800672a:	490d      	ldr	r1, [pc, #52]	@ (8006760 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800672c:	480d      	ldr	r0, [pc, #52]	@ (8006764 <_sbrk+0x40>)
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	b140      	cbz	r0, 8006744 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006732:	480c      	ldr	r0, [pc, #48]	@ (8006764 <_sbrk+0x40>)
 8006734:	6800      	ldr	r0, [r0, #0]
 8006736:	4403      	add	r3, r0
 8006738:	1a52      	subs	r2, r2, r1
 800673a:	4293      	cmp	r3, r2
 800673c:	d806      	bhi.n	800674c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800673e:	4a09      	ldr	r2, [pc, #36]	@ (8006764 <_sbrk+0x40>)
 8006740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006742:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006744:	4807      	ldr	r0, [pc, #28]	@ (8006764 <_sbrk+0x40>)
 8006746:	4c08      	ldr	r4, [pc, #32]	@ (8006768 <_sbrk+0x44>)
 8006748:	6004      	str	r4, [r0, #0]
 800674a:	e7f2      	b.n	8006732 <_sbrk+0xe>
    errno = ENOMEM;
 800674c:	f004 fa42 	bl	800abd4 <__errno>
 8006750:	230c      	movs	r3, #12
 8006752:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	e7f3      	b.n	8006742 <_sbrk+0x1e>
 800675a:	bf00      	nop
 800675c:	20018000 	.word	0x20018000
 8006760:	00002000 	.word	0x00002000
 8006764:	200004a4 	.word	0x200004a4
 8006768:	200009a8 	.word	0x200009a8

0800676c <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 800676c:	b510      	push	{r4, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <BSP_LED_Init+0x74>)
 8006774:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006776:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800677a:	659a      	str	r2, [r3, #88]	@ 0x58
 800677c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8006786:	f000 fc41 	bl	800700c <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800678a:	b94c      	cbnz	r4, 80067a0 <BSP_LED_Init+0x34>
 800678c:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <BSP_LED_Init+0x74>)
 800678e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006794:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	2c01      	cmp	r4, #1
 80067a2:	d011      	beq.n	80067c8 <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80067a4:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <BSP_LED_Init+0x78>)
 80067a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80067aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067ac:	2301      	movs	r3, #1
 80067ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80067b4:	2302      	movs	r3, #2
 80067b6:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80067b8:	a903      	add	r1, sp, #12
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <BSP_LED_Init+0x7c>)
 80067bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80067c0:	f000 fa6c 	bl	8006c9c <HAL_GPIO_Init>
}
 80067c4:	b008      	add	sp, #32
 80067c6:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <BSP_LED_Init+0x74>)
 80067ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067cc:	f042 0201 	orr.w	r2, r2, #1
 80067d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80067d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	e7e2      	b.n	80067a4 <BSP_LED_Init+0x38>
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0800b4d8 	.word	0x0800b4d8
 80067e8:	20000018 	.word	0x20000018

080067ec <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80067ec:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80067ee:	4b04      	ldr	r3, [pc, #16]	@ (8006800 <BSP_LED_Toggle+0x14>)
 80067f0:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 80067f4:	4b03      	ldr	r3, [pc, #12]	@ (8006804 <BSP_LED_Toggle+0x18>)
 80067f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80067fa:	f000 fbdf 	bl	8006fbc <HAL_GPIO_TogglePin>
}
 80067fe:	bd08      	pop	{r3, pc}
 8006800:	0800b4d8 	.word	0x0800b4d8
 8006804:	20000018 	.word	0x20000018

08006808 <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006808:	b500      	push	{lr}
 800680a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800680c:	4b11      	ldr	r3, [pc, #68]	@ (8006854 <SPI2_MspInit+0x4c>)
 800680e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006814:	659a      	str	r2, [r3, #88]	@ 0x58
 8006816:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006818:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800681c:	9201      	str	r2, [sp, #4]
 800681e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006820:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006822:	f042 0202 	orr.w	r2, r2, #2
 8006826:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006832:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8006836:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006838:	2302      	movs	r3, #2
 800683a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800683c:	2201      	movs	r2, #1
 800683e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006840:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006842:	2305      	movs	r3, #5
 8006844:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006846:	a903      	add	r1, sp, #12
 8006848:	4803      	ldr	r0, [pc, #12]	@ (8006858 <SPI2_MspInit+0x50>)
 800684a:	f000 fa27 	bl	8006c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 800684e:	b009      	add	sp, #36	@ 0x24
 8006850:	f85d fb04 	ldr.w	pc, [sp], #4
 8006854:	40021000 	.word	0x40021000
 8006858:	48000400 	.word	0x48000400

0800685c <SPI1_MspInit>:
{
 800685c:	b500      	push	{lr}
 800685e:	b089      	sub	sp, #36	@ 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006860:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <SPI1_MspInit+0x50>)
 8006862:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006868:	661a      	str	r2, [r3, #96]	@ 0x60
 800686a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800686c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006876:	f042 0201 	orr.w	r2, r2, #1
 800687a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800687c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006886:	23e0      	movs	r3, #224	@ 0xe0
 8006888:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688a:	2302      	movs	r3, #2
 800688c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800688e:	2301      	movs	r3, #1
 8006890:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006892:	2303      	movs	r3, #3
 8006894:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006896:	2305      	movs	r3, #5
 8006898:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800689a:	a903      	add	r1, sp, #12
 800689c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80068a0:	f000 f9fc 	bl	8006c9c <HAL_GPIO_Init>
}
 80068a4:	b009      	add	sp, #36	@ 0x24
 80068a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80068aa:	bf00      	nop
 80068ac:	40021000 	.word	0x40021000

080068b0 <BSP_SPI2_Send>:
{
 80068b0:	b510      	push	{r4, lr}
 80068b2:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 80068b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068b8:	460a      	mov	r2, r1
 80068ba:	4601      	mov	r1, r0
 80068bc:	4804      	ldr	r0, [pc, #16]	@ (80068d0 <BSP_SPI2_Send+0x20>)
 80068be:	f001 fd69 	bl	8008394 <HAL_SPI_Transmit>
 80068c2:	b908      	cbnz	r0, 80068c8 <BSP_SPI2_Send+0x18>
      ret = len;
 80068c4:	4620      	mov	r0, r4
}
 80068c6:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068c8:	f06f 0005 	mvn.w	r0, #5
  return ret;
 80068cc:	e7fb      	b.n	80068c6 <BSP_SPI2_Send+0x16>
 80068ce:	bf00      	nop
 80068d0:	200004a8 	.word	0x200004a8

080068d4 <BSP_SPI1_SendRecv>:
{
 80068d4:	b510      	push	{r4, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80068da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	460a      	mov	r2, r1
 80068e4:	4601      	mov	r1, r0
 80068e6:	4805      	ldr	r0, [pc, #20]	@ (80068fc <BSP_SPI1_SendRecv+0x28>)
 80068e8:	f001 fe6e 	bl	80085c8 <HAL_SPI_TransmitReceive>
 80068ec:	b910      	cbnz	r0, 80068f4 <BSP_SPI1_SendRecv+0x20>
      ret = len;
 80068ee:	4620      	mov	r0, r4
}
 80068f0:	b002      	add	sp, #8
 80068f2:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80068f4:	f06f 0005 	mvn.w	r0, #5
  return ret;
 80068f8:	e7fa      	b.n	80068f0 <BSP_SPI1_SendRecv+0x1c>
 80068fa:	bf00      	nop
 80068fc:	2000050c 	.word	0x2000050c

08006900 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8006900:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8006902:	f000 f8fb 	bl	8006afc <HAL_GetTick>
}
 8006906:	bd08      	pop	{r3, pc}

08006908 <MX_SPI1_Init>:
{
 8006908:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 800690a:	4a0f      	ldr	r2, [pc, #60]	@ (8006948 <MX_SPI1_Init+0x40>)
 800690c:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800690e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006912:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006914:	2200      	movs	r2, #0
 8006916:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006918:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800691c:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800691e:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006920:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006926:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006928:	2118      	movs	r1, #24
 800692a:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800692c:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800692e:	6242      	str	r2, [r0, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006930:	6282      	str	r2, [r0, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8006932:	2107      	movs	r1, #7
 8006934:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006936:	6302      	str	r2, [r0, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006938:	2208      	movs	r2, #8
 800693a:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800693c:	f001 fc9c 	bl	8008278 <HAL_SPI_Init>
 8006940:	b100      	cbz	r0, 8006944 <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 8006942:	2001      	movs	r0, #1
}
 8006944:	bd08      	pop	{r3, pc}
 8006946:	bf00      	nop
 8006948:	40013000 	.word	0x40013000

0800694c <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 800694c:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 800694e:	480a      	ldr	r0, [pc, #40]	@ (8006978 <BSP_SPI1_Init+0x2c>)
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <BSP_SPI1_Init+0x30>)
 8006952:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8006956:	f002 f83c 	bl	80089d2 <HAL_SPI_GetState>
 800695a:	b108      	cbz	r0, 8006960 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 800695c:	2000      	movs	r0, #0
}
 800695e:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8006960:	4c07      	ldr	r4, [pc, #28]	@ (8006980 <BSP_SPI1_Init+0x34>)
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff ff7a 	bl	800685c <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8006968:	4620      	mov	r0, r4
 800696a:	f7ff ffcd 	bl	8006908 <MX_SPI1_Init>
 800696e:	2800      	cmp	r0, #0
 8006970:	d0f5      	beq.n	800695e <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8006972:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006976:	e7f2      	b.n	800695e <BSP_SPI1_Init+0x12>
 8006978:	200004a8 	.word	0x200004a8
 800697c:	40013000 	.word	0x40013000
 8006980:	2000050c 	.word	0x2000050c

08006984 <MX_SPI2_Init>:
{
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 8006988:	4b19      	ldr	r3, [pc, #100]	@ (80069f0 <MX_SPI2_Init+0x6c>)
 800698a:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800698c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006990:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8006992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006996:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006998:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800699c:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800699e:	2302      	movs	r3, #2
 80069a0:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80069a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069aa:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80069ac:	2330      	movs	r3, #48	@ 0x30
 80069ae:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069b0:	2300      	movs	r3, #0
 80069b2:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80069b4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069b6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80069b8:	2207      	movs	r2, #7
 80069ba:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80069bc:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80069be:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80069c0:	f001 fc5a 	bl	8008278 <HAL_SPI_Init>
 80069c4:	4605      	mov	r5, r0
 80069c6:	b100      	cbz	r0, 80069ca <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 80069c8:	2501      	movs	r5, #1
  HAL_Delay(5);
 80069ca:	2005      	movs	r0, #5
 80069cc:	f7ff fc3a 	bl	8006244 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 80069da:	2005      	movs	r0, #5
 80069dc:	f7ff fc32 	bl	8006244 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e8:	6013      	str	r3, [r2, #0]
}
 80069ea:	4628      	mov	r0, r5
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
 80069ee:	bf00      	nop
 80069f0:	40003800 	.word	0x40003800

080069f4 <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 80069f4:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 80069f6:	480a      	ldr	r0, [pc, #40]	@ (8006a20 <BSP_SPI2_Init+0x2c>)
 80069f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <BSP_SPI2_Init+0x30>)
 80069fa:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 80069fc:	f001 ffe9 	bl	80089d2 <HAL_SPI_GetState>
 8006a00:	b108      	cbz	r0, 8006a06 <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8006a02:	2000      	movs	r0, #0
}
 8006a04:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 8006a06:	4c06      	ldr	r4, [pc, #24]	@ (8006a20 <BSP_SPI2_Init+0x2c>)
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7ff fefd 	bl	8006808 <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff ffb8 	bl	8006984 <MX_SPI2_Init>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d0f5      	beq.n	8006a04 <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8006a18:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006a1c:	e7f2      	b.n	8006a04 <BSP_SPI2_Init+0x10>
 8006a1e:	bf00      	nop
 8006a20:	200004a8 	.word	0x200004a8
 8006a24:	40003800 	.word	0x40003800

08006a28 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a28:	490f      	ldr	r1, [pc, #60]	@ (8006a68 <SystemInit+0x40>)
 8006a2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a2e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <SystemInit+0x44>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006a40:	2000      	movs	r0, #0
 8006a42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 8006a4a:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006a50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006a54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006a5e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a60:	4b03      	ldr	r3, [pc, #12]	@ (8006a70 <SystemInit+0x48>)
 8006a62:	608b      	str	r3, [r1, #8]
#endif
}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	e000ed00 	.word	0xe000ed00
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	08004000 	.word	0x08004000

08006a74 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006a74:	4770      	bx	lr
	...

08006a78 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006a78:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <HAL_InitTick+0x44>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b90b      	cbnz	r3, 8006a82 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a7e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8006a80:	4770      	bx	lr
{
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac0 <HAL_InitTick+0x48>)
 8006a90:	6810      	ldr	r0, [r2, #0]
 8006a92:	fbb0 f0f3 	udiv	r0, r0, r3
 8006a96:	f000 f89f 	bl	8006bd8 <HAL_SYSTICK_Config>
 8006a9a:	b968      	cbnz	r0, 8006ab8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a9c:	2c0f      	cmp	r4, #15
 8006a9e:	d901      	bls.n	8006aa4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	e00a      	b.n	8006aba <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	f000 f880 	bl	8006bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ab0:	4b02      	ldr	r3, [pc, #8]	@ (8006abc <HAL_InitTick+0x44>)
 8006ab2:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	e000      	b.n	8006aba <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8006ab8:	2001      	movs	r0, #1
}
 8006aba:	bd10      	pop	{r4, pc}
 8006abc:	20000024 	.word	0x20000024
 8006ac0:	20000020 	.word	0x20000020

08006ac4 <HAL_Init>:
{
 8006ac4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ac6:	2003      	movs	r0, #3
 8006ac8:	f000 f860 	bl	8006b8c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006acc:	200f      	movs	r0, #15
 8006ace:	f7ff ffd3 	bl	8006a78 <HAL_InitTick>
 8006ad2:	b110      	cbz	r0, 8006ada <HAL_Init+0x16>
    status = HAL_ERROR;
 8006ad4:	2401      	movs	r4, #1
}
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	4604      	mov	r4, r0
    HAL_MspInit();
 8006adc:	f7ff ffca 	bl	8006a74 <HAL_MspInit>
 8006ae0:	e7f9      	b.n	8006ad6 <HAL_Init+0x12>
	...

08006ae4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006ae4:	4b03      	ldr	r3, [pc, #12]	@ (8006af4 <HAL_IncTick+0x10>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	4a03      	ldr	r2, [pc, #12]	@ (8006af8 <HAL_IncTick+0x14>)
 8006aea:	6811      	ldr	r1, [r2, #0]
 8006aec:	440b      	add	r3, r1
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000024 	.word	0x20000024
 8006af8:	20000570 	.word	0x20000570

08006afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006afc:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <HAL_GetTick+0x8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000570 	.word	0x20000570

08006b08 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	db07      	blt.n	8006b1c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b0c:	f000 021f 	and.w	r2, r0, #31
 8006b10:	0940      	lsrs	r0, r0, #5
 8006b12:	2301      	movs	r3, #1
 8006b14:	4093      	lsls	r3, r2
 8006b16:	4a02      	ldr	r2, [pc, #8]	@ (8006b20 <__NVIC_EnableIRQ+0x18>)
 8006b18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e100 	.word	0xe000e100

08006b24 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8006b24:	2800      	cmp	r0, #0
 8006b26:	db08      	blt.n	8006b3a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b28:	0109      	lsls	r1, r1, #4
 8006b2a:	b2c9      	uxtb	r1, r1
 8006b2c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006b30:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006b34:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8006b38:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b3a:	f000 000f 	and.w	r0, r0, #15
 8006b3e:	0109      	lsls	r1, r1, #4
 8006b40:	b2c9      	uxtb	r1, r1
 8006b42:	4b01      	ldr	r3, [pc, #4]	@ (8006b48 <__NVIC_SetPriority+0x24>)
 8006b44:	5419      	strb	r1, [r3, r0]
  }
}
 8006b46:	4770      	bx	lr
 8006b48:	e000ed14 	.word	0xe000ed14

08006b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b4c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b4e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b52:	f1c0 0c07 	rsb	ip, r0, #7
 8006b56:	f1bc 0f04 	cmp.w	ip, #4
 8006b5a:	bf28      	it	cs
 8006b5c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b60:	1d03      	adds	r3, r0, #4
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d90f      	bls.n	8006b86 <NVIC_EncodePriority+0x3a>
 8006b66:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b68:	f04f 3eff 	mov.w	lr, #4294967295
 8006b6c:	fa0e f00c 	lsl.w	r0, lr, ip
 8006b70:	ea21 0100 	bic.w	r1, r1, r0
 8006b74:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b76:	fa0e fe03 	lsl.w	lr, lr, r3
 8006b7a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8006b7e:	ea41 0002 	orr.w	r0, r1, r2
 8006b82:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b86:	2300      	movs	r3, #0
 8006b88:	e7ee      	b.n	8006b68 <NVIC_EncodePriority+0x1c>
	...

08006b8c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b8c:	4a07      	ldr	r2, [pc, #28]	@ (8006bac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006b8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b98:	0200      	lsls	r0, r0, #8
 8006b9a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006ba8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb4:	4b05      	ldr	r3, [pc, #20]	@ (8006bcc <HAL_NVIC_SetPriority+0x1c>)
 8006bb6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bb8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8006bbc:	f7ff ffc6 	bl	8006b4c <NVIC_EncodePriority>
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff ffae 	bl	8006b24 <__NVIC_SetPriority>
}
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	bf00      	nop
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bd0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bd2:	f7ff ff99 	bl	8006b08 <__NVIC_EnableIRQ>
}
 8006bd6:	bd08      	pop	{r3, pc}

08006bd8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bd8:	3801      	subs	r0, #1
 8006bda:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006bde:	d20b      	bcs.n	8006bf8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006be0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006be4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006be6:	4a05      	ldr	r2, [pc, #20]	@ (8006bfc <HAL_SYSTICK_Config+0x24>)
 8006be8:	21f0      	movs	r1, #240	@ 0xf0
 8006bea:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bee:	2000      	movs	r0, #0
 8006bf0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bf6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006bf8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006bfa:	4770      	bx	lr
 8006bfc:	e000ed00 	.word	0xe000ed00

08006c00 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c00:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d006      	beq.n	8006c18 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	63c3      	str	r3, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8006c14:	2001      	movs	r0, #1
 8006c16:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c18:	6802      	ldr	r2, [r0, #0]
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	f023 030e 	bic.w	r3, r3, #14
 8006c20:	6013      	str	r3, [r2, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c22:	6802      	ldr	r2, [r0, #0]
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c2c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006c2e:	f003 031c 	and.w	r3, r3, #28
 8006c32:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006c34:	2201      	movs	r2, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	604b      	str	r3, [r1, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c3c:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c40:	2300      	movs	r3, #0
 8006c42:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

    return status;
 8006c46:	4618      	mov	r0, r3
  }
}
 8006c48:	4770      	bx	lr

08006c4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c4a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006c4c:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d003      	beq.n	8006c5e <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c56:	2304      	movs	r3, #4
 8006c58:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8006c5a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8006c5c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c5e:	6802      	ldr	r2, [r0, #0]
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	f023 030e 	bic.w	r3, r3, #14
 8006c66:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006c68:	6802      	ldr	r2, [r0, #0]
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c72:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006c74:	f003 031c 	and.w	r3, r3, #28
 8006c78:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006c82:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8006c86:	2300      	movs	r3, #0
 8006c88:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 8006c8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006c8e:	b113      	cbz	r3, 8006c96 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8006c90:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2000      	movs	r0, #0
 8006c94:	e7e2      	b.n	8006c5c <HAL_DMA_Abort_IT+0x12>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7e0      	b.n	8006c5c <HAL_DMA_Abort_IT+0x12>
	...

08006c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c9e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8006ca0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ca2:	e03f      	b.n	8006d24 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006ca4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006ca6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006caa:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006cae:	409c      	lsls	r4, r3
 8006cb0:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8006cb2:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8006cb4:	e062      	b.n	8006d7c <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cb6:	2406      	movs	r4, #6
 8006cb8:	e000      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006cba:	2400      	movs	r4, #0
 8006cbc:	40b4      	lsls	r4, r6
 8006cbe:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006cc0:	3502      	adds	r5, #2
 8006cc2:	4e68      	ldr	r6, [pc, #416]	@ (8006e64 <HAL_GPIO_Init+0x1c8>)
 8006cc4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006cc8:	4c67      	ldr	r4, [pc, #412]	@ (8006e68 <HAL_GPIO_Init+0x1cc>)
 8006cca:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006ccc:	43d4      	mvns	r4, r2
 8006cce:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006cd2:	684f      	ldr	r7, [r1, #4]
 8006cd4:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8006cd8:	d001      	beq.n	8006cde <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8006cda:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8006cde:	4d62      	ldr	r5, [pc, #392]	@ (8006e68 <HAL_GPIO_Init+0x1cc>)
 8006ce0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8006ce2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006ce4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ce8:	684f      	ldr	r7, [r1, #4]
 8006cea:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8006cee:	d001      	beq.n	8006cf4 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8006cf0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8006cf4:	4d5c      	ldr	r5, [pc, #368]	@ (8006e68 <HAL_GPIO_Init+0x1cc>)
 8006cf6:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cf8:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8006cfa:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cfe:	684f      	ldr	r7, [r1, #4]
 8006d00:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8006d04:	d001      	beq.n	8006d0a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8006d06:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006d0a:	4d57      	ldr	r5, [pc, #348]	@ (8006e68 <HAL_GPIO_Init+0x1cc>)
 8006d0c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006d0e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006d10:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d12:	684e      	ldr	r6, [r1, #4]
 8006d14:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8006d18:	d001      	beq.n	8006d1e <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8006d1a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006d1e:	4a52      	ldr	r2, [pc, #328]	@ (8006e68 <HAL_GPIO_Init+0x1cc>)
 8006d20:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8006d22:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d24:	680a      	ldr	r2, [r1, #0]
 8006d26:	fa32 f403 	lsrs.w	r4, r2, r3
 8006d2a:	f000 8098 	beq.w	8006e5e <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d2e:	f04f 0c01 	mov.w	ip, #1
 8006d32:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006d36:	ea1c 0202 	ands.w	r2, ip, r2
 8006d3a:	d0f2      	beq.n	8006d22 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d3c:	684c      	ldr	r4, [r1, #4]
 8006d3e:	1e65      	subs	r5, r4, #1
 8006d40:	2d01      	cmp	r5, #1
 8006d42:	d903      	bls.n	8006d4c <HAL_GPIO_Init+0xb0>
 8006d44:	2c11      	cmp	r4, #17
 8006d46:	d001      	beq.n	8006d4c <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d48:	2c12      	cmp	r4, #18
 8006d4a:	d112      	bne.n	8006d72 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8006d4c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d4e:	005e      	lsls	r6, r3, #1
 8006d50:	2403      	movs	r4, #3
 8006d52:	40b4      	lsls	r4, r6
 8006d54:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006d58:	68cc      	ldr	r4, [r1, #12]
 8006d5a:	40b4      	lsls	r4, r6
 8006d5c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006d5e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8006d60:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d62:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006d66:	684c      	ldr	r4, [r1, #4]
 8006d68:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006d6c:	409c      	lsls	r4, r3
 8006d6e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006d70:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006d72:	684c      	ldr	r4, [r1, #4]
 8006d74:	f004 0503 	and.w	r5, r4, #3
 8006d78:	2d03      	cmp	r5, #3
 8006d7a:	d093      	beq.n	8006ca4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8006d7c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006d7e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006d82:	2403      	movs	r4, #3
 8006d84:	fa04 f40e 	lsl.w	r4, r4, lr
 8006d88:	ea6f 0c04 	mvn.w	ip, r4
 8006d8c:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006d90:	688c      	ldr	r4, [r1, #8]
 8006d92:	fa04 f40e 	lsl.w	r4, r4, lr
 8006d96:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8006d98:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d9a:	684c      	ldr	r4, [r1, #4]
 8006d9c:	2c02      	cmp	r4, #2
 8006d9e:	d001      	beq.n	8006da4 <HAL_GPIO_Init+0x108>
 8006da0:	2c12      	cmp	r4, #18
 8006da2:	d10f      	bne.n	8006dc4 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8006da4:	08dd      	lsrs	r5, r3, #3
 8006da6:	3508      	adds	r5, #8
 8006da8:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006dac:	f003 0607 	and.w	r6, r3, #7
 8006db0:	00b6      	lsls	r6, r6, #2
 8006db2:	240f      	movs	r4, #15
 8006db4:	40b4      	lsls	r4, r6
 8006db6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006dba:	690c      	ldr	r4, [r1, #16]
 8006dbc:	40b4      	lsls	r4, r6
 8006dbe:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006dc0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8006dc4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006dc6:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006dca:	684c      	ldr	r4, [r1, #4]
 8006dcc:	f004 0403 	and.w	r4, r4, #3
 8006dd0:	fa04 f40e 	lsl.w	r4, r4, lr
 8006dd4:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006dd8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006dda:	684c      	ldr	r4, [r1, #4]
 8006ddc:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8006de0:	d09f      	beq.n	8006d22 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006de2:	4c22      	ldr	r4, [pc, #136]	@ (8006e6c <HAL_GPIO_Init+0x1d0>)
 8006de4:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8006de6:	f045 0501 	orr.w	r5, r5, #1
 8006dea:	6625      	str	r5, [r4, #96]	@ 0x60
 8006dec:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8006dee:	f004 0401 	and.w	r4, r4, #1
 8006df2:	9401      	str	r4, [sp, #4]
 8006df4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006df6:	089d      	lsrs	r5, r3, #2
 8006df8:	1cae      	adds	r6, r5, #2
 8006dfa:	4c1a      	ldr	r4, [pc, #104]	@ (8006e64 <HAL_GPIO_Init+0x1c8>)
 8006dfc:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006e00:	f003 0603 	and.w	r6, r3, #3
 8006e04:	00b6      	lsls	r6, r6, #2
 8006e06:	240f      	movs	r4, #15
 8006e08:	40b4      	lsls	r4, r6
 8006e0a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e0e:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006e12:	f43f af52 	beq.w	8006cba <HAL_GPIO_Init+0x1e>
 8006e16:	4c16      	ldr	r4, [pc, #88]	@ (8006e70 <HAL_GPIO_Init+0x1d4>)
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d016      	beq.n	8006e4a <HAL_GPIO_Init+0x1ae>
 8006e1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d014      	beq.n	8006e4e <HAL_GPIO_Init+0x1b2>
 8006e24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d012      	beq.n	8006e52 <HAL_GPIO_Init+0x1b6>
 8006e2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d010      	beq.n	8006e56 <HAL_GPIO_Init+0x1ba>
 8006e34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d00e      	beq.n	8006e5a <HAL_GPIO_Init+0x1be>
 8006e3c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	f43f af38 	beq.w	8006cb6 <HAL_GPIO_Init+0x1a>
 8006e46:	2407      	movs	r4, #7
 8006e48:	e738      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006e4a:	2401      	movs	r4, #1
 8006e4c:	e736      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006e4e:	2402      	movs	r4, #2
 8006e50:	e734      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006e52:	2403      	movs	r4, #3
 8006e54:	e732      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006e56:	2404      	movs	r4, #4
 8006e58:	e730      	b.n	8006cbc <HAL_GPIO_Init+0x20>
 8006e5a:	2405      	movs	r4, #5
 8006e5c:	e72e      	b.n	8006cbc <HAL_GPIO_Init+0x20>
  }
}
 8006e5e:	b003      	add	sp, #12
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	48000400 	.word	0x48000400

08006e74 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8006e74:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006e76:	fa31 f203 	lsrs.w	r2, r1, r3
 8006e7a:	f000 808b 	beq.w	8006f94 <HAL_GPIO_DeInit+0x120>
{
 8006e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e80:	e032      	b.n	8006ee8 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006e82:	2506      	movs	r5, #6
 8006e84:	e000      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006e86:	2500      	movs	r5, #0
 8006e88:	fa05 f50c 	lsl.w	r5, r5, ip
 8006e8c:	42a5      	cmp	r5, r4
 8006e8e:	d065      	beq.n	8006f5c <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006e90:	6804      	ldr	r4, [r0, #0]
 8006e92:	005d      	lsls	r5, r3, #1
 8006e94:	f04f 0c03 	mov.w	ip, #3
 8006e98:	fa0c fc05 	lsl.w	ip, ip, r5
 8006e9c:	ea44 040c 	orr.w	r4, r4, ip
 8006ea0:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006ea2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006ea6:	f10e 0e08 	add.w	lr, lr, #8
 8006eaa:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8006eae:	f003 0607 	and.w	r6, r3, #7
 8006eb2:	00b6      	lsls	r6, r6, #2
 8006eb4:	250f      	movs	r5, #15
 8006eb6:	40b5      	lsls	r5, r6
 8006eb8:	ea24 0405 	bic.w	r4, r4, r5
 8006ebc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ec0:	6884      	ldr	r4, [r0, #8]
 8006ec2:	ea24 040c 	bic.w	r4, r4, ip
 8006ec6:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ec8:	6844      	ldr	r4, [r0, #4]
 8006eca:	ea24 0402 	bic.w	r4, r4, r2
 8006ece:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ed0:	68c4      	ldr	r4, [r0, #12]
 8006ed2:	ea24 040c 	bic.w	r4, r4, ip
 8006ed6:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006ed8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006eda:	ea24 0202 	bic.w	r2, r4, r2
 8006ede:	62c2      	str	r2, [r0, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006ee0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8006ee2:	fa31 f203 	lsrs.w	r2, r1, r3
 8006ee6:	d054      	beq.n	8006f92 <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006ee8:	2201      	movs	r2, #1
 8006eea:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006eec:	ea12 0701 	ands.w	r7, r2, r1
 8006ef0:	d0f6      	beq.n	8006ee0 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8006ef2:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8006ef6:	f10e 0502 	add.w	r5, lr, #2
 8006efa:	4c27      	ldr	r4, [pc, #156]	@ (8006f98 <HAL_GPIO_DeInit+0x124>)
 8006efc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006f00:	f003 0c03 	and.w	ip, r3, #3
 8006f04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006f08:	250f      	movs	r5, #15
 8006f0a:	fa05 f60c 	lsl.w	r6, r5, ip
 8006f0e:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006f10:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006f14:	d0b7      	beq.n	8006e86 <HAL_GPIO_DeInit+0x12>
 8006f16:	4d21      	ldr	r5, [pc, #132]	@ (8006f9c <HAL_GPIO_DeInit+0x128>)
 8006f18:	42a8      	cmp	r0, r5
 8006f1a:	d015      	beq.n	8006f48 <HAL_GPIO_DeInit+0xd4>
 8006f1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f20:	42a8      	cmp	r0, r5
 8006f22:	d013      	beq.n	8006f4c <HAL_GPIO_DeInit+0xd8>
 8006f24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f28:	42a8      	cmp	r0, r5
 8006f2a:	d011      	beq.n	8006f50 <HAL_GPIO_DeInit+0xdc>
 8006f2c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f30:	42a8      	cmp	r0, r5
 8006f32:	d00f      	beq.n	8006f54 <HAL_GPIO_DeInit+0xe0>
 8006f34:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f38:	42a8      	cmp	r0, r5
 8006f3a:	d00d      	beq.n	8006f58 <HAL_GPIO_DeInit+0xe4>
 8006f3c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f40:	42a8      	cmp	r0, r5
 8006f42:	d09e      	beq.n	8006e82 <HAL_GPIO_DeInit+0xe>
 8006f44:	2507      	movs	r5, #7
 8006f46:	e79f      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006f48:	2501      	movs	r5, #1
 8006f4a:	e79d      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006f4c:	2502      	movs	r5, #2
 8006f4e:	e79b      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006f50:	2503      	movs	r5, #3
 8006f52:	e799      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006f54:	2504      	movs	r5, #4
 8006f56:	e797      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
 8006f58:	2505      	movs	r5, #5
 8006f5a:	e795      	b.n	8006e88 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8006f5c:	4c10      	ldr	r4, [pc, #64]	@ (8006fa0 <HAL_GPIO_DeInit+0x12c>)
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	ea25 0507 	bic.w	r5, r5, r7
 8006f64:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006f66:	6865      	ldr	r5, [r4, #4]
 8006f68:	ea25 0507 	bic.w	r5, r5, r7
 8006f6c:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006f6e:	68a5      	ldr	r5, [r4, #8]
 8006f70:	ea25 0507 	bic.w	r5, r5, r7
 8006f74:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006f76:	68e5      	ldr	r5, [r4, #12]
 8006f78:	ea25 0507 	bic.w	r5, r5, r7
 8006f7c:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006f7e:	4f06      	ldr	r7, [pc, #24]	@ (8006f98 <HAL_GPIO_DeInit+0x124>)
 8006f80:	f10e 0402 	add.w	r4, lr, #2
 8006f84:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f88:	ea25 0506 	bic.w	r5, r5, r6
 8006f8c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8006f90:	e77e      	b.n	8006e90 <HAL_GPIO_DeInit+0x1c>
  }
}
 8006f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	48000400 	.word	0x48000400
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006fa4:	6903      	ldr	r3, [r0, #16]
 8006fa6:	4219      	tst	r1, r3
 8006fa8:	d001      	beq.n	8006fae <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006faa:	2001      	movs	r0, #1
 8006fac:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fae:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fb2:	b10a      	cbz	r2, 8006fb8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fb4:	6181      	str	r1, [r0, #24]
 8006fb6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fb8:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006fba:	4770      	bx	lr

08006fbc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006fbc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fbe:	ea01 0203 	and.w	r2, r1, r3
 8006fc2:	ea21 0103 	bic.w	r1, r1, r3
 8006fc6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fca:	6181      	str	r1, [r0, #24]
}
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fd0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006fd2:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	4203      	tst	r3, r0
 8006fd8:	d100      	bne.n	8006fdc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006fda:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fdc:	4b02      	ldr	r3, [pc, #8]	@ (8006fe8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006fde:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fe0:	f7ff fa90 	bl	8006504 <HAL_GPIO_EXTI_Callback>
}
 8006fe4:	e7f9      	b.n	8006fda <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006fe6:	bf00      	nop
 8006fe8:	40010400 	.word	0x40010400

08006fec <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fec:	4a02      	ldr	r2, [pc, #8]	@ (8006ff8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006fee:	6813      	ldr	r3, [r2, #0]
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff4:	6013      	str	r3, [r2, #0]
}
 8006ff6:	4770      	bx	lr
 8006ff8:	40007000 	.word	0x40007000

08006ffc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ffc:	4b02      	ldr	r3, [pc, #8]	@ (8007008 <HAL_PWREx_GetVoltageRange+0xc>)
 8006ffe:	6818      	ldr	r0, [r3, #0]
#endif
}
 8007000:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40007000 	.word	0x40007000

0800700c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800700c:	4a02      	ldr	r2, [pc, #8]	@ (8007018 <HAL_PWREx_EnableVddIO2+0xc>)
 800700e:	6853      	ldr	r3, [r2, #4]
 8007010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007014:	6053      	str	r3, [r2, #4]
}
 8007016:	4770      	bx	lr
 8007018:	40007000 	.word	0x40007000

0800701c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800701c:	b530      	push	{r4, r5, lr}
 800701e:	b083      	sub	sp, #12
 8007020:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007022:	4b20      	ldr	r3, [pc, #128]	@ (80070a4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007026:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800702a:	d00b      	beq.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800702c:	f7ff ffe6 	bl	8006ffc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007030:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007034:	d017      	beq.n	8007066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007036:	2c80      	cmp	r4, #128	@ 0x80
 8007038:	d81f      	bhi.n	800707a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800703a:	d02d      	beq.n	8007098 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800703c:	2c70      	cmp	r4, #112	@ 0x70
 800703e:	d02d      	beq.n	800709c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007040:	2100      	movs	r1, #0
 8007042:	e01b      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007044:	4d17      	ldr	r5, [pc, #92]	@ (80070a4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007046:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800704e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8007050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8007058:	f7ff ffd0 	bl	8006ffc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800705c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800705e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007062:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007064:	e7e4      	b.n	8007030 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8007066:	2c80      	cmp	r4, #128	@ 0x80
 8007068:	d903      	bls.n	8007072 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800706a:	2ca0      	cmp	r4, #160	@ 0xa0
 800706c:	d903      	bls.n	8007076 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800706e:	2102      	movs	r1, #2
 8007070:	e004      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007072:	2100      	movs	r1, #0
 8007074:	e002      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8007076:	2101      	movs	r1, #1
 8007078:	e000      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800707a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800707c:	4a0a      	ldr	r2, [pc, #40]	@ (80070a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	f023 0307 	bic.w	r3, r3, #7
 8007084:	430b      	orrs	r3, r1
 8007086:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	428b      	cmp	r3, r1
 8007090:	d106      	bne.n	80070a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007092:	2000      	movs	r0, #0
}
 8007094:	b003      	add	sp, #12
 8007096:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8007098:	2102      	movs	r1, #2
 800709a:	e7ef      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800709c:	2101      	movs	r1, #1
 800709e:	e7ed      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80070a0:	2001      	movs	r0, #1
 80070a2:	e7f7      	b.n	8007094 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80070a4:	40021000 	.word	0x40021000
 80070a8:	40022000 	.word	0x40022000

080070ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ac:	4a25      	ldr	r2, [pc, #148]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 80070ae:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80070b6:	f013 030c 	ands.w	r3, r3, #12
 80070ba:	d009      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0x24>
 80070bc:	2b0c      	cmp	r3, #12
 80070be:	d005      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d03b      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d03b      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80070c8:	2000      	movs	r0, #0
 80070ca:	e00f      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80070cc:	2a01      	cmp	r2, #1
 80070ce:	d1f7      	bne.n	80070c0 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	f012 0f08 	tst.w	r2, #8
 80070d8:	d10c      	bne.n	80070f4 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80070da:	4a1a      	ldr	r2, [pc, #104]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 80070dc:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80070e0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80070e4:	4918      	ldr	r1, [pc, #96]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80070e6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070ea:	b113      	cbz	r3, 80070f2 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070ec:	2b0c      	cmp	r3, #12
 80070ee:	d006      	beq.n	80070fe <HAL_RCC_GetSysClockFreq+0x52>
 80070f0:	2000      	movs	r0, #0
}
 80070f2:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80070f4:	4a13      	ldr	r2, [pc, #76]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80070fc:	e7f2      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070fe:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8007106:	2b02      	cmp	r3, #2
 8007108:	d016      	beq.n	8007138 <HAL_RCC_GetSysClockFreq+0x8c>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d100      	bne.n	8007110 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800710e:	480f      	ldr	r0, [pc, #60]	@ (800714c <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007110:	490c      	ldr	r1, [pc, #48]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x98>)
 8007112:	68ca      	ldr	r2, [r1, #12]
 8007114:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007118:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800711a:	68cb      	ldr	r3, [r1, #12]
 800711c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8007120:	fb00 f303 	mul.w	r3, r0, r3
 8007124:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007128:	68c8      	ldr	r0, [r1, #12]
 800712a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800712e:	3001      	adds	r0, #1
 8007130:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8007132:	fbb3 f0f0 	udiv	r0, r3, r0
 8007136:	4770      	bx	lr
    switch (pllsource)
 8007138:	4805      	ldr	r0, [pc, #20]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xa4>)
 800713a:	e7e9      	b.n	8007110 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 800713c:	4804      	ldr	r0, [pc, #16]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xa4>)
 800713e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007140:	4802      	ldr	r0, [pc, #8]	@ (800714c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007142:	4770      	bx	lr
 8007144:	40021000 	.word	0x40021000
 8007148:	0800b4e0 	.word	0x0800b4e0
 800714c:	007a1200 	.word	0x007a1200
 8007150:	00f42400 	.word	0x00f42400

08007154 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007154:	2800      	cmp	r0, #0
 8007156:	f000 82fc 	beq.w	8007752 <HAL_RCC_OscConfig+0x5fe>
{
 800715a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715c:	b083      	sub	sp, #12
 800715e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007160:	4b96      	ldr	r3, [pc, #600]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007162:	689d      	ldr	r5, [r3, #8]
 8007164:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007168:	68de      	ldr	r6, [r3, #12]
 800716a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800716e:	6803      	ldr	r3, [r0, #0]
 8007170:	f013 0f10 	tst.w	r3, #16
 8007174:	d05a      	beq.n	800722c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007176:	b1e5      	cbz	r5, 80071b2 <HAL_RCC_OscConfig+0x5e>
 8007178:	2d0c      	cmp	r5, #12
 800717a:	d018      	beq.n	80071ae <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800717c:	69a3      	ldr	r3, [r4, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80bb 	beq.w	80072fa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8007184:	4a8d      	ldr	r2, [pc, #564]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800718e:	f7ff fcb5 	bl	8006afc <HAL_GetTick>
 8007192:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007194:	4b89      	ldr	r3, [pc, #548]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f013 0f02 	tst.w	r3, #2
 800719c:	f040 809a 	bne.w	80072d4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071a0:	f7ff fcac 	bl	8006afc <HAL_GetTick>
 80071a4:	1bc0      	subs	r0, r0, r7
 80071a6:	2802      	cmp	r0, #2
 80071a8:	d9f4      	bls.n	8007194 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80071aa:	2003      	movs	r0, #3
 80071ac:	e2dc      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071ae:	2e01      	cmp	r6, #1
 80071b0:	d1e4      	bne.n	800717c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071b2:	4b82      	ldr	r3, [pc, #520]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f013 0f02 	tst.w	r3, #2
 80071ba:	d003      	beq.n	80071c4 <HAL_RCC_OscConfig+0x70>
 80071bc:	69a3      	ldr	r3, [r4, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 82c9 	beq.w	8007756 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071c4:	6a20      	ldr	r0, [r4, #32]
 80071c6:	4b7d      	ldr	r3, [pc, #500]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f013 0f08 	tst.w	r3, #8
 80071ce:	d05b      	beq.n	8007288 <HAL_RCC_OscConfig+0x134>
 80071d0:	4b7a      	ldr	r3, [pc, #488]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071d8:	4298      	cmp	r0, r3
 80071da:	d85c      	bhi.n	8007296 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071dc:	4b77      	ldr	r3, [pc, #476]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	f042 0208 	orr.w	r2, r2, #8
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80071ec:	6a21      	ldr	r1, [r4, #32]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80071f8:	69e1      	ldr	r1, [r4, #28]
 80071fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80071fe:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007200:	2d00      	cmp	r5, #0
 8007202:	d060      	beq.n	80072c6 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007204:	f7ff ff52 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8007208:	4b6c      	ldr	r3, [pc, #432]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007210:	4a6b      	ldr	r2, [pc, #428]	@ (80073c0 <HAL_RCC_OscConfig+0x26c>)
 8007212:	5cd3      	ldrb	r3, [r2, r3]
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	40d8      	lsrs	r0, r3
 800721a:	4b6a      	ldr	r3, [pc, #424]	@ (80073c4 <HAL_RCC_OscConfig+0x270>)
 800721c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800721e:	4b6a      	ldr	r3, [pc, #424]	@ (80073c8 <HAL_RCC_OscConfig+0x274>)
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f7ff fc29 	bl	8006a78 <HAL_InitTick>
        if(status != HAL_OK)
 8007226:	2800      	cmp	r0, #0
 8007228:	f040 829e 	bne.w	8007768 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	f013 0f01 	tst.w	r3, #1
 8007232:	f000 8081 	beq.w	8007338 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007236:	2d08      	cmp	r5, #8
 8007238:	d075      	beq.n	8007326 <HAL_RCC_OscConfig+0x1d2>
 800723a:	2d0c      	cmp	r5, #12
 800723c:	d071      	beq.n	8007322 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007244:	f000 8097 	beq.w	8007376 <HAL_RCC_OscConfig+0x222>
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800724c:	f000 8099 	beq.w	8007382 <HAL_RCC_OscConfig+0x22e>
 8007250:	4b5a      	ldr	r3, [pc, #360]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007260:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8099 	beq.w	800739c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800726a:	f7ff fc47 	bl	8006afc <HAL_GetTick>
 800726e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007270:	4b52      	ldr	r3, [pc, #328]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007278:	d15e      	bne.n	8007338 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800727a:	f7ff fc3f 	bl	8006afc <HAL_GetTick>
 800727e:	1bc0      	subs	r0, r0, r7
 8007280:	2864      	cmp	r0, #100	@ 0x64
 8007282:	d9f5      	bls.n	8007270 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8007284:	2003      	movs	r0, #3
 8007286:	e26f      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007288:	4b4c      	ldr	r3, [pc, #304]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800728e:	091b      	lsrs	r3, r3, #4
 8007290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007294:	e7a0      	b.n	80071d8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007296:	f7ff fec1 	bl	800701c <RCC_SetFlashLatencyFromMSIRange>
 800729a:	2800      	cmp	r0, #0
 800729c:	f040 825d 	bne.w	800775a <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072a0:	4b46      	ldr	r3, [pc, #280]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	f042 0208 	orr.w	r2, r2, #8
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80072b0:	6a21      	ldr	r1, [r4, #32]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80072bc:	69e1      	ldr	r1, [r4, #28]
 80072be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80072c2:	605a      	str	r2, [r3, #4]
 80072c4:	e79e      	b.n	8007204 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072c6:	6a20      	ldr	r0, [r4, #32]
 80072c8:	f7ff fea8 	bl	800701c <RCC_SetFlashLatencyFromMSIRange>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d099      	beq.n	8007204 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80072d0:	2001      	movs	r0, #1
 80072d2:	e249      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072d4:	4b39      	ldr	r3, [pc, #228]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	f042 0208 	orr.w	r2, r2, #8
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80072e4:	6a21      	ldr	r1, [r4, #32]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80072f0:	69e1      	ldr	r1, [r4, #28]
 80072f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	e798      	b.n	800722c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80072fa:	4a30      	ldr	r2, [pc, #192]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007304:	f7ff fbfa 	bl	8006afc <HAL_GetTick>
 8007308:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800730a:	4b2c      	ldr	r3, [pc, #176]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f013 0f02 	tst.w	r3, #2
 8007312:	d08b      	beq.n	800722c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007314:	f7ff fbf2 	bl	8006afc <HAL_GetTick>
 8007318:	1bc0      	subs	r0, r0, r7
 800731a:	2802      	cmp	r0, #2
 800731c:	d9f5      	bls.n	800730a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800731e:	2003      	movs	r0, #3
 8007320:	e222      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007322:	2e03      	cmp	r6, #3
 8007324:	d18b      	bne.n	800723e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007326:	4b25      	ldr	r3, [pc, #148]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800732e:	d003      	beq.n	8007338 <HAL_RCC_OscConfig+0x1e4>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 8213 	beq.w	800775e <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	f013 0f02 	tst.w	r3, #2
 800733e:	d058      	beq.n	80073f2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007340:	2d04      	cmp	r5, #4
 8007342:	d045      	beq.n	80073d0 <HAL_RCC_OscConfig+0x27c>
 8007344:	2d0c      	cmp	r5, #12
 8007346:	d041      	beq.n	80073cc <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007348:	68e3      	ldr	r3, [r4, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d077      	beq.n	800743e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800734e:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007356:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007358:	f7ff fbd0 	bl	8006afc <HAL_GetTick>
 800735c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800735e:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007366:	d161      	bne.n	800742c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007368:	f7ff fbc8 	bl	8006afc <HAL_GetTick>
 800736c:	1b80      	subs	r0, r0, r6
 800736e:	2802      	cmp	r0, #2
 8007370:	d9f5      	bls.n	800735e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8007372:	2003      	movs	r0, #3
 8007374:	e1f8      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007376:	4a11      	ldr	r2, [pc, #68]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 8007378:	6813      	ldr	r3, [r2, #0]
 800737a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e76f      	b.n	8007262 <HAL_RCC_OscConfig+0x10e>
 8007382:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007386:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e762      	b.n	8007262 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800739c:	f7ff fbae 	bl	8006afc <HAL_GetTick>
 80073a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073a2:	4b06      	ldr	r3, [pc, #24]	@ (80073bc <HAL_RCC_OscConfig+0x268>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80073aa:	d0c5      	beq.n	8007338 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073ac:	f7ff fba6 	bl	8006afc <HAL_GetTick>
 80073b0:	1bc0      	subs	r0, r0, r7
 80073b2:	2864      	cmp	r0, #100	@ 0x64
 80073b4:	d9f5      	bls.n	80073a2 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80073b6:	2003      	movs	r0, #3
 80073b8:	e1d6      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
 80073ba:	bf00      	nop
 80073bc:	40021000 	.word	0x40021000
 80073c0:	0800b510 	.word	0x0800b510
 80073c4:	20000020 	.word	0x20000020
 80073c8:	20000028 	.word	0x20000028
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80073cc:	2e02      	cmp	r6, #2
 80073ce:	d1bb      	bne.n	8007348 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073d0:	4b95      	ldr	r3, [pc, #596]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80073d8:	d003      	beq.n	80073e2 <HAL_RCC_OscConfig+0x28e>
 80073da:	68e3      	ldr	r3, [r4, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 81c0 	beq.w	8007762 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e2:	4a91      	ldr	r2, [pc, #580]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80073e4:	6853      	ldr	r3, [r2, #4]
 80073e6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80073ea:	6921      	ldr	r1, [r4, #16]
 80073ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80073f0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	f013 0f08 	tst.w	r3, #8
 80073f8:	d04c      	beq.n	8007494 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	b39b      	cbz	r3, 8007466 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80073fe:	4a8a      	ldr	r2, [pc, #552]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007400:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800740c:	f7ff fb76 	bl	8006afc <HAL_GetTick>
 8007410:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007412:	4b85      	ldr	r3, [pc, #532]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007418:	f013 0f02 	tst.w	r3, #2
 800741c:	d13a      	bne.n	8007494 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800741e:	f7ff fb6d 	bl	8006afc <HAL_GetTick>
 8007422:	1b80      	subs	r0, r0, r6
 8007424:	2802      	cmp	r0, #2
 8007426:	d9f4      	bls.n	8007412 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8007428:	2003      	movs	r0, #3
 800742a:	e19d      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742c:	4a7e      	ldr	r2, [pc, #504]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 800742e:	6853      	ldr	r3, [r2, #4]
 8007430:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8007434:	6921      	ldr	r1, [r4, #16]
 8007436:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800743a:	6053      	str	r3, [r2, #4]
 800743c:	e7d9      	b.n	80073f2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800743e:	4a7a      	ldr	r2, [pc, #488]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007440:	6813      	ldr	r3, [r2, #0]
 8007442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007446:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007448:	f7ff fb58 	bl	8006afc <HAL_GetTick>
 800744c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800744e:	4b76      	ldr	r3, [pc, #472]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007456:	d0cc      	beq.n	80073f2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007458:	f7ff fb50 	bl	8006afc <HAL_GetTick>
 800745c:	1b80      	subs	r0, r0, r6
 800745e:	2802      	cmp	r0, #2
 8007460:	d9f5      	bls.n	800744e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8007462:	2003      	movs	r0, #3
 8007464:	e180      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8007466:	4a70      	ldr	r2, [pc, #448]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007468:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007474:	f7ff fb42 	bl	8006afc <HAL_GetTick>
 8007478:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800747a:	4b6b      	ldr	r3, [pc, #428]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 800747c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007480:	f013 0f02 	tst.w	r3, #2
 8007484:	d006      	beq.n	8007494 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007486:	f7ff fb39 	bl	8006afc <HAL_GetTick>
 800748a:	1b80      	subs	r0, r0, r6
 800748c:	2802      	cmp	r0, #2
 800748e:	d9f4      	bls.n	800747a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8007490:	2003      	movs	r0, #3
 8007492:	e169      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	f013 0f04 	tst.w	r3, #4
 800749a:	d07a      	beq.n	8007592 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800749c:	4b62      	ldr	r3, [pc, #392]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 800749e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80074a4:	d136      	bne.n	8007514 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a6:	4b60      	ldr	r3, [pc, #384]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80074a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80074aa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80074ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80074b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80074ba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074bc:	4b5b      	ldr	r3, [pc, #364]	@ (800762c <HAL_RCC_OscConfig+0x4d8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80074c4:	d028      	beq.n	8007518 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d039      	beq.n	8007540 <HAL_RCC_OscConfig+0x3ec>
 80074cc:	2b05      	cmp	r3, #5
 80074ce:	d03f      	beq.n	8007550 <HAL_RCC_OscConfig+0x3fc>
 80074d0:	4b55      	ldr	r3, [pc, #340]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80074d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80074de:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80074e2:	f022 0204 	bic.w	r2, r2, #4
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d03d      	beq.n	800756c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80074f0:	f7ff fb04 	bl	8006afc <HAL_GetTick>
 80074f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f6:	4b4c      	ldr	r3, [pc, #304]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fc:	f013 0f02 	tst.w	r3, #2
 8007500:	d146      	bne.n	8007590 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007502:	f7ff fafb 	bl	8006afc <HAL_GetTick>
 8007506:	1bc0      	subs	r0, r0, r7
 8007508:	f241 3388 	movw	r3, #5000	@ 0x1388
 800750c:	4298      	cmp	r0, r3
 800750e:	d9f2      	bls.n	80074f6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8007510:	2003      	movs	r0, #3
 8007512:	e129      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8007514:	2600      	movs	r6, #0
 8007516:	e7d1      	b.n	80074bc <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007518:	4a44      	ldr	r2, [pc, #272]	@ (800762c <HAL_RCC_OscConfig+0x4d8>)
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007520:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007522:	f7ff faeb 	bl	8006afc <HAL_GetTick>
 8007526:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007528:	4b40      	ldr	r3, [pc, #256]	@ (800762c <HAL_RCC_OscConfig+0x4d8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007530:	d1c9      	bne.n	80074c6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007532:	f7ff fae3 	bl	8006afc <HAL_GetTick>
 8007536:	1bc0      	subs	r0, r0, r7
 8007538:	2802      	cmp	r0, #2
 800753a:	d9f5      	bls.n	8007528 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800753c:	2003      	movs	r0, #3
 800753e:	e113      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007540:	4a39      	ldr	r2, [pc, #228]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007542:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800754e:	e7cc      	b.n	80074ea <HAL_RCC_OscConfig+0x396>
 8007550:	4b35      	ldr	r3, [pc, #212]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007552:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007556:	f042 0204 	orr.w	r2, r2, #4
 800755a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800755e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800756a:	e7be      	b.n	80074ea <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800756c:	f7ff fac6 	bl	8006afc <HAL_GetTick>
 8007570:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007572:	4b2d      	ldr	r3, [pc, #180]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007578:	f013 0f02 	tst.w	r3, #2
 800757c:	d008      	beq.n	8007590 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757e:	f7ff fabd 	bl	8006afc <HAL_GetTick>
 8007582:	1bc0      	subs	r0, r0, r7
 8007584:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007588:	4298      	cmp	r0, r3
 800758a:	d9f2      	bls.n	8007572 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800758c:	2003      	movs	r0, #3
 800758e:	e0eb      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8007590:	bb6e      	cbnz	r6, 80075ee <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007592:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80e6 	beq.w	8007766 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800759a:	2b02      	cmp	r3, #2
 800759c:	d02d      	beq.n	80075fa <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800759e:	2d0c      	cmp	r5, #12
 80075a0:	f000 80e8 	beq.w	8007774 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 80075a4:	4b20      	ldr	r3, [pc, #128]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80075ac:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f013 5f20 	tst.w	r3, #671088640	@ 0x28000000
 80075b4:	d104      	bne.n	80075c0 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80075b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075b8:	68d3      	ldr	r3, [r2, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075c2:	68d3      	ldr	r3, [r2, #12]
 80075c4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80075c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075cc:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80075ce:	f7ff fa95 	bl	8006afc <HAL_GetTick>
 80075d2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d4:	4b14      	ldr	r3, [pc, #80]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80075dc:	f000 80b7 	beq.w	800774e <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e0:	f7ff fa8c 	bl	8006afc <HAL_GetTick>
 80075e4:	1b00      	subs	r0, r0, r4
 80075e6:	2802      	cmp	r0, #2
 80075e8:	d9f4      	bls.n	80075d4 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 80075ea:	2003      	movs	r0, #3
 80075ec:	e0bc      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075f0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80075f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075f8:	e7cb      	b.n	8007592 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 80075fc:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fe:	f003 0103 	and.w	r1, r3, #3
 8007602:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007604:	4291      	cmp	r1, r2
 8007606:	d013      	beq.n	8007630 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007608:	2d0c      	cmp	r5, #12
 800760a:	f000 80af 	beq.w	800776c <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800760e:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8007616:	f040 80ab 	bne.w	8007770 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800761a:	4b03      	ldr	r3, [pc, #12]	@ (8007628 <HAL_RCC_OscConfig+0x4d4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007622:	d031      	beq.n	8007688 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8007624:	2001      	movs	r0, #1
 8007626:	e09f      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
 8007628:	40021000 	.word	0x40021000
 800762c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007630:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007634:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007636:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007638:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800763c:	d1e4      	bne.n	8007608 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800763e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007644:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007648:	d1de      	bne.n	8007608 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800764a:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800764e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007650:	3a07      	subs	r2, #7
 8007652:	bf18      	it	ne
 8007654:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007656:	4291      	cmp	r1, r2
 8007658:	d1d6      	bne.n	8007608 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800765a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800765e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007660:	0852      	lsrs	r2, r2, #1
 8007662:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007664:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007668:	d1ce      	bne.n	8007608 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800766a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800766e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007670:	0852      	lsrs	r2, r2, #1
 8007672:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007674:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007678:	d1c6      	bne.n	8007608 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767a:	4b3f      	ldr	r3, [pc, #252]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007682:	d04a      	beq.n	800771a <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8007684:	2000      	movs	r0, #0
 8007686:	e06f      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8007688:	4a3b      	ldr	r2, [pc, #236]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007690:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8007692:	f7ff fa33 	bl	8006afc <HAL_GetTick>
 8007696:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007698:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80076a0:	d006      	beq.n	80076b0 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a2:	f7ff fa2b 	bl	8006afc <HAL_GetTick>
 80076a6:	1b40      	subs	r0, r0, r5
 80076a8:	2802      	cmp	r0, #2
 80076aa:	d9f5      	bls.n	8007698 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 80076ac:	2003      	movs	r0, #3
 80076ae:	e05b      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076b0:	4a31      	ldr	r2, [pc, #196]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 80076b2:	68d3      	ldr	r3, [r2, #12]
 80076b4:	4931      	ldr	r1, [pc, #196]	@ (800777c <HAL_RCC_OscConfig+0x628>)
 80076b6:	4019      	ands	r1, r3
 80076b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80076ba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80076bc:	3801      	subs	r0, #1
 80076be:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80076c2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80076c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80076c8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80076ca:	0840      	lsrs	r0, r0, #1
 80076cc:	3801      	subs	r0, #1
 80076ce:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80076d2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80076d4:	0840      	lsrs	r0, r0, #1
 80076d6:	3801      	subs	r0, #1
 80076d8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80076dc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80076de:	0900      	lsrs	r0, r0, #4
 80076e0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80076e4:	4319      	orrs	r1, r3
 80076e6:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80076e8:	6813      	ldr	r3, [r2, #0]
 80076ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ee:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076f0:	68d3      	ldr	r3, [r2, #12]
 80076f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076f6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80076f8:	f7ff fa00 	bl	8006afc <HAL_GetTick>
 80076fc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007706:	d106      	bne.n	8007716 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007708:	f7ff f9f8 	bl	8006afc <HAL_GetTick>
 800770c:	1b00      	subs	r0, r0, r4
 800770e:	2802      	cmp	r0, #2
 8007710:	d9f5      	bls.n	80076fe <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8007712:	2003      	movs	r0, #3
 8007714:	e028      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8007716:	2000      	movs	r0, #0
 8007718:	e026      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 800771a:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007722:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800772a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800772c:	f7ff f9e6 	bl	8006afc <HAL_GetTick>
 8007730:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007732:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <HAL_RCC_OscConfig+0x624>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800773a:	d106      	bne.n	800774a <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800773c:	f7ff f9de 	bl	8006afc <HAL_GetTick>
 8007740:	1b03      	subs	r3, r0, r4
 8007742:	2b02      	cmp	r3, #2
 8007744:	d9f5      	bls.n	8007732 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8007746:	2003      	movs	r0, #3
 8007748:	e00e      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 800774a:	2000      	movs	r0, #0
 800774c:	e00c      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
 800774e:	2000      	movs	r0, #0
 8007750:	e00a      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8007752:	2001      	movs	r0, #1
}
 8007754:	4770      	bx	lr
        return HAL_ERROR;
 8007756:	2001      	movs	r0, #1
 8007758:	e006      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 800775a:	2001      	movs	r0, #1
 800775c:	e004      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800775e:	2001      	movs	r0, #1
 8007760:	e002      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
 8007764:	e000      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8007766:	2000      	movs	r0, #0
}
 8007768:	b003      	add	sp, #12
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800776c:	2001      	movs	r0, #1
 800776e:	e7fb      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8007770:	2001      	movs	r0, #1
 8007772:	e7f9      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8007774:	2001      	movs	r0, #1
 8007776:	e7f7      	b.n	8007768 <HAL_RCC_OscConfig+0x614>
 8007778:	40021000 	.word	0x40021000
 800777c:	f99d808c 	.word	0xf99d808c

08007780 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007780:	2800      	cmp	r0, #0
 8007782:	f000 8098 	beq.w	80078b6 <HAL_RCC_ClockConfig+0x136>
{
 8007786:	b570      	push	{r4, r5, r6, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800778c:	4b4e      	ldr	r3, [pc, #312]	@ (80078c8 <HAL_RCC_ClockConfig+0x148>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	428b      	cmp	r3, r1
 8007796:	d20b      	bcs.n	80077b0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007798:	4a4b      	ldr	r2, [pc, #300]	@ (80078c8 <HAL_RCC_ClockConfig+0x148>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a4:	6813      	ldr	r3, [r2, #0]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	428b      	cmp	r3, r1
 80077ac:	f040 8085 	bne.w	80078ba <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	f013 0f01 	tst.w	r3, #1
 80077b6:	d039      	beq.n	800782c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077b8:	686b      	ldr	r3, [r5, #4]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d009      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d026      	beq.n	8007810 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077c2:	bb63      	cbnz	r3, 800781e <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077c4:	4a41      	ldr	r2, [pc, #260]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	f012 0f02 	tst.w	r2, #2
 80077cc:	d106      	bne.n	80077dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80077ce:	2001      	movs	r0, #1
 80077d0:	e070      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077d2:	4a3e      	ldr	r2, [pc, #248]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80077da:	d070      	beq.n	80078be <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077dc:	493b      	ldr	r1, [pc, #236]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 80077de:	688a      	ldr	r2, [r1, #8]
 80077e0:	f022 0203 	bic.w	r2, r2, #3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80077e8:	f7ff f988 	bl	8006afc <HAL_GetTick>
 80077ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ee:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 030c 	and.w	r3, r3, #12
 80077f6:	686a      	ldr	r2, [r5, #4]
 80077f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80077fc:	d016      	beq.n	800782c <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077fe:	f7ff f97d 	bl	8006afc <HAL_GetTick>
 8007802:	1b80      	subs	r0, r0, r6
 8007804:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007808:	4298      	cmp	r0, r3
 800780a:	d9f0      	bls.n	80077ee <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800780c:	2003      	movs	r0, #3
 800780e:	e051      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007810:	4a2e      	ldr	r2, [pc, #184]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8007818:	d1e0      	bne.n	80077dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800781a:	2001      	movs	r0, #1
 800781c:	e04a      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800781e:	4a2b      	ldr	r2, [pc, #172]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007826:	d1d9      	bne.n	80077dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8007828:	2001      	movs	r0, #1
 800782a:	e043      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	f013 0f02 	tst.w	r3, #2
 8007832:	d006      	beq.n	8007842 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007834:	4a25      	ldr	r2, [pc, #148]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 8007836:	6893      	ldr	r3, [r2, #8]
 8007838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800783c:	68a9      	ldr	r1, [r5, #8]
 800783e:	430b      	orrs	r3, r1
 8007840:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007842:	4b21      	ldr	r3, [pc, #132]	@ (80078c8 <HAL_RCC_ClockConfig+0x148>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	42a3      	cmp	r3, r4
 800784c:	d90a      	bls.n	8007864 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800784e:	4a1e      	ldr	r2, [pc, #120]	@ (80078c8 <HAL_RCC_ClockConfig+0x148>)
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	4323      	orrs	r3, r4
 8007858:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	42a3      	cmp	r3, r4
 8007862:	d12e      	bne.n	80078c2 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	f013 0f04 	tst.w	r3, #4
 800786a:	d006      	beq.n	800787a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800786c:	4a17      	ldr	r2, [pc, #92]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 800786e:	6893      	ldr	r3, [r2, #8]
 8007870:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007874:	68e9      	ldr	r1, [r5, #12]
 8007876:	430b      	orrs	r3, r1
 8007878:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	f013 0f08 	tst.w	r3, #8
 8007880:	d007      	beq.n	8007892 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007882:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 8007884:	6893      	ldr	r3, [r2, #8]
 8007886:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800788a:	6929      	ldr	r1, [r5, #16]
 800788c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007890:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007892:	f7ff fc0b 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <HAL_RCC_ClockConfig+0x14c>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800789e:	4a0c      	ldr	r2, [pc, #48]	@ (80078d0 <HAL_RCC_ClockConfig+0x150>)
 80078a0:	5cd3      	ldrb	r3, [r2, r3]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	40d8      	lsrs	r0, r3
 80078a8:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <HAL_RCC_ClockConfig+0x154>)
 80078aa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <HAL_RCC_ClockConfig+0x158>)
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	f7ff f8e2 	bl	8006a78 <HAL_InitTick>
}
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80078b6:	2001      	movs	r0, #1
}
 80078b8:	4770      	bx	lr
      return HAL_ERROR;
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7fa      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 80078be:	2001      	movs	r0, #1
 80078c0:	e7f8      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 80078c2:	2001      	movs	r0, #1
 80078c4:	e7f6      	b.n	80078b4 <HAL_RCC_ClockConfig+0x134>
 80078c6:	bf00      	nop
 80078c8:	40022000 	.word	0x40022000
 80078cc:	40021000 	.word	0x40021000
 80078d0:	0800b510 	.word	0x0800b510
 80078d4:	20000020 	.word	0x20000020
 80078d8:	20000028 	.word	0x20000028

080078dc <HAL_RCC_GetHCLKFreq>:
}
 80078dc:	4b01      	ldr	r3, [pc, #4]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000020 	.word	0x20000020

080078e8 <HAL_RCC_GetPCLK1Freq>:
{
 80078e8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078ea:	f7ff fff7 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 80078ee:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80078f6:	4a04      	ldr	r2, [pc, #16]	@ (8007908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078f8:	5cd3      	ldrb	r3, [r2, r3]
 80078fa:	f003 031f 	and.w	r3, r3, #31
}
 80078fe:	40d8      	lsrs	r0, r3
 8007900:	bd08      	pop	{r3, pc}
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000
 8007908:	0800b520 	.word	0x0800b520

0800790c <HAL_RCC_GetPCLK2Freq>:
{
 800790c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800790e:	f7ff ffe5 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 8007912:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800791a:	4a04      	ldr	r2, [pc, #16]	@ (800792c <HAL_RCC_GetPCLK2Freq+0x20>)
 800791c:	5cd3      	ldrb	r3, [r2, r3]
 800791e:	f003 031f 	and.w	r3, r3, #31
}
 8007922:	40d8      	lsrs	r0, r3
 8007924:	bd08      	pop	{r3, pc}
 8007926:	bf00      	nop
 8007928:	40021000 	.word	0x40021000
 800792c:	0800b520 	.word	0x0800b520

08007930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007936:	4b59      	ldr	r3, [pc, #356]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f013 0f03 	tst.w	r3, #3
 800793e:	d018      	beq.n	8007972 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007940:	4b56      	ldr	r3, [pc, #344]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	6802      	ldr	r2, [r0, #0]
 800794a:	4293      	cmp	r3, r2
 800794c:	d002      	beq.n	8007954 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800794e:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8007950:	4630      	mov	r0, r6
 8007952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8007954:	2a00      	cmp	r2, #0
 8007956:	f000 809d 	beq.w	8007a94 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800795a:	4b50      	ldr	r3, [pc, #320]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007962:	3301      	adds	r3, #1
 8007964:	6842      	ldr	r2, [r0, #4]
       ||
 8007966:	4293      	cmp	r3, r2
 8007968:	d001      	beq.n	800796e <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800796a:	2601      	movs	r6, #1
 800796c:	e7f0      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2600      	movs	r6, #0
 8007970:	e019      	b.n	80079a6 <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d056      	beq.n	8007a26 <RCCEx_PLLSAI1_Config+0xf6>
 8007978:	2b03      	cmp	r3, #3
 800797a:	d05b      	beq.n	8007a34 <RCCEx_PLLSAI1_Config+0x104>
 800797c:	2b01      	cmp	r3, #1
 800797e:	f040 808b 	bne.w	8007a98 <RCCEx_PLLSAI1_Config+0x168>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007982:	4a46      	ldr	r2, [pc, #280]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	f012 0f02 	tst.w	r2, #2
 800798a:	d05f      	beq.n	8007a4c <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800798c:	4843      	ldr	r0, [pc, #268]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 800798e:	68c2      	ldr	r2, [r0, #12]
 8007990:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	3901      	subs	r1, #1
 8007998:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800799c:	4313      	orrs	r3, r2
 800799e:	60c3      	str	r3, [r0, #12]
 80079a0:	2600      	movs	r6, #0
  if(status == HAL_OK)
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	d1d4      	bne.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80079a6:	4a3d      	ldr	r2, [pc, #244]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80079b0:	f7ff f8a4 	bl	8006afc <HAL_GetTick>
 80079b4:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079b6:	4b39      	ldr	r3, [pc, #228]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80079be:	d005      	beq.n	80079cc <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079c0:	f7ff f89c 	bl	8006afc <HAL_GetTick>
 80079c4:	1bc3      	subs	r3, r0, r7
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d9f5      	bls.n	80079b6 <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 80079ca:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	d1bf      	bne.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	d13d      	bne.n	8007a50 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079d4:	4931      	ldr	r1, [pc, #196]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80079dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079e0:	68a0      	ldr	r0, [r4, #8]
 80079e2:	68e2      	ldr	r2, [r4, #12]
 80079e4:	0912      	lsrs	r2, r2, #4
 80079e6:	0452      	lsls	r2, r2, #17
 80079e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80079f0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80079fa:	f7ff f87f 	bl	8006afc <HAL_GetTick>
 80079fe:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a00:	4b26      	ldr	r3, [pc, #152]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007a08:	d105      	bne.n	8007a16 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a0a:	f7ff f877 	bl	8006afc <HAL_GetTick>
 8007a0e:	1b40      	subs	r0, r0, r5
 8007a10:	2802      	cmp	r0, #2
 8007a12:	d9f5      	bls.n	8007a00 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8007a14:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d19a      	bne.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a1a:	4a20      	ldr	r2, [pc, #128]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a1c:	6913      	ldr	r3, [r2, #16]
 8007a1e:	69a1      	ldr	r1, [r4, #24]
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6113      	str	r3, [r2, #16]
 8007a24:	e794      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a26:	4a1d      	ldr	r2, [pc, #116]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007a2e:	d1ad      	bne.n	800798c <RCCEx_PLLSAI1_Config+0x5c>
 8007a30:	2601      	movs	r6, #1
 8007a32:	e78d      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a34:	4a19      	ldr	r2, [pc, #100]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8007a3c:	d1a6      	bne.n	800798c <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a3e:	4a17      	ldr	r2, [pc, #92]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8007a46:	d1a1      	bne.n	800798c <RCCEx_PLLSAI1_Config+0x5c>
 8007a48:	2601      	movs	r6, #1
 8007a4a:	e781      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 8007a4c:	2601      	movs	r6, #1
 8007a4e:	e7a8      	b.n	80079a2 <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a50:	2d01      	cmp	r5, #1
 8007a52:	d00f      	beq.n	8007a74 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a54:	4811      	ldr	r0, [pc, #68]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a56:	6902      	ldr	r2, [r0, #16]
 8007a58:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8007a5c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8007a60:	68a1      	ldr	r1, [r4, #8]
 8007a62:	6963      	ldr	r3, [r4, #20]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	6102      	str	r2, [r0, #16]
 8007a72:	e7bd      	b.n	80079f0 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a74:	4809      	ldr	r0, [pc, #36]	@ (8007a9c <RCCEx_PLLSAI1_Config+0x16c>)
 8007a76:	6902      	ldr	r2, [r0, #16]
 8007a78:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007a7c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	3b01      	subs	r3, #1
 8007a88:	055b      	lsls	r3, r3, #21
 8007a8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	6102      	str	r2, [r0, #16]
 8007a92:	e7ad      	b.n	80079f0 <RCCEx_PLLSAI1_Config+0xc0>
      status = HAL_ERROR;
 8007a94:	2601      	movs	r6, #1
 8007a96:	e75b      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 8007a98:	2601      	movs	r6, #1
 8007a9a:	e759      	b.n	8007950 <RCCEx_PLLSAI1_Config+0x20>
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007aa6:	4b50      	ldr	r3, [pc, #320]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f013 0f03 	tst.w	r3, #3
 8007aae:	d018      	beq.n	8007ae2 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	6802      	ldr	r2, [r0, #0]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d002      	beq.n	8007ac4 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007abe:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	f000 808a 	beq.w	8007bde <RCCEx_PLLSAI2_Config+0x13e>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007aca:	4b47      	ldr	r3, [pc, #284]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	6842      	ldr	r2, [r0, #4]
       ||
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d001      	beq.n	8007ade <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8007ada:	2601      	movs	r6, #1
 8007adc:	e7f0      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8007ade:	2600      	movs	r6, #0
 8007ae0:	e018      	b.n	8007b14 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 8007ae2:	6803      	ldr	r3, [r0, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d055      	beq.n	8007b94 <RCCEx_PLLSAI2_Config+0xf4>
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d05a      	beq.n	8007ba2 <RCCEx_PLLSAI2_Config+0x102>
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d178      	bne.n	8007be2 <RCCEx_PLLSAI2_Config+0x142>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007af0:	4a3d      	ldr	r2, [pc, #244]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	f012 0f02 	tst.w	r2, #2
 8007af8:	d05f      	beq.n	8007bba <RCCEx_PLLSAI2_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007afa:	483b      	ldr	r0, [pc, #236]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007afc:	68c2      	ldr	r2, [r0, #12]
 8007afe:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8007b02:	6861      	ldr	r1, [r4, #4]
 8007b04:	3901      	subs	r1, #1
 8007b06:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60c3      	str	r3, [r0, #12]
 8007b0e:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	d1d5      	bne.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8007b14:	4a34      	ldr	r2, [pc, #208]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007b1e:	f7fe ffed 	bl	8006afc <HAL_GetTick>
 8007b22:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b24:	4b30      	ldr	r3, [pc, #192]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007b2c:	d005      	beq.n	8007b3a <RCCEx_PLLSAI2_Config+0x9a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b2e:	f7fe ffe5 	bl	8006afc <HAL_GetTick>
 8007b32:	1bc3      	subs	r3, r0, r7
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d9f5      	bls.n	8007b24 <RCCEx_PLLSAI2_Config+0x84>
        status = HAL_TIMEOUT;
 8007b38:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	d1c0      	bne.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	d13d      	bne.n	8007bbe <RCCEx_PLLSAI2_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b42:	4929      	ldr	r1, [pc, #164]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b44:	694b      	ldr	r3, [r1, #20]
 8007b46:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4e:	68a0      	ldr	r0, [r4, #8]
 8007b50:	68e2      	ldr	r2, [r4, #12]
 8007b52:	0912      	lsrs	r2, r2, #4
 8007b54:	0452      	lsls	r2, r2, #17
 8007b56:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b5e:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007b68:	f7fe ffc8 	bl	8006afc <HAL_GetTick>
 8007b6c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007b76:	d105      	bne.n	8007b84 <RCCEx_PLLSAI2_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b78:	f7fe ffc0 	bl	8006afc <HAL_GetTick>
 8007b7c:	1b40      	subs	r0, r0, r5
 8007b7e:	2802      	cmp	r0, #2
 8007b80:	d9f5      	bls.n	8007b6e <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_TIMEOUT;
 8007b82:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	d19b      	bne.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b88:	4a17      	ldr	r2, [pc, #92]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b8a:	6953      	ldr	r3, [r2, #20]
 8007b8c:	6961      	ldr	r1, [r4, #20]
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6153      	str	r3, [r2, #20]
 8007b92:	e795      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b94:	4a14      	ldr	r2, [pc, #80]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007b9c:	d1ad      	bne.n	8007afa <RCCEx_PLLSAI2_Config+0x5a>
 8007b9e:	2601      	movs	r6, #1
 8007ba0:	e78e      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ba2:	4a11      	ldr	r2, [pc, #68]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8007baa:	d1a6      	bne.n	8007afa <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bac:	4a0e      	ldr	r2, [pc, #56]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8007bb4:	d1a1      	bne.n	8007afa <RCCEx_PLLSAI2_Config+0x5a>
 8007bb6:	2601      	movs	r6, #1
 8007bb8:	e782      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
        status = HAL_ERROR;
 8007bba:	2601      	movs	r6, #1
 8007bbc:	e7a8      	b.n	8007b10 <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007bbe:	480a      	ldr	r0, [pc, #40]	@ (8007be8 <RCCEx_PLLSAI2_Config+0x148>)
 8007bc0:	6942      	ldr	r2, [r0, #20]
 8007bc2:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8007bc6:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8007bca:	68a1      	ldr	r1, [r4, #8]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	065b      	lsls	r3, r3, #25
 8007bd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	6142      	str	r2, [r0, #20]
 8007bdc:	e7bf      	b.n	8007b5e <RCCEx_PLLSAI2_Config+0xbe>
      status = HAL_ERROR;
 8007bde:	2601      	movs	r6, #1
 8007be0:	e76e      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
    switch(PllSai2->PLLSAI2Source)
 8007be2:	2601      	movs	r6, #1
 8007be4:	e76c      	b.n	8007ac0 <RCCEx_PLLSAI2_Config+0x20>
 8007be6:	bf00      	nop
 8007be8:	40021000 	.word	0x40021000

08007bec <HAL_RCCEx_PeriphCLKConfig>:
{
 8007bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007bf4:	6803      	ldr	r3, [r0, #0]
 8007bf6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007bfa:	d033      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bfc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007bfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c02:	d015      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c04:	d80c      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007c06:	b323      	cbz	r3, 8007c52 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8007c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c0c:	d105      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c0e:	2100      	movs	r1, #0
 8007c10:	3020      	adds	r0, #32
 8007c12:	f7ff ff45 	bl	8007aa0 <RCCEx_PLLSAI2_Config>
 8007c16:	4606      	mov	r6, r0
      break;
 8007c18:	e020      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c1a:	2701      	movs	r7, #1
 8007c1c:	463e      	mov	r6, r7
 8007c1e:	e023      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007c24:	d101      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8007c26:	2600      	movs	r6, #0
 8007c28:	e008      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007c2a:	2701      	movs	r7, #1
 8007c2c:	463e      	mov	r6, r7
 8007c2e:	e01b      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c30:	4a5e      	ldr	r2, [pc, #376]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c32:	68d3      	ldr	r3, [r2, #12]
 8007c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c38:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c3a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c3c:	4a5b      	ldr	r2, [pc, #364]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007c42:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007c46:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c4e:	2700      	movs	r7, #0
 8007c50:	e00a      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c52:	2100      	movs	r1, #0
 8007c54:	3004      	adds	r0, #4
 8007c56:	f7ff fe6b 	bl	8007930 <RCCEx_PLLSAI1_Config>
 8007c5a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	d0ed      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 8007c60:	4637      	mov	r7, r6
 8007c62:	e001      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c64:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c66:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8007c6e:	d030      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007c70:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8007c72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c76:	d01f      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007c78:	d80d      	bhi.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8007c7a:	b31b      	cbz	r3, 8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8007c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c80:	d106      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c82:	2100      	movs	r1, #0
 8007c84:	f104 0020 	add.w	r0, r4, #32
 8007c88:	f7ff ff0a 	bl	8007aa0 <RCCEx_PLLSAI2_Config>
 8007c8c:	4606      	mov	r6, r0
      break;
 8007c8e:	e005      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007c90:	2701      	movs	r7, #1
 8007c92:	463e      	mov	r6, r7
 8007c94:	e01d      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8007c96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c9a:	d10a      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8007c9c:	b9c6      	cbnz	r6, 8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c9e:	4a43      	ldr	r2, [pc, #268]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ca0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007ca4:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8007ca8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8007caa:	430b      	orrs	r3, r1
 8007cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8007cb0:	e00f      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007cb2:	2701      	movs	r7, #1
 8007cb4:	463e      	mov	r6, r7
 8007cb6:	e00c      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007cba:	68d3      	ldr	r3, [r2, #12]
 8007cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cc0:	60d3      	str	r3, [r2, #12]
      break;
 8007cc2:	e7eb      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	1d20      	adds	r0, r4, #4
 8007cc8:	f7ff fe32 	bl	8007930 <RCCEx_PLLSAI1_Config>
 8007ccc:	4606      	mov	r6, r0
      break;
 8007cce:	e7e5      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      status = ret;
 8007cd0:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007cd8:	d071      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cda:	4b34      	ldr	r3, [pc, #208]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cde:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007ce2:	d14e      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ce4:	4b31      	ldr	r3, [pc, #196]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ce6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007ce8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007cec:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007cf8:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007cfe:	6813      	ldr	r3, [r2, #0]
 8007d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d04:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007d06:	f7fe fef9 	bl	8006afc <HAL_GetTick>
 8007d0a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d0c:	4b28      	ldr	r3, [pc, #160]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007d14:	d105      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d16:	f7fe fef1 	bl	8006afc <HAL_GetTick>
 8007d1a:	1b40      	subs	r0, r0, r5
 8007d1c:	2802      	cmp	r0, #2
 8007d1e:	d9f5      	bls.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8007d20:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d146      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d26:	4b21      	ldr	r3, [pc, #132]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d2c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007d30:	d019      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007d32:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d012      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d3c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d44:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8007d48:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007d4c:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d50:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8007d54:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8007d58:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8007d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d60:	f013 0f01 	tst.w	r3, #1
 8007d64:	d110      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	f040 8127 	bne.w	8007fba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d76:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d80:	e019      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	e7b9      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8007d88:	f7fe feb8 	bl	8006afc <HAL_GetTick>
 8007d8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d8e:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d94:	f013 0f02 	tst.w	r3, #2
 8007d98:	d1e5      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d9a:	f7fe feaf 	bl	8006afc <HAL_GetTick>
 8007d9e:	1b40      	subs	r0, r0, r5
 8007da0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007da4:	4298      	cmp	r0, r3
 8007da6:	d9f2      	bls.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8007da8:	2603      	movs	r6, #3
 8007daa:	e7dc      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007dac:	40021000 	.word	0x40021000
 8007db0:	40007000 	.word	0x40007000
      status = ret;
 8007db4:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8007db6:	f1b8 0f00 	cmp.w	r8, #0
 8007dba:	f040 8100 	bne.w	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	f013 0f01 	tst.w	r3, #1
 8007dc4:	d008      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dc6:	4a9d      	ldr	r2, [pc, #628]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007dc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007dcc:	f023 0303 	bic.w	r3, r3, #3
 8007dd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	f013 0f02 	tst.w	r3, #2
 8007dde:	d008      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007de0:	4a96      	ldr	r2, [pc, #600]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007de2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007de6:	f023 030c 	bic.w	r3, r3, #12
 8007dea:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007dec:	430b      	orrs	r3, r1
 8007dee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	f013 0f04 	tst.w	r3, #4
 8007df8:	d008      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dfa:	4a90      	ldr	r2, [pc, #576]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007dfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e00:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007e04:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	f013 0f08 	tst.w	r3, #8
 8007e12:	d008      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e14:	4a89      	ldr	r2, [pc, #548]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e16:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e1e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e20:	430b      	orrs	r3, r1
 8007e22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f013 0f10 	tst.w	r3, #16
 8007e2c:	d008      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e2e:	4a83      	ldr	r2, [pc, #524]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e30:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e38:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	f013 0f20 	tst.w	r3, #32
 8007e46:	d008      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e48:	4a7c      	ldr	r2, [pc, #496]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e4e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007e52:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007e54:	430b      	orrs	r3, r1
 8007e56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007e60:	d008      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e62:	4a76      	ldr	r2, [pc, #472]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e64:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e68:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8007e6c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e82:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e86:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e94:	d008      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e96:	4a69      	ldr	r2, [pc, #420]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e98:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007e9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007ea0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007eae:	d008      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eb0:	4a62      	ldr	r2, [pc, #392]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007eb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007eb6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007eba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007ec8:	d008      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007eca:	4a5c      	ldr	r2, [pc, #368]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ecc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007ed0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007ed4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007ee2:	d00f      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ee4:	4a55      	ldr	r2, [pc, #340]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ee6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007eea:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007eee:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ef6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007efc:	d065      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f02:	d067      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8007f0a:	d00f      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f12:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007f16:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f1e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8007f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f24:	d05e      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f2a:	d060      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007f32:	d00f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f34:	4a41      	ldr	r2, [pc, #260]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f3a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8007f3e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8007f40:	430b      	orrs	r3, r1
 8007f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f46:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f4c:	d057      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f52:	d059      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007f5a:	d00f      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f5c:	4a37      	ldr	r2, [pc, #220]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f62:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007f66:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f6e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f74:	d050      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f7a:	d055      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007f82:	d008      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f84:	4a2d      	ldr	r2, [pc, #180]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f86:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f8e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8007f90:	430b      	orrs	r3, r1
 8007f92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007f9c:	d009      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f9e:	4a27      	ldr	r2, [pc, #156]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fa0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007fa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fa8:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007fac:	430b      	orrs	r3, r1
 8007fae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	b002      	add	sp, #8
 8007fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8007fba:	4637      	mov	r7, r6
 8007fbc:	e6fb      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fc0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fc8:	e6f9      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fca:	68d3      	ldr	r3, [r2, #12]
 8007fcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fd0:	60d3      	str	r3, [r2, #12]
 8007fd2:	e797      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	1d20      	adds	r0, r4, #4
 8007fd8:	f7ff fcaa 	bl	8007930 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d091      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	e78f      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fe4:	68d3      	ldr	r3, [r2, #12]
 8007fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fea:	60d3      	str	r3, [r2, #12]
 8007fec:	e79e      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fee:	2101      	movs	r1, #1
 8007ff0:	1d20      	adds	r0, r4, #4
 8007ff2:	f7ff fc9d 	bl	8007930 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d098      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	e796      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ffe:	68d3      	ldr	r3, [r2, #12]
 8008000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008004:	60d3      	str	r3, [r2, #12]
 8008006:	e7a5      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008008:	2101      	movs	r1, #1
 800800a:	1d20      	adds	r0, r4, #4
 800800c:	f7ff fc90 	bl	8007930 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008010:	2800      	cmp	r0, #0
 8008012:	d09f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8008014:	4607      	mov	r7, r0
 8008016:	e79d      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008018:	2102      	movs	r1, #2
 800801a:	1d20      	adds	r0, r4, #4
 800801c:	f7ff fc88 	bl	8007930 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008020:	2800      	cmp	r0, #0
 8008022:	d0ab      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008024:	4607      	mov	r7, r0
 8008026:	e7a9      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008028:	2102      	movs	r1, #2
 800802a:	f104 0020 	add.w	r0, r4, #32
 800802e:	f7ff fd37 	bl	8007aa0 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8008032:	2800      	cmp	r0, #0
 8008034:	d0a2      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008036:	4607      	mov	r7, r0
 8008038:	e7a0      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800803a:	bf00      	nop
 800803c:	40021000 	.word	0x40021000

08008040 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <HAL_RCCEx_DisableLSECSS+0x18>)
 8008042:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008046:	f022 0220 	bic.w	r2, r2, #32
 800804a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008054:	619a      	str	r2, [r3, #24]
}
 8008056:	4770      	bx	lr
 8008058:	40021000 	.word	0x40021000

0800805c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800805c:	4a02      	ldr	r2, [pc, #8]	@ (8008068 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	f043 0304 	orr.w	r3, r3, #4
 8008064:	6013      	str	r3, [r2, #0]
}
 8008066:	4770      	bx	lr
 8008068:	40021000 	.word	0x40021000

0800806c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	4605      	mov	r5, r0
 8008074:	4688      	mov	r8, r1
 8008076:	4617      	mov	r7, r2
 8008078:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800807a:	f7fe fd3f 	bl	8006afc <HAL_GetTick>
 800807e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008080:	1a1b      	subs	r3, r3, r0
 8008082:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8008086:	f7fe fd39 	bl	8006afc <HAL_GetTick>
 800808a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800808c:	4b28      	ldr	r3, [pc, #160]	@ (8008130 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008094:	fb09 f303 	mul.w	r3, r9, r3
 8008098:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	689c      	ldr	r4, [r3, #8]
 800809e:	ea38 0404 	bics.w	r4, r8, r4
 80080a2:	bf0c      	ite	eq
 80080a4:	2301      	moveq	r3, #1
 80080a6:	2300      	movne	r3, #0
 80080a8:	42bb      	cmp	r3, r7
 80080aa:	d03d      	beq.n	8008128 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80080b0:	d0f3      	beq.n	800809a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080b2:	f7fe fd23 	bl	8006afc <HAL_GetTick>
 80080b6:	eba0 000a 	sub.w	r0, r0, sl
 80080ba:	4548      	cmp	r0, r9
 80080bc:	d207      	bcs.n	80080ce <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80080be:	9a01      	ldr	r2, [sp, #4]
 80080c0:	b102      	cbz	r2, 80080c4 <SPI_WaitFlagStateUntilTimeout+0x58>
 80080c2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	4691      	mov	r9, r2
 80080cc:	e7e5      	b.n	800809a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080ce:	682a      	ldr	r2, [r5, #0]
 80080d0:	6853      	ldr	r3, [r2, #4]
 80080d2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80080d6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d8:	686b      	ldr	r3, [r5, #4]
 80080da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080de:	d00b      	beq.n	80080f8 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80080e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e6:	d014      	beq.n	8008112 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80080ee:	2300      	movs	r3, #0
 80080f0:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80080f4:	2003      	movs	r0, #3
 80080f6:	e018      	b.n	800812a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f8:	68ab      	ldr	r3, [r5, #8]
 80080fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080fe:	d002      	beq.n	8008106 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d1ec      	bne.n	80080e0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8008106:	682a      	ldr	r2, [r5, #0]
 8008108:	6813      	ldr	r3, [r2, #0]
 800810a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	e7e6      	b.n	80080e0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8008112:	682a      	ldr	r2, [r5, #0]
 8008114:	6813      	ldr	r3, [r2, #0]
 8008116:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	682a      	ldr	r2, [r5, #0]
 800811e:	6813      	ldr	r3, [r2, #0]
 8008120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e7df      	b.n	80080e8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8008128:	2000      	movs	r0, #0
}
 800812a:	b002      	add	sp, #8
 800812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008130:	20000020 	.word	0x20000020

08008134 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	4607      	mov	r7, r0
 800813c:	460d      	mov	r5, r1
 800813e:	4616      	mov	r6, r2
 8008140:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008142:	f7fe fcdb 	bl	8006afc <HAL_GetTick>
 8008146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008148:	1a1b      	subs	r3, r3, r0
 800814a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800814e:	f7fe fcd5 	bl	8006afc <HAL_GetTick>
 8008152:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008154:	4b2e      	ldr	r3, [pc, #184]	@ (8008210 <SPI_WaitFifoStateUntilTimeout+0xdc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800815c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008160:	0d1b      	lsrs	r3, r3, #20
 8008162:	fb09 f303 	mul.w	r3, r9, r3
 8008166:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 8008168:	e002      	b.n	8008170 <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 800816a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800816e:	d10f      	bne.n	8008190 <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689c      	ldr	r4, [r3, #8]
 8008174:	ea04 0c05 	and.w	ip, r4, r5
 8008178:	45b4      	cmp	ip, r6
 800817a:	d044      	beq.n	8008206 <SPI_WaitFifoStateUntilTimeout+0xd2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800817c:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 8008180:	d1f3      	bne.n	800816a <SPI_WaitFifoStateUntilTimeout+0x36>
 8008182:	2e00      	cmp	r6, #0
 8008184:	d1f1      	bne.n	800816a <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008186:	7b1b      	ldrb	r3, [r3, #12]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	e7ec      	b.n	800816a <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008190:	f7fe fcb4 	bl	8006afc <HAL_GetTick>
 8008194:	eba0 000a 	sub.w	r0, r0, sl
 8008198:	4548      	cmp	r0, r9
 800819a:	d207      	bcs.n	80081ac <SPI_WaitFifoStateUntilTimeout+0x78>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800819c:	9a00      	ldr	r2, [sp, #0]
 800819e:	b102      	cbz	r2, 80081a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80081a0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 80081a2:	9b00      	ldr	r3, [sp, #0]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4691      	mov	r9, r2
 80081aa:	e7e1      	b.n	8008170 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	6853      	ldr	r3, [r2, #4]
 80081b0:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80081b4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081bc:	d00b      	beq.n	80081d6 <SPI_WaitFifoStateUntilTimeout+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c4:	d014      	beq.n	80081f0 <SPI_WaitFifoStateUntilTimeout+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80081d2:	2003      	movs	r0, #3
 80081d4:	e018      	b.n	8008208 <SPI_WaitFifoStateUntilTimeout+0xd4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081dc:	d002      	beq.n	80081e4 <SPI_WaitFifoStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e2:	d1ec      	bne.n	80081be <SPI_WaitFifoStateUntilTimeout+0x8a>
          __HAL_SPI_DISABLE(hspi);
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e7e6      	b.n	80081be <SPI_WaitFifoStateUntilTimeout+0x8a>
          SPI_RESET_CRC(hspi);
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e7df      	b.n	80081c6 <SPI_WaitFifoStateUntilTimeout+0x92>
    }
  }

  return HAL_OK;
 8008206:	2000      	movs	r0, #0
}
 8008208:	b002      	add	sp, #8
 800820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820e:	bf00      	nop
 8008210:	20000020 	.word	0x20000020

08008214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800821e:	9200      	str	r2, [sp, #0]
 8008220:	460b      	mov	r3, r1
 8008222:	2200      	movs	r2, #0
 8008224:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008228:	f7ff ff84 	bl	8008134 <SPI_WaitFifoStateUntilTimeout>
 800822c:	b9b0      	cbnz	r0, 800825c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800822e:	9600      	str	r6, [sp, #0]
 8008230:	462b      	mov	r3, r5
 8008232:	2200      	movs	r2, #0
 8008234:	2180      	movs	r1, #128	@ 0x80
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff ff18 	bl	800806c <SPI_WaitFlagStateUntilTimeout>
 800823c:	b9a8      	cbnz	r0, 800826a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800823e:	9600      	str	r6, [sp, #0]
 8008240:	462b      	mov	r3, r5
 8008242:	2200      	movs	r2, #0
 8008244:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008248:	4620      	mov	r0, r4
 800824a:	f7ff ff73 	bl	8008134 <SPI_WaitFifoStateUntilTimeout>
 800824e:	b150      	cbz	r0, 8008266 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008250:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008252:	f043 0320 	orr.w	r3, r3, #32
 8008256:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008258:	2003      	movs	r0, #3
 800825a:	e004      	b.n	8008266 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800825e:	f043 0320 	orr.w	r3, r3, #32
 8008262:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008264:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008266:	b002      	add	sp, #8
 8008268:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008272:	2003      	movs	r0, #3
 8008274:	e7f7      	b.n	8008266 <SPI_EndRxTxTransaction+0x52>

08008276 <HAL_SPI_MspInit>:
}
 8008276:	4770      	bx	lr

08008278 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008278:	2800      	cmp	r0, #0
 800827a:	f000 8089 	beq.w	8008390 <HAL_SPI_Init+0x118>
{
 800827e:	b510      	push	{r4, lr}
 8008280:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008282:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008284:	b933      	cbnz	r3, 8008294 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008286:	6843      	ldr	r3, [r0, #4]
 8008288:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800828c:	d005      	beq.n	800829a <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800828e:	2300      	movs	r3, #0
 8008290:	61c3      	str	r3, [r0, #28]
 8008292:	e002      	b.n	800829a <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008294:	2300      	movs	r3, #0
 8008296:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008298:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800829a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d055      	beq.n	800834e <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80082a2:	2302      	movs	r3, #2
 80082a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082b8:	d94f      	bls.n	800835a <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082ba:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082bc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80082c0:	d004      	beq.n	80082cc <HAL_SPI_Init+0x54>
 80082c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082c6:	d001      	beq.n	80082cc <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80082d2:	68a1      	ldr	r1, [r4, #8]
 80082d4:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 80082d8:	430b      	orrs	r3, r1
 80082da:	6921      	ldr	r1, [r4, #16]
 80082dc:	f001 0102 	and.w	r1, r1, #2
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6961      	ldr	r1, [r4, #20]
 80082e4:	f001 0101 	and.w	r1, r1, #1
 80082e8:	430b      	orrs	r3, r1
 80082ea:	69a1      	ldr	r1, [r4, #24]
 80082ec:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 80082f0:	430b      	orrs	r3, r1
 80082f2:	69e1      	ldr	r1, [r4, #28]
 80082f4:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6a21      	ldr	r1, [r4, #32]
 80082fc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8008300:	430b      	orrs	r3, r1
 8008302:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008304:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	430b      	orrs	r3, r1
 800830c:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800830e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008314:	d024      	beq.n	8008360 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008316:	8b63      	ldrh	r3, [r4, #26]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800831e:	f001 0110 	and.w	r1, r1, #16
 8008322:	430b      	orrs	r3, r1
 8008324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008326:	f001 0108 	and.w	r1, r1, #8
 800832a:	430b      	orrs	r3, r1
 800832c:	68e1      	ldr	r1, [r4, #12]
 800832e:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8008332:	430b      	orrs	r3, r1
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	604b      	str	r3, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800833a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800833c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008340:	d022      	beq.n	8008388 <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008342:	2000      	movs	r0, #0
 8008344:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008346:	2301      	movs	r3, #1
 8008348:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800834c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800834e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff ff8f 	bl	8008276 <HAL_SPI_MspInit>
 8008358:	e7a3      	b.n	80082a2 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800835a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800835e:	e7ad      	b.n	80082bc <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008360:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008362:	b92b      	cbnz	r3, 8008370 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008364:	68e3      	ldr	r3, [r4, #12]
 8008366:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800836a:	d90a      	bls.n	8008382 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800836c:	2302      	movs	r3, #2
 800836e:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008370:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008372:	2b02      	cmp	r3, #2
 8008374:	d1cf      	bne.n	8008316 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008376:	6821      	ldr	r1, [r4, #0]
 8008378:	680b      	ldr	r3, [r1, #0]
 800837a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800837e:	600b      	str	r3, [r1, #0]
 8008380:	e7c9      	b.n	8008316 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008382:	2301      	movs	r3, #1
 8008384:	6323      	str	r3, [r4, #48]	@ 0x30
 8008386:	e7f3      	b.n	8008370 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800838c:	611a      	str	r2, [r3, #16]
 800838e:	e7d8      	b.n	8008342 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8008390:	2001      	movs	r0, #1
}
 8008392:	4770      	bx	lr

08008394 <HAL_SPI_Transmit>:
{
 8008394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008398:	b083      	sub	sp, #12
 800839a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800839c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	f000 810f 	beq.w	80085c4 <HAL_SPI_Transmit+0x230>
 80083a6:	4604      	mov	r4, r0
 80083a8:	4688      	mov	r8, r1
 80083aa:	4691      	mov	r9, r2
 80083ac:	2301      	movs	r3, #1
 80083ae:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80083b2:	f7fe fba3 	bl	8006afc <HAL_GetTick>
 80083b6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80083b8:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 80083bc:	b2f6      	uxtb	r6, r6
 80083be:	2e01      	cmp	r6, #1
 80083c0:	f040 80ed 	bne.w	800859e <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	f000 80ea 	beq.w	80085a0 <HAL_SPI_Transmit+0x20c>
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	f000 80e6 	beq.w	80085a0 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083d4:	2303      	movs	r3, #3
 80083d6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
 80083dc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083de:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80083e2:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80083e6:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083ea:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80083ec:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80083f0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80083f4:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80083f6:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083f8:	68a3      	ldr	r3, [r4, #8]
 80083fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083fe:	d022      	beq.n	8008446 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008400:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008406:	d029      	beq.n	800845c <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008410:	d103      	bne.n	800841a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008418:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008420:	d94d      	bls.n	80084be <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	b113      	cbz	r3, 800842c <HAL_SPI_Transmit+0x98>
 8008426:	f1b9 0f01 	cmp.w	r9, #1
 800842a:	d12e      	bne.n	800848a <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800842c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008434:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008436:	3302      	adds	r3, #2
 8008438:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800843a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29b      	uxth	r3, r3
 8008442:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8008444:	e021      	b.n	800848a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	6813      	ldr	r3, [r2, #0]
 800844a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e7d1      	b.n	8008400 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e7ca      	b.n	8008408 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008472:	f7fe fb43 	bl	8006afc <HAL_GetTick>
 8008476:	1bc0      	subs	r0, r0, r7
 8008478:	42a8      	cmp	r0, r5
 800847a:	d303      	bcc.n	8008484 <HAL_SPI_Transmit+0xf0>
 800847c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008480:	f040 8098 	bne.w	80085b4 <HAL_SPI_Transmit+0x220>
 8008484:	2d00      	cmp	r5, #0
 8008486:	f000 8097 	beq.w	80085b8 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 800848a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d066      	beq.n	8008560 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	f012 0f02 	tst.w	r2, #2
 800849a:	d0ea      	beq.n	8008472 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800849e:	8812      	ldrh	r2, [r2, #0]
 80084a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084a4:	3302      	adds	r3, #2
 80084a6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80084a8:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 80084ac:	fa1f fc8c 	uxth.w	ip, ip
 80084b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084b4:	fa1f fc8c 	uxth.w	ip, ip
 80084b8:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80084bc:	e7e5      	b.n	800848a <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	b113      	cbz	r3, 80084c8 <HAL_SPI_Transmit+0x134>
 80084c2:	f1b9 0f01 	cmp.w	r9, #1
 80084c6:	d133      	bne.n	8008530 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 80084c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d90c      	bls.n	80084ea <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	8812      	ldrh	r2, [r2, #0]
 80084d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084da:	3302      	adds	r3, #2
 80084dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80084de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b02      	subs	r3, #2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80084e8:	e022      	b.n	8008530 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084ea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80084f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084f4:	3301      	adds	r3, #1
 80084f6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80084f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29b      	uxth	r3, r3
 8008500:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8008502:	e015      	b.n	8008530 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800850a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800850c:	3301      	adds	r3, #1
 800850e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8008510:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29b      	uxth	r3, r3
 8008518:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800851a:	e009      	b.n	8008530 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800851c:	f7fe faee 	bl	8006afc <HAL_GetTick>
 8008520:	1bc0      	subs	r0, r0, r7
 8008522:	42a8      	cmp	r0, r5
 8008524:	d302      	bcc.n	800852c <HAL_SPI_Transmit+0x198>
 8008526:	f1b5 3fff 	cmp.w	r5, #4294967295
 800852a:	d147      	bne.n	80085bc <HAL_SPI_Transmit+0x228>
 800852c:	2d00      	cmp	r5, #0
 800852e:	d047      	beq.n	80085c0 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 8008530:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	b1a3      	cbz	r3, 8008560 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	6893      	ldr	r3, [r2, #8]
 800853a:	f013 0f02 	tst.w	r3, #2
 800853e:	d0ed      	beq.n	800851c <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 8008540:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	d9dd      	bls.n	8008504 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008548:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800854e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008550:	3302      	adds	r3, #2
 8008552:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008554:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008556:	b29b      	uxth	r3, r3
 8008558:	3b02      	subs	r3, #2
 800855a:	b29b      	uxth	r3, r3
 800855c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800855e:	e7e7      	b.n	8008530 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008560:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008566:	d014      	beq.n	8008592 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008568:	463a      	mov	r2, r7
 800856a:	4629      	mov	r1, r5
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff fe51 	bl	8008214 <SPI_EndRxTxTransaction>
 8008572:	b108      	cbz	r0, 8008578 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008574:	2320      	movs	r3, #32
 8008576:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	b933      	cbnz	r3, 800858a <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	9201      	str	r2, [sp, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800858a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800858c:	b943      	cbnz	r3, 80085a0 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800858e:	2600      	movs	r6, #0
 8008590:	e006      	b.n	80085a0 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	6813      	ldr	r3, [r2, #0]
 8008596:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e7e4      	b.n	8008568 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800859e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80085a6:	2300      	movs	r3, #0
 80085a8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80085ac:	4630      	mov	r0, r6
 80085ae:	b003      	add	sp, #12
 80085b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80085b4:	2603      	movs	r6, #3
 80085b6:	e7f3      	b.n	80085a0 <HAL_SPI_Transmit+0x20c>
 80085b8:	2603      	movs	r6, #3
 80085ba:	e7f1      	b.n	80085a0 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 80085bc:	2603      	movs	r6, #3
 80085be:	e7ef      	b.n	80085a0 <HAL_SPI_Transmit+0x20c>
 80085c0:	2603      	movs	r6, #3
 80085c2:	e7ed      	b.n	80085a0 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 80085c4:	2602      	movs	r6, #2
 80085c6:	e7f1      	b.n	80085ac <HAL_SPI_Transmit+0x218>

080085c8 <HAL_SPI_TransmitReceive>:
{
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b085      	sub	sp, #20
 80085ce:	461f      	mov	r7, r3
 80085d0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 80085d6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	f000 81f7 	beq.w	80089ce <HAL_SPI_TransmitReceive+0x406>
 80085e0:	4604      	mov	r4, r0
 80085e2:	468a      	mov	sl, r1
 80085e4:	4693      	mov	fp, r2
 80085e6:	2301      	movs	r3, #1
 80085e8:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80085ec:	f7fe fa86 	bl	8006afc <HAL_GetTick>
 80085f0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80085f2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80085f6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80085f8:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8008600:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008604:	2b01      	cmp	r3, #1
 8008606:	d00a      	beq.n	800861e <HAL_SPI_TransmitReceive+0x56>
 8008608:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 800860c:	f040 81c4 	bne.w	8008998 <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008610:	68a1      	ldr	r1, [r4, #8]
 8008612:	2900      	cmp	r1, #0
 8008614:	f040 81cb 	bne.w	80089ae <HAL_SPI_TransmitReceive+0x3e6>
 8008618:	2b04      	cmp	r3, #4
 800861a:	f040 81ca 	bne.w	80089b2 <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800861e:	f1ba 0f00 	cmp.w	sl, #0
 8008622:	f000 81c8 	beq.w	80089b6 <HAL_SPI_TransmitReceive+0x3ee>
 8008626:	f1bb 0f00 	cmp.w	fp, #0
 800862a:	f000 81c6 	beq.w	80089ba <HAL_SPI_TransmitReceive+0x3f2>
 800862e:	2f00      	cmp	r7, #0
 8008630:	f000 81c5 	beq.w	80089be <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008634:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b04      	cmp	r3, #4
 800863c:	d002      	beq.n	8008644 <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800863e:	2305      	movs	r3, #5
 8008640:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008644:	2300      	movs	r3, #0
 8008646:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008648:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800864c:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008650:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008654:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008658:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800865a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 800865c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800865e:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008660:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008666:	d029      	beq.n	80086bc <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008668:	68e3      	ldr	r3, [r4, #12]
 800866a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800866e:	d801      	bhi.n	8008674 <HAL_SPI_TransmitReceive+0xac>
 8008670:	2f01      	cmp	r7, #1
 8008672:	d92d      	bls.n	80086d0 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	6853      	ldr	r3, [r2, #4]
 8008678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800867c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008686:	d103      	bne.n	8008690 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800868e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008690:	68e3      	ldr	r3, [r4, #12]
 8008692:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008696:	d97d      	bls.n	8008794 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	b10b      	cbz	r3, 80086a0 <HAL_SPI_TransmitReceive+0xd8>
 800869c:	2f01      	cmp	r7, #1
 800869e:	d10b      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	8812      	ldrh	r2, [r2, #0]
 80086a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086aa:	3302      	adds	r3, #2
 80086ac:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80086ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	3b01      	subs	r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80086b8:	2701      	movs	r7, #1
 80086ba:	e042      	b.n	8008742 <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 80086bc:	6813      	ldr	r3, [r2, #0]
 80086be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e7cb      	b.n	8008668 <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	6853      	ldr	r3, [r2, #4]
 80086d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	e7d0      	b.n	800867e <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80086dc:	f018 0f04 	tst.w	r8, #4
 80086e0:	d107      	bne.n	80086f2 <HAL_SPI_TransmitReceive+0x12a>
 80086e2:	f019 0f08 	tst.w	r9, #8
 80086e6:	d004      	beq.n	80086f2 <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086f0:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	6813      	ldr	r3, [r2, #0]
 80086f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80086fa:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80086fc:	2700      	movs	r7, #0
 80086fe:	e000      	b.n	8008702 <HAL_SPI_TransmitReceive+0x13a>
 8008700:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	f012 0f01 	tst.w	r2, #1
 800870a:	d011      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x168>
 800870c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8008710:	b292      	uxth	r2, r2
 8008712:	b16a      	cbz	r2, 8008730 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800871a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800871c:	3302      	adds	r3, #2
 800871e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8008720:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29b      	uxth	r3, r3
 800872a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800872e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008730:	f7fe f9e4 	bl	8006afc <HAL_GetTick>
 8008734:	1b80      	subs	r0, r0, r6
 8008736:	42a8      	cmp	r0, r5
 8008738:	d303      	bcc.n	8008742 <HAL_SPI_TransmitReceive+0x17a>
 800873a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800873e:	f040 8140 	bne.w	80089c2 <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008742:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008744:	b29b      	uxth	r3, r3
 8008746:	b92b      	cbnz	r3, 8008754 <HAL_SPI_TransmitReceive+0x18c>
 8008748:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 80d1 	beq.w	80088f6 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	f012 0f02 	tst.w	r2, #2
 800875c:	d0d1      	beq.n	8008702 <HAL_SPI_TransmitReceive+0x13a>
 800875e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8008760:	b292      	uxth	r2, r2
 8008762:	2a00      	cmp	r2, #0
 8008764:	d0cd      	beq.n	8008702 <HAL_SPI_TransmitReceive+0x13a>
 8008766:	2f00      	cmp	r7, #0
 8008768:	d0cb      	beq.n	8008702 <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800876a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800876c:	8812      	ldrh	r2, [r2, #0]
 800876e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008770:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008772:	3302      	adds	r3, #2
 8008774:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8008776:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008780:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1bb      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x138>
 8008788:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800878e:	d0a5      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8008790:	2700      	movs	r7, #0
 8008792:	e7b6      	b.n	8008702 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	b10b      	cbz	r3, 800879c <HAL_SPI_TransmitReceive+0x1d4>
 8008798:	2f01      	cmp	r7, #1
 800879a:	d10f      	bne.n	80087bc <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800879c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d90d      	bls.n	80087c0 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	8812      	ldrh	r2, [r2, #0]
 80087aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087ae:	3302      	adds	r3, #2
 80087b0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80087b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b02      	subs	r3, #2
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80087bc:	2701      	movs	r7, #1
 80087be:	e065      	b.n	800888c <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80087c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087ca:	3301      	adds	r3, #1
 80087cc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80087ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80087d8:	e7f0      	b.n	80087bc <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 80087da:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80087dc:	b292      	uxth	r2, r2
 80087de:	2a01      	cmp	r2, #1
 80087e0:	d913      	bls.n	800880a <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80087e4:	8812      	ldrh	r2, [r2, #0]
 80087e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087ea:	3302      	adds	r3, #2
 80087ec:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80087ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b02      	subs	r3, #2
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80087f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	bb1b      	cbnz	r3, 8008846 <HAL_SPI_TransmitReceive+0x27e>
 80087fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008804:	d00d      	beq.n	8008822 <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 8008806:	2700      	movs	r7, #0
 8008808:	e052      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800880a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8008810:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008812:	3301      	adds	r3, #1
 8008814:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8008816:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8008820:	e7ea      	b.n	80087f8 <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008822:	f018 0f04 	tst.w	r8, #4
 8008826:	d107      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x270>
 8008828:	f019 0f08 	tst.w	r9, #8
 800882c:	d004      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800882e:	6822      	ldr	r2, [r4, #0]
 8008830:	6813      	ldr	r3, [r2, #0]
 8008832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008836:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008840:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8008842:	2700      	movs	r7, #0
 8008844:	e034      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x2e8>
 8008846:	2700      	movs	r7, #0
 8008848:	e032      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	6853      	ldr	r3, [r2, #4]
 800884e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008852:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8008854:	2701      	movs	r7, #1
 8008856:	e00d      	b.n	8008874 <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008858:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800885a:	7b1b      	ldrb	r3, [r3, #12]
 800885c:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800885e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008860:	3301      	adds	r3, #1
 8008862:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8008864:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	b29b      	uxth	r3, r3
 800886e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8008872:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008874:	f7fe f942 	bl	8006afc <HAL_GetTick>
 8008878:	1b80      	subs	r0, r0, r6
 800887a:	42a8      	cmp	r0, r5
 800887c:	d303      	bcc.n	8008886 <HAL_SPI_TransmitReceive+0x2be>
 800887e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008882:	f040 80a0 	bne.w	80089c6 <HAL_SPI_TransmitReceive+0x3fe>
 8008886:	2d00      	cmp	r5, #0
 8008888:	f000 809f 	beq.w	80089ca <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800888c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	b923      	cbnz	r3, 800889c <HAL_SPI_TransmitReceive+0x2d4>
 8008892:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d02c      	beq.n	80088f6 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	f012 0f02 	tst.w	r2, #2
 80088a4:	d004      	beq.n	80088b0 <HAL_SPI_TransmitReceive+0x2e8>
 80088a6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80088a8:	b292      	uxth	r2, r2
 80088aa:	b10a      	cbz	r2, 80088b0 <HAL_SPI_TransmitReceive+0x2e8>
 80088ac:	2f00      	cmp	r7, #0
 80088ae:	d194      	bne.n	80087da <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	f012 0f01 	tst.w	r2, #1
 80088b8:	d0dc      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x2ac>
 80088ba:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80088be:	b292      	uxth	r2, r2
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	d0d7      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 80088c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80088c8:	b292      	uxth	r2, r2
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	d9c4      	bls.n	8008858 <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088d6:	3302      	adds	r3, #2
 80088d8:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80088da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80088de:	b29b      	uxth	r3, r3
 80088e0:	3b02      	subs	r3, #2
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80088e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d9ab      	bls.n	800884a <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 80088f2:	2701      	movs	r7, #1
 80088f4:	e7be      	b.n	8008874 <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fc:	d017      	beq.n	800892e <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	f012 0f10 	tst.w	r2, #16
 8008906:	d045      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008908:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800890a:	f042 0202 	orr.w	r2, r2, #2
 800890e:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008910:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008914:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8008916:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008918:	4632      	mov	r2, r6
 800891a:	4629      	mov	r1, r5
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff fc79 	bl	8008214 <SPI_EndRxTxTransaction>
 8008922:	2800      	cmp	r0, #0
 8008924:	d039      	beq.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008926:	2320      	movs	r3, #32
 8008928:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800892a:	2701      	movs	r7, #1
 800892c:	e035      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800892e:	9600      	str	r6, [sp, #0]
 8008930:	462b      	mov	r3, r5
 8008932:	2201      	movs	r2, #1
 8008934:	4611      	mov	r1, r2
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff fb98 	bl	800806c <SPI_WaitFlagStateUntilTimeout>
 800893c:	b9c8      	cbnz	r0, 8008972 <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008944:	d01b      	beq.n	800897e <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	7b1b      	ldrb	r3, [r3, #12]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800894e:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008950:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008952:	2b02      	cmp	r3, #2
 8008954:	d1d3      	bne.n	80088fe <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008956:	9600      	str	r6, [sp, #0]
 8008958:	462b      	mov	r3, r5
 800895a:	2201      	movs	r2, #1
 800895c:	4611      	mov	r1, r2
 800895e:	4620      	mov	r0, r4
 8008960:	f7ff fb84 	bl	800806c <SPI_WaitFlagStateUntilTimeout>
 8008964:	b980      	cbnz	r0, 8008988 <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	7b1b      	ldrb	r3, [r3, #12]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	e7c5      	b.n	80088fe <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008972:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008974:	f043 0302 	orr.w	r3, r3, #2
 8008978:	6623      	str	r3, [r4, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 800897a:	2703      	movs	r7, #3
      goto error;
 800897c:	e00d      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	e7ba      	b.n	80088fe <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008988:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800898a:	f043 0302 	orr.w	r3, r3, #2
 800898e:	6623      	str	r3, [r4, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8008990:	2703      	movs	r7, #3
          goto error;
 8008992:	e002      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008994:	2700      	movs	r7, #0
 8008996:	e7bf      	b.n	8008918 <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 8008998:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800899a:	2301      	movs	r3, #1
 800899c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80089a0:	2300      	movs	r3, #0
 80089a2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80089a6:	4638      	mov	r0, r7
 80089a8:	b005      	add	sp, #20
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 80089ae:	2702      	movs	r7, #2
 80089b0:	e7f3      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
 80089b2:	2702      	movs	r7, #2
 80089b4:	e7f1      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 80089b6:	2701      	movs	r7, #1
 80089b8:	e7ef      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
 80089ba:	2701      	movs	r7, #1
 80089bc:	e7ed      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
 80089be:	2701      	movs	r7, #1
 80089c0:	e7eb      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 80089c2:	2703      	movs	r7, #3
 80089c4:	e7e9      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 80089c6:	2703      	movs	r7, #3
 80089c8:	e7e7      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
 80089ca:	2703      	movs	r7, #3
 80089cc:	e7e5      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 80089ce:	2702      	movs	r7, #2
 80089d0:	e7e9      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x3de>

080089d2 <HAL_SPI_GetState>:
  return hspi->State;
 80089d2:	f890 005d 	ldrb.w	r0, [r0, #93]	@ 0x5d
}
 80089d6:	4770      	bx	lr

080089d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089da:	6a03      	ldr	r3, [r0, #32]
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089e6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ec:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f0:	680d      	ldr	r5, [r1, #0]
 80089f2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089f4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089f8:	688b      	ldr	r3, [r1, #8]
 80089fa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008a70 <TIM_OC1_SetConfig+0x98>)
 80089fe:	4290      	cmp	r0, r2
 8008a00:	d00f      	beq.n	8008a22 <TIM_OC1_SetConfig+0x4a>
 8008a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a06:	4290      	cmp	r0, r2
 8008a08:	d00b      	beq.n	8008a22 <TIM_OC1_SetConfig+0x4a>
 8008a0a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008a0e:	4290      	cmp	r0, r2
 8008a10:	d007      	beq.n	8008a22 <TIM_OC1_SetConfig+0x4a>
 8008a12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a16:	4290      	cmp	r0, r2
 8008a18:	d003      	beq.n	8008a22 <TIM_OC1_SetConfig+0x4a>
 8008a1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a1e:	4290      	cmp	r0, r2
 8008a20:	d105      	bne.n	8008a2e <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a22:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a26:	68ca      	ldr	r2, [r1, #12]
 8008a28:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a2a:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2e:	4a10      	ldr	r2, [pc, #64]	@ (8008a70 <TIM_OC1_SetConfig+0x98>)
 8008a30:	4290      	cmp	r0, r2
 8008a32:	d00f      	beq.n	8008a54 <TIM_OC1_SetConfig+0x7c>
 8008a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a38:	4290      	cmp	r0, r2
 8008a3a:	d00b      	beq.n	8008a54 <TIM_OC1_SetConfig+0x7c>
 8008a3c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008a40:	4290      	cmp	r0, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_OC1_SetConfig+0x7c>
 8008a44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a48:	4290      	cmp	r0, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC1_SetConfig+0x7c>
 8008a4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a50:	4290      	cmp	r0, r2
 8008a52:	d105      	bne.n	8008a60 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a54:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a58:	694a      	ldr	r2, [r1, #20]
 8008a5a:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a5c:	698c      	ldr	r4, [r1, #24]
 8008a5e:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a62:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a64:	684a      	ldr	r2, [r1, #4]
 8008a66:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a68:	6203      	str	r3, [r0, #32]
}
 8008a6a:	bc30      	pop	{r4, r5}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40012c00 	.word	0x40012c00

08008a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a76:	6a03      	ldr	r3, [r0, #32]
 8008a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a82:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a84:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a88:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a8c:	680d      	ldr	r5, [r1, #0]
 8008a8e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a9a:	4a18      	ldr	r2, [pc, #96]	@ (8008afc <TIM_OC3_SetConfig+0x88>)
 8008a9c:	4290      	cmp	r0, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_OC3_SetConfig+0x34>
 8008aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d106      	bne.n	8008ab6 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aac:	68ca      	ldr	r2, [r1, #12]
 8008aae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab6:	4a11      	ldr	r2, [pc, #68]	@ (8008afc <TIM_OC3_SetConfig+0x88>)
 8008ab8:	4290      	cmp	r0, r2
 8008aba:	d00f      	beq.n	8008adc <TIM_OC3_SetConfig+0x68>
 8008abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ac0:	4290      	cmp	r0, r2
 8008ac2:	d00b      	beq.n	8008adc <TIM_OC3_SetConfig+0x68>
 8008ac4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008ac8:	4290      	cmp	r0, r2
 8008aca:	d007      	beq.n	8008adc <TIM_OC3_SetConfig+0x68>
 8008acc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ad0:	4290      	cmp	r0, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_OC3_SetConfig+0x68>
 8008ad4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ad8:	4290      	cmp	r0, r2
 8008ada:	d107      	bne.n	8008aec <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008adc:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ae0:	694c      	ldr	r4, [r1, #20]
 8008ae2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ae6:	698c      	ldr	r4, [r1, #24]
 8008ae8:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aee:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008af0:	684a      	ldr	r2, [r1, #4]
 8008af2:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	6203      	str	r3, [r0, #32]
}
 8008af6:	bc30      	pop	{r4, r5}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40012c00 	.word	0x40012c00

08008b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b02:	6a03      	ldr	r3, [r0, #32]
 8008b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b10:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008b14:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b18:	680d      	ldr	r5, [r1, #0]
 8008b1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b22:	688d      	ldr	r5, [r1, #8]
 8008b24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b28:	4d0f      	ldr	r5, [pc, #60]	@ (8008b68 <TIM_OC4_SetConfig+0x68>)
 8008b2a:	42a8      	cmp	r0, r5
 8008b2c:	d00f      	beq.n	8008b4e <TIM_OC4_SetConfig+0x4e>
 8008b2e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008b32:	42a8      	cmp	r0, r5
 8008b34:	d00b      	beq.n	8008b4e <TIM_OC4_SetConfig+0x4e>
 8008b36:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008b3a:	42a8      	cmp	r0, r5
 8008b3c:	d007      	beq.n	8008b4e <TIM_OC4_SetConfig+0x4e>
 8008b3e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b42:	42a8      	cmp	r0, r5
 8008b44:	d003      	beq.n	8008b4e <TIM_OC4_SetConfig+0x4e>
 8008b46:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b4a:	42a8      	cmp	r0, r5
 8008b4c:	d104      	bne.n	8008b58 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b4e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b52:	694d      	ldr	r5, [r1, #20]
 8008b54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b5c:	684a      	ldr	r2, [r1, #4]
 8008b5e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b60:	6203      	str	r3, [r0, #32]
}
 8008b62:	bc30      	pop	{r4, r5}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40012c00 	.word	0x40012c00

08008b6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b6e:	6a03      	ldr	r3, [r0, #32]
 8008b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b7a:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b7c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008b80:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b84:	680d      	ldr	r5, [r1, #0]
 8008b86:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b8c:	688a      	ldr	r2, [r1, #8]
 8008b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b92:	4a0f      	ldr	r2, [pc, #60]	@ (8008bd0 <TIM_OC5_SetConfig+0x64>)
 8008b94:	4290      	cmp	r0, r2
 8008b96:	d00f      	beq.n	8008bb8 <TIM_OC5_SetConfig+0x4c>
 8008b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b9c:	4290      	cmp	r0, r2
 8008b9e:	d00b      	beq.n	8008bb8 <TIM_OC5_SetConfig+0x4c>
 8008ba0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008ba4:	4290      	cmp	r0, r2
 8008ba6:	d007      	beq.n	8008bb8 <TIM_OC5_SetConfig+0x4c>
 8008ba8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bac:	4290      	cmp	r0, r2
 8008bae:	d003      	beq.n	8008bb8 <TIM_OC5_SetConfig+0x4c>
 8008bb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bb4:	4290      	cmp	r0, r2
 8008bb6:	d104      	bne.n	8008bc2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bb8:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bbc:	694a      	ldr	r2, [r1, #20]
 8008bbe:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bc4:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bc6:	684a      	ldr	r2, [r1, #4]
 8008bc8:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bca:	6203      	str	r3, [r0, #32]
}
 8008bcc:	bc30      	pop	{r4, r5}
 8008bce:	4770      	bx	lr
 8008bd0:	40012c00 	.word	0x40012c00

08008bd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bd6:	6a03      	ldr	r3, [r0, #32]
 8008bd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008bdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008be2:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008be4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008be8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bec:	680d      	ldr	r5, [r1, #0]
 8008bee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bf6:	688d      	ldr	r5, [r1, #8]
 8008bf8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfc:	4d0f      	ldr	r5, [pc, #60]	@ (8008c3c <TIM_OC6_SetConfig+0x68>)
 8008bfe:	42a8      	cmp	r0, r5
 8008c00:	d00f      	beq.n	8008c22 <TIM_OC6_SetConfig+0x4e>
 8008c02:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008c06:	42a8      	cmp	r0, r5
 8008c08:	d00b      	beq.n	8008c22 <TIM_OC6_SetConfig+0x4e>
 8008c0a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008c0e:	42a8      	cmp	r0, r5
 8008c10:	d007      	beq.n	8008c22 <TIM_OC6_SetConfig+0x4e>
 8008c12:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c16:	42a8      	cmp	r0, r5
 8008c18:	d003      	beq.n	8008c22 <TIM_OC6_SetConfig+0x4e>
 8008c1a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c1e:	42a8      	cmp	r0, r5
 8008c20:	d104      	bne.n	8008c2c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c22:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c26:	694d      	ldr	r5, [r1, #20]
 8008c28:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c2e:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c30:	684a      	ldr	r2, [r1, #4]
 8008c32:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	6203      	str	r3, [r0, #32]
}
 8008c36:	bc30      	pop	{r4, r5}
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40012c00 	.word	0x40012c00

08008c40 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008c40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d136      	bne.n	8008cb8 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c50:	6802      	ldr	r2, [r0, #0]
 8008c52:	68d3      	ldr	r3, [r2, #12]
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c5a:	6803      	ldr	r3, [r0, #0]
 8008c5c:	4a19      	ldr	r2, [pc, #100]	@ (8008cc4 <HAL_TIM_Base_Start_IT+0x84>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d01c      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c66:	d019      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c68:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d015      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d011      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00d      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c80:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d009      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
 8008c88:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d005      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c98:	2000      	movs	r0, #0
 8008c9a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c9c:	6899      	ldr	r1, [r3, #8]
 8008c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc8 <HAL_TIM_Base_Start_IT+0x88>)
 8008ca0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	2a06      	cmp	r2, #6
 8008ca4:	d00a      	beq.n	8008cbc <HAL_TIM_Base_Start_IT+0x7c>
 8008ca6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008caa:	d009      	beq.n	8008cc0 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	4770      	bx	lr
    return HAL_ERROR;
 8008cb8:	2001      	movs	r0, #1
 8008cba:	4770      	bx	lr
  return HAL_OK;
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	4770      	bx	lr
 8008cc0:	2000      	movs	r0, #0
}
 8008cc2:	4770      	bx	lr
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	00010007 	.word	0x00010007

08008ccc <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8008ccc:	290c      	cmp	r1, #12
 8008cce:	d814      	bhi.n	8008cfa <HAL_TIM_ReadCapturedValue+0x2e>
 8008cd0:	e8df f001 	tbb	[pc, r1]
 8008cd4:	13131307 	.word	0x13131307
 8008cd8:	1313130a 	.word	0x1313130a
 8008cdc:	1313130d 	.word	0x1313130d
 8008ce0:	10          	.byte	0x10
 8008ce1:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8008ce2:	6803      	ldr	r3, [r0, #0]
 8008ce4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8008ce6:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8008ce8:	6803      	ldr	r3, [r0, #0]
 8008cea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8008cec:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8008cee:	6803      	ldr	r3, [r0, #0]
 8008cf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8008cf2:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8008cf4:	6803      	ldr	r3, [r0, #0]
 8008cf6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8008cf8:	4770      	bx	lr
  switch (Channel)
 8008cfa:	2000      	movs	r0, #0
}
 8008cfc:	4770      	bx	lr

08008cfe <HAL_TIM_IC_CaptureCallback>:
}
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008d00:	4770      	bx	lr

08008d02 <HAL_TIM_TriggerCallback>:
}
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_IRQHandler>:
{
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d08:	6803      	ldr	r3, [r0, #0]
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	f012 0f02 	tst.w	r2, #2
 8008d10:	d011      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	f012 0f02 	tst.w	r2, #2
 8008d18:	d00d      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d1a:	f06f 0202 	mvn.w	r2, #2
 8008d1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d20:	2301      	movs	r3, #1
 8008d22:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d24:	6803      	ldr	r3, [r0, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f013 0f03 	tst.w	r3, #3
 8008d2c:	d079      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	f7ff ffe6 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d32:	2300      	movs	r3, #0
 8008d34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	f012 0f04 	tst.w	r2, #4
 8008d3e:	d012      	beq.n	8008d66 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	f012 0f04 	tst.w	r2, #4
 8008d46:	d00e      	beq.n	8008d66 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d48:	f06f 0204 	mvn.w	r2, #4
 8008d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008d5a:	d068      	beq.n	8008e2e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff ffce 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d62:	2300      	movs	r3, #0
 8008d64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	f012 0f08 	tst.w	r2, #8
 8008d6e:	d012      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	f012 0f08 	tst.w	r2, #8
 8008d76:	d00e      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d78:	f06f 0208 	mvn.w	r2, #8
 8008d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d7e:	2304      	movs	r3, #4
 8008d80:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f013 0f03 	tst.w	r3, #3
 8008d8a:	d057      	beq.n	8008e3c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff ffb6 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	2300      	movs	r3, #0
 8008d94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	f012 0f10 	tst.w	r2, #16
 8008d9e:	d012      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	f012 0f10 	tst.w	r2, #16
 8008da6:	d00e      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008da8:	f06f 0210 	mvn.w	r2, #16
 8008dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dae:	2308      	movs	r3, #8
 8008db0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8008dba:	d046      	beq.n	8008e4a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7ff ff9e 	bl	8008cfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	f012 0f01 	tst.w	r2, #1
 8008dce:	d003      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	f012 0f01 	tst.w	r2, #1
 8008dd6:	d13f      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	691a      	ldr	r2, [r3, #16]
 8008ddc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008de0:	d003      	beq.n	8008dea <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008de8:	d13d      	bne.n	8008e66 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008df2:	d003      	beq.n	8008dfc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008dfa:	d13b      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008e04:	d003      	beq.n	8008e0e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008e0c:	d139      	bne.n	8008e82 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	691a      	ldr	r2, [r3, #16]
 8008e12:	f012 0f20 	tst.w	r2, #32
 8008e16:	d003      	beq.n	8008e20 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	f012 0f20 	tst.w	r2, #32
 8008e1e:	d137      	bne.n	8008e90 <HAL_TIM_IRQHandler+0x18c>
}
 8008e20:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	f7fc ff67 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7ff ff6a 	bl	8008d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8008e2c:	e781      	b.n	8008d32 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7fc ff60 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff ff63 	bl	8008d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8008e3a:	e792      	b.n	8008d62 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7fc ff59 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e42:	4620      	mov	r0, r4
 8008e44:	f7ff ff5c 	bl	8008d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8008e48:	e7a3      	b.n	8008d92 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7fc ff52 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff ff55 	bl	8008d00 <HAL_TIM_PWM_PulseFinishedCallback>
 8008e56:	e7b4      	b.n	8008dc2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e58:	f06f 0201 	mvn.w	r2, #1
 8008e5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f7fc ff60 	bl	8005d24 <HAL_TIM_PeriodElapsedCallback>
 8008e64:	e7b8      	b.n	8008dd8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e66:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fad2 	bl	8009416 <HAL_TIMEx_BreakCallback>
 8008e72:	e7ba      	b.n	8008dea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008e78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 facc 	bl	8009418 <HAL_TIMEx_Break2Callback>
 8008e80:	e7bc      	b.n	8008dfc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f7ff ff3a 	bl	8008d02 <HAL_TIM_TriggerCallback>
 8008e8e:	e7be      	b.n	8008e0e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e90:	f06f 0220 	mvn.w	r2, #32
 8008e94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fabc 	bl	8009414 <HAL_TIMEx_CommutCallback>
}
 8008e9c:	e7c0      	b.n	8008e20 <HAL_TIM_IRQHandler+0x11c>
	...

08008ea0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008ea0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ea2:	4a30      	ldr	r2, [pc, #192]	@ (8008f64 <TIM_Base_SetConfig+0xc4>)
 8008ea4:	4290      	cmp	r0, r2
 8008ea6:	d012      	beq.n	8008ece <TIM_Base_SetConfig+0x2e>
 8008ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008eac:	d00f      	beq.n	8008ece <TIM_Base_SetConfig+0x2e>
 8008eae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008eb2:	4290      	cmp	r0, r2
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0x2e>
 8008eb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eba:	4290      	cmp	r0, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0x2e>
 8008ebe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ec2:	4290      	cmp	r0, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0x2e>
 8008ec6:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008eca:	4290      	cmp	r0, r2
 8008ecc:	d103      	bne.n	8008ed6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ed2:	684a      	ldr	r2, [r1, #4]
 8008ed4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed6:	4a23      	ldr	r2, [pc, #140]	@ (8008f64 <TIM_Base_SetConfig+0xc4>)
 8008ed8:	4290      	cmp	r0, r2
 8008eda:	d01e      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008edc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008ee0:	d01b      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008ee2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008ee6:	4290      	cmp	r0, r2
 8008ee8:	d017      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008eea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eee:	4290      	cmp	r0, r2
 8008ef0:	d013      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008ef2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ef6:	4290      	cmp	r0, r2
 8008ef8:	d00f      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008efa:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008efe:	4290      	cmp	r0, r2
 8008f00:	d00b      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008f02:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8008f06:	4290      	cmp	r0, r2
 8008f08:	d007      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008f0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_Base_SetConfig+0x7a>
 8008f12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f16:	4290      	cmp	r0, r2
 8008f18:	d103      	bne.n	8008f22 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f1e:	68ca      	ldr	r2, [r1, #12]
 8008f20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f26:	694a      	ldr	r2, [r1, #20]
 8008f28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008f2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f2c:	688b      	ldr	r3, [r1, #8]
 8008f2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008f30:	680b      	ldr	r3, [r1, #0]
 8008f32:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f34:	4b0b      	ldr	r3, [pc, #44]	@ (8008f64 <TIM_Base_SetConfig+0xc4>)
 8008f36:	4298      	cmp	r0, r3
 8008f38:	d00f      	beq.n	8008f5a <TIM_Base_SetConfig+0xba>
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f3e:	4298      	cmp	r0, r3
 8008f40:	d00b      	beq.n	8008f5a <TIM_Base_SetConfig+0xba>
 8008f42:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8008f46:	4298      	cmp	r0, r3
 8008f48:	d007      	beq.n	8008f5a <TIM_Base_SetConfig+0xba>
 8008f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f4e:	4298      	cmp	r0, r3
 8008f50:	d003      	beq.n	8008f5a <TIM_Base_SetConfig+0xba>
 8008f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f56:	4298      	cmp	r0, r3
 8008f58:	d101      	bne.n	8008f5e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8008f5a:	690b      	ldr	r3, [r1, #16]
 8008f5c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	6143      	str	r3, [r0, #20]
}
 8008f62:	4770      	bx	lr
 8008f64:	40012c00 	.word	0x40012c00

08008f68 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008f68:	b360      	cbz	r0, 8008fc4 <HAL_TIM_Base_Init+0x5c>
{
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008f6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008f72:	b313      	cbz	r3, 8008fba <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	2302      	movs	r3, #2
 8008f76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008f80:	f7ff ff8e 	bl	8008ea0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008f8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008f92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008f96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008f9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008fa6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008faa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008fae:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008fb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008fb6:	2000      	movs	r0, #0
}
 8008fb8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008fba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008fbe:	f7fd faaf 	bl	8006520 <HAL_TIM_Base_MspInit>
 8008fc2:	e7d7      	b.n	8008f74 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008fc4:	2001      	movs	r0, #1
}
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8008fc8:	b360      	cbz	r0, 8009024 <HAL_TIM_OC_Init+0x5c>
{
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008fce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008fd2:	b313      	cbz	r3, 800901a <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008fda:	4621      	mov	r1, r4
 8008fdc:	f851 0b04 	ldr.w	r0, [r1], #4
 8008fe0:	f7ff ff5e 	bl	8008ea0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008fee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008ff2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008ff6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008ffa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009002:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009006:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800900a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800900e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009012:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8009016:	2000      	movs	r0, #0
}
 8009018:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800901a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800901e:	f7fd fab7 	bl	8006590 <HAL_TIM_OC_MspInit>
 8009022:	e7d7      	b.n	8008fd4 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8009024:	2001      	movs	r0, #1
}
 8009026:	4770      	bx	lr

08009028 <TIM_OC2_SetConfig>:
{
 8009028:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800902a:	6a03      	ldr	r3, [r0, #32]
 800902c:	f023 0310 	bic.w	r3, r3, #16
 8009030:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009032:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009034:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009036:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009038:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800903c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009040:	680d      	ldr	r5, [r1, #0]
 8009042:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009046:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800904a:	688d      	ldr	r5, [r1, #8]
 800904c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009050:	4d17      	ldr	r5, [pc, #92]	@ (80090b0 <TIM_OC2_SetConfig+0x88>)
 8009052:	42a8      	cmp	r0, r5
 8009054:	d003      	beq.n	800905e <TIM_OC2_SetConfig+0x36>
 8009056:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800905a:	42a8      	cmp	r0, r5
 800905c:	d106      	bne.n	800906c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800905e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009062:	68cd      	ldr	r5, [r1, #12]
 8009064:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906c:	4d10      	ldr	r5, [pc, #64]	@ (80090b0 <TIM_OC2_SetConfig+0x88>)
 800906e:	42a8      	cmp	r0, r5
 8009070:	d00f      	beq.n	8009092 <TIM_OC2_SetConfig+0x6a>
 8009072:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8009076:	42a8      	cmp	r0, r5
 8009078:	d00b      	beq.n	8009092 <TIM_OC2_SetConfig+0x6a>
 800907a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800907e:	42a8      	cmp	r0, r5
 8009080:	d007      	beq.n	8009092 <TIM_OC2_SetConfig+0x6a>
 8009082:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009086:	42a8      	cmp	r0, r5
 8009088:	d003      	beq.n	8009092 <TIM_OC2_SetConfig+0x6a>
 800908a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800908e:	42a8      	cmp	r0, r5
 8009090:	d107      	bne.n	80090a2 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009092:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009096:	694c      	ldr	r4, [r1, #20]
 8009098:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800909c:	698c      	ldr	r4, [r1, #24]
 800909e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80090a2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80090a4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80090a6:	684a      	ldr	r2, [r1, #4]
 80090a8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80090aa:	6203      	str	r3, [r0, #32]
}
 80090ac:	bc30      	pop	{r4, r5}
 80090ae:	4770      	bx	lr
 80090b0:	40012c00 	.word	0x40012c00

080090b4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80090b4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d02e      	beq.n	800911a <HAL_TIM_OC_ConfigChannel+0x66>
{
 80090bc:	b510      	push	{r4, lr}
 80090be:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80090c0:	2301      	movs	r3, #1
 80090c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80090c6:	2a14      	cmp	r2, #20
 80090c8:	d80f      	bhi.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
 80090ca:	e8df f002 	tbb	[pc, r2]
 80090ce:	0e0b      	.short	0x0e0b
 80090d0:	0e120e0e 	.word	0x0e120e0e
 80090d4:	0e160e0e 	.word	0x0e160e0e
 80090d8:	0e1a0e0e 	.word	0x0e1a0e0e
 80090dc:	0e1e0e0e 	.word	0x0e1e0e0e
 80090e0:	0e0e      	.short	0x0e0e
 80090e2:	22          	.byte	0x22
 80090e3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090e4:	6800      	ldr	r0, [r0, #0]
 80090e6:	f7ff fc77 	bl	80089d8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80090ea:	2000      	movs	r0, #0
 80090ec:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80090f0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	f7ff ff98 	bl	8009028 <TIM_OC2_SetConfig>
      break;
 80090f8:	e7f7      	b.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090fa:	6800      	ldr	r0, [r0, #0]
 80090fc:	f7ff fcba 	bl	8008a74 <TIM_OC3_SetConfig>
      break;
 8009100:	e7f3      	b.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009102:	6800      	ldr	r0, [r0, #0]
 8009104:	f7ff fcfc 	bl	8008b00 <TIM_OC4_SetConfig>
      break;
 8009108:	e7ef      	b.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	f7ff fd2e 	bl	8008b6c <TIM_OC5_SetConfig>
      break;
 8009110:	e7eb      	b.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	f7ff fd5e 	bl	8008bd4 <TIM_OC6_SetConfig>
      break;
 8009118:	e7e7      	b.n	80090ea <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 800911a:	2002      	movs	r0, #2
}
 800911c:	4770      	bx	lr

0800911e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800911e:	f001 011f 	and.w	r1, r1, #31
 8009122:	f04f 0c01 	mov.w	ip, #1
 8009126:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800912a:	6a03      	ldr	r3, [r0, #32]
 800912c:	ea23 030c 	bic.w	r3, r3, ip
 8009130:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009132:	6a03      	ldr	r3, [r0, #32]
 8009134:	408a      	lsls	r2, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	6203      	str	r3, [r0, #32]
}
 800913a:	4770      	bx	lr

0800913c <HAL_TIM_OC_Start_IT>:
{
 800913c:	b510      	push	{r4, lr}
 800913e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009140:	2910      	cmp	r1, #16
 8009142:	d83d      	bhi.n	80091c0 <HAL_TIM_OC_Start_IT+0x84>
 8009144:	e8df f001 	tbb	[pc, r1]
 8009148:	3c3c3c09 	.word	0x3c3c3c09
 800914c:	3c3c3c20 	.word	0x3c3c3c20
 8009150:	3c3c3c27 	.word	0x3c3c3c27
 8009154:	3c3c3c2e 	.word	0x3c3c3c2e
 8009158:	35          	.byte	0x35
 8009159:	00          	.byte	0x00
 800915a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800915e:	b2db      	uxtb	r3, r3
 8009160:	3b01      	subs	r3, #1
 8009162:	bf18      	it	ne
 8009164:	2301      	movne	r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 80c6 	bne.w	80092f8 <HAL_TIM_OC_Start_IT+0x1bc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800916c:	2910      	cmp	r1, #16
 800916e:	f200 8092 	bhi.w	8009296 <HAL_TIM_OC_Start_IT+0x15a>
 8009172:	e8df f001 	tbb	[pc, r1]
 8009176:	902c      	.short	0x902c
 8009178:	90719090 	.word	0x90719090
 800917c:	907a9090 	.word	0x907a9090
 8009180:	90839090 	.word	0x90839090
 8009184:	9090      	.short	0x9090
 8009186:	8c          	.byte	0x8c
 8009187:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009188:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800918c:	b2db      	uxtb	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	bf18      	it	ne
 8009192:	2301      	movne	r3, #1
 8009194:	e7e7      	b.n	8009166 <HAL_TIM_OC_Start_IT+0x2a>
 8009196:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800919a:	b2db      	uxtb	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	bf18      	it	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	e7e0      	b.n	8009166 <HAL_TIM_OC_Start_IT+0x2a>
 80091a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	bf18      	it	ne
 80091ae:	2301      	movne	r3, #1
 80091b0:	e7d9      	b.n	8009166 <HAL_TIM_OC_Start_IT+0x2a>
 80091b2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	3b01      	subs	r3, #1
 80091ba:	bf18      	it	ne
 80091bc:	2301      	movne	r3, #1
 80091be:	e7d2      	b.n	8009166 <HAL_TIM_OC_Start_IT+0x2a>
 80091c0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	bf18      	it	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	e7cb      	b.n	8009166 <HAL_TIM_OC_Start_IT+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ce:	2302      	movs	r3, #2
 80091d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	68d3      	ldr	r3, [r2, #12]
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091de:	2201      	movs	r2, #1
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	f7ff ff9c 	bl	800911e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	4a46      	ldr	r2, [pc, #280]	@ (8009304 <HAL_TIM_OC_Start_IT+0x1c8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00f      	beq.n	800920e <HAL_TIM_OC_Start_IT+0xd2>
 80091ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00b      	beq.n	800920e <HAL_TIM_OC_Start_IT+0xd2>
 80091f6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d007      	beq.n	800920e <HAL_TIM_OC_Start_IT+0xd2>
 80091fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009202:	4293      	cmp	r3, r2
 8009204:	d003      	beq.n	800920e <HAL_TIM_OC_Start_IT+0xd2>
 8009206:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800920a:	4293      	cmp	r3, r2
 800920c:	d103      	bne.n	8009216 <HAL_TIM_OC_Start_IT+0xda>
    __HAL_TIM_MOE_ENABLE(htim);
 800920e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009214:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	4a3a      	ldr	r2, [pc, #232]	@ (8009304 <HAL_TIM_OC_Start_IT+0x1c8>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d05e      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009222:	d05b      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 8009224:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8009228:	4293      	cmp	r3, r2
 800922a:	d057      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 800922c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009230:	4293      	cmp	r3, r2
 8009232:	d053      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 8009234:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009238:	4293      	cmp	r3, r2
 800923a:	d04f      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 800923c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8009240:	4293      	cmp	r3, r2
 8009242:	d04b      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
 8009244:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8009248:	4293      	cmp	r3, r2
 800924a:	d047      	beq.n	80092dc <HAL_TIM_OC_Start_IT+0x1a0>
    __HAL_TIM_ENABLE(htim);
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009254:	2000      	movs	r0, #0
 8009256:	e050      	b.n	80092fa <HAL_TIM_OC_Start_IT+0x1be>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009258:	2302      	movs	r3, #2
 800925a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	68d3      	ldr	r3, [r2, #12]
 8009262:	f043 0304 	orr.w	r3, r3, #4
 8009266:	60d3      	str	r3, [r2, #12]
      break;
 8009268:	e7b9      	b.n	80091de <HAL_TIM_OC_Start_IT+0xa2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800926a:	2302      	movs	r3, #2
 800926c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	68d3      	ldr	r3, [r2, #12]
 8009274:	f043 0308 	orr.w	r3, r3, #8
 8009278:	60d3      	str	r3, [r2, #12]
      break;
 800927a:	e7b0      	b.n	80091de <HAL_TIM_OC_Start_IT+0xa2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800927c:	2302      	movs	r3, #2
 800927e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	68d3      	ldr	r3, [r2, #12]
 8009286:	f043 0310 	orr.w	r3, r3, #16
 800928a:	60d3      	str	r3, [r2, #12]
      break;
 800928c:	e7a7      	b.n	80091de <HAL_TIM_OC_Start_IT+0xa2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800928e:	2302      	movs	r3, #2
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 8009294:	e7a3      	b.n	80091de <HAL_TIM_OC_Start_IT+0xa2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009296:	2302      	movs	r3, #2
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  switch (Channel)
 800929c:	290c      	cmp	r1, #12
 800929e:	d89e      	bhi.n	80091de <HAL_TIM_OC_Start_IT+0xa2>
 80092a0:	a301      	add	r3, pc, #4	@ (adr r3, 80092a8 <HAL_TIM_OC_Start_IT+0x16c>)
 80092a2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080091d5 	.word	0x080091d5
 80092ac:	080091df 	.word	0x080091df
 80092b0:	080091df 	.word	0x080091df
 80092b4:	080091df 	.word	0x080091df
 80092b8:	0800925f 	.word	0x0800925f
 80092bc:	080091df 	.word	0x080091df
 80092c0:	080091df 	.word	0x080091df
 80092c4:	080091df 	.word	0x080091df
 80092c8:	08009271 	.word	0x08009271
 80092cc:	080091df 	.word	0x080091df
 80092d0:	080091df 	.word	0x080091df
 80092d4:	080091df 	.word	0x080091df
 80092d8:	08009283 	.word	0x08009283
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092dc:	6899      	ldr	r1, [r3, #8]
 80092de:	4a0a      	ldr	r2, [pc, #40]	@ (8009308 <HAL_TIM_OC_Start_IT+0x1cc>)
 80092e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e2:	2a06      	cmp	r2, #6
 80092e4:	d00a      	beq.n	80092fc <HAL_TIM_OC_Start_IT+0x1c0>
 80092e6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80092ea:	d009      	beq.n	8009300 <HAL_TIM_OC_Start_IT+0x1c4>
      __HAL_TIM_ENABLE(htim);
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80092f4:	2000      	movs	r0, #0
 80092f6:	e000      	b.n	80092fa <HAL_TIM_OC_Start_IT+0x1be>
    return HAL_ERROR;
 80092f8:	2001      	movs	r0, #1
}
 80092fa:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7fc      	b.n	80092fa <HAL_TIM_OC_Start_IT+0x1be>
 8009300:	2000      	movs	r0, #0
 8009302:	e7fa      	b.n	80092fa <HAL_TIM_OC_Start_IT+0x1be>
 8009304:	40012c00 	.word	0x40012c00
 8009308:	00010007 	.word	0x00010007

0800930c <HAL_TIM_OC_Stop_IT>:
{
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4605      	mov	r5, r0
 8009310:	460c      	mov	r4, r1
  switch (Channel)
 8009312:	290c      	cmp	r1, #12
 8009314:	d80d      	bhi.n	8009332 <HAL_TIM_OC_Stop_IT+0x26>
 8009316:	e8df f001 	tbb	[pc, r1]
 800931a:	0c07      	.short	0x0c07
 800931c:	0c4f0c0c 	.word	0x0c4f0c0c
 8009320:	0c550c0c 	.word	0x0c550c0c
 8009324:	0c0c      	.short	0x0c0c
 8009326:	5b          	.byte	0x5b
 8009327:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009328:	6802      	ldr	r2, [r0, #0]
 800932a:	68d3      	ldr	r3, [r2, #12]
 800932c:	f023 0302 	bic.w	r3, r3, #2
 8009330:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009332:	2200      	movs	r2, #0
 8009334:	4621      	mov	r1, r4
 8009336:	6828      	ldr	r0, [r5, #0]
 8009338:	f7ff fef1 	bl	800911e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	4a34      	ldr	r2, [pc, #208]	@ (8009410 <HAL_TIM_OC_Stop_IT+0x104>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00f      	beq.n	8009364 <HAL_TIM_OC_Stop_IT+0x58>
 8009344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009348:	4293      	cmp	r3, r2
 800934a:	d00b      	beq.n	8009364 <HAL_TIM_OC_Stop_IT+0x58>
 800934c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8009350:	4293      	cmp	r3, r2
 8009352:	d007      	beq.n	8009364 <HAL_TIM_OC_Stop_IT+0x58>
 8009354:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009358:	4293      	cmp	r3, r2
 800935a:	d003      	beq.n	8009364 <HAL_TIM_OC_Stop_IT+0x58>
 800935c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009360:	4293      	cmp	r3, r2
 8009362:	d10d      	bne.n	8009380 <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 8009364:	6a19      	ldr	r1, [r3, #32]
 8009366:	f241 1211 	movw	r2, #4369	@ 0x1111
 800936a:	4211      	tst	r1, r2
 800936c:	d108      	bne.n	8009380 <HAL_TIM_OC_Stop_IT+0x74>
 800936e:	6a19      	ldr	r1, [r3, #32]
 8009370:	f240 4244 	movw	r2, #1092	@ 0x444
 8009374:	4211      	tst	r1, r2
 8009376:	d103      	bne.n	8009380 <HAL_TIM_OC_Stop_IT+0x74>
 8009378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800937a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800937e:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	6a19      	ldr	r1, [r3, #32]
 8009384:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009388:	4211      	tst	r1, r2
 800938a:	d108      	bne.n	800939e <HAL_TIM_OC_Stop_IT+0x92>
 800938c:	6a19      	ldr	r1, [r3, #32]
 800938e:	f240 4244 	movw	r2, #1092	@ 0x444
 8009392:	4211      	tst	r1, r2
 8009394:	d103      	bne.n	800939e <HAL_TIM_OC_Stop_IT+0x92>
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	f022 0201 	bic.w	r2, r2, #1
 800939c:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800939e:	2c10      	cmp	r4, #16
 80093a0:	d831      	bhi.n	8009406 <HAL_TIM_OC_Stop_IT+0xfa>
 80093a2:	e8df f004 	tbb	[pc, r4]
 80093a6:	301b      	.short	0x301b
 80093a8:	30203030 	.word	0x30203030
 80093ac:	30243030 	.word	0x30243030
 80093b0:	30283030 	.word	0x30283030
 80093b4:	3030      	.short	0x3030
 80093b6:	2c          	.byte	0x2c
 80093b7:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80093b8:	6802      	ldr	r2, [r0, #0]
 80093ba:	68d3      	ldr	r3, [r2, #12]
 80093bc:	f023 0304 	bic.w	r3, r3, #4
 80093c0:	60d3      	str	r3, [r2, #12]
      break;
 80093c2:	e7b6      	b.n	8009332 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80093c4:	6802      	ldr	r2, [r0, #0]
 80093c6:	68d3      	ldr	r3, [r2, #12]
 80093c8:	f023 0308 	bic.w	r3, r3, #8
 80093cc:	60d3      	str	r3, [r2, #12]
      break;
 80093ce:	e7b0      	b.n	8009332 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80093d0:	6802      	ldr	r2, [r0, #0]
 80093d2:	68d3      	ldr	r3, [r2, #12]
 80093d4:	f023 0310 	bic.w	r3, r3, #16
 80093d8:	60d3      	str	r3, [r2, #12]
      break;
 80093da:	e7aa      	b.n	8009332 <HAL_TIM_OC_Stop_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80093dc:	2301      	movs	r3, #1
 80093de:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
}
 80093e2:	2000      	movs	r0, #0
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80093e6:	2301      	movs	r3, #1
 80093e8:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 80093ec:	e7f9      	b.n	80093e2 <HAL_TIM_OC_Stop_IT+0xd6>
 80093ee:	2301      	movs	r3, #1
 80093f0:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80093f4:	e7f5      	b.n	80093e2 <HAL_TIM_OC_Stop_IT+0xd6>
 80093f6:	2301      	movs	r3, #1
 80093f8:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 80093fc:	e7f1      	b.n	80093e2 <HAL_TIM_OC_Stop_IT+0xd6>
 80093fe:	2301      	movs	r3, #1
 8009400:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 8009404:	e7ed      	b.n	80093e2 <HAL_TIM_OC_Stop_IT+0xd6>
 8009406:	2301      	movs	r3, #1
 8009408:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 800940c:	e7e9      	b.n	80093e2 <HAL_TIM_OC_Stop_IT+0xd6>
 800940e:	bf00      	nop
 8009410:	40012c00 	.word	0x40012c00

08009414 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009414:	4770      	bx	lr

08009416 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009416:	4770      	bx	lr

08009418 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009418:	4770      	bx	lr

0800941a <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800941a:	6802      	ldr	r2, [r0, #0]
 800941c:	6813      	ldr	r3, [r2, #0]
 800941e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009422:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009424:	6802      	ldr	r2, [r0, #0]
 8009426:	6893      	ldr	r3, [r2, #8]
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009430:	2b01      	cmp	r3, #1
 8009432:	d005      	beq.n	8009440 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009434:	2320      	movs	r3, #32
 8009436:	67c3      	str	r3, [r0, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009438:	2300      	movs	r3, #0
 800943a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800943c:	6643      	str	r3, [r0, #100]	@ 0x64
}
 800943e:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009440:	6802      	ldr	r2, [r0, #0]
 8009442:	6813      	ldr	r3, [r2, #0]
 8009444:	f023 0310 	bic.w	r3, r3, #16
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	e7f3      	b.n	8009434 <UART_EndRxTransfer+0x1a>

0800944c <HAL_UART_TxCpltCallback>:
}
 800944c:	4770      	bx	lr

0800944e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800944e:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009450:	6801      	ldr	r1, [r0, #0]
 8009452:	680a      	ldr	r2, [r1, #0]
 8009454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009458:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800945a:	2220      	movs	r2, #32
 800945c:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800945e:	2200      	movs	r2, #0
 8009460:	6682      	str	r2, [r0, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009462:	f7ff fff3 	bl	800944c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009466:	bd08      	pop	{r3, pc}

08009468 <HAL_UART_ErrorCallback>:
}
 8009468:	4770      	bx	lr

0800946a <UART_DMAAbortOnError>:
{
 800946a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800946c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009474:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 8009478:	f7ff fff6 	bl	8009468 <HAL_UART_ErrorCallback>
}
 800947c:	bd08      	pop	{r3, pc}

0800947e <HAL_UARTEx_RxEventCallback>:
}
 800947e:	4770      	bx	lr

08009480 <HAL_UART_IRQHandler>:
{
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009484:	6802      	ldr	r2, [r0, #0]
 8009486:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009488:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800948a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800948c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8009490:	ea13 0f0c 	tst.w	r3, ip
 8009494:	d10a      	bne.n	80094ac <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009496:	f013 0f20 	tst.w	r3, #32
 800949a:	d00d      	beq.n	80094b8 <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800949c:	f011 0f20 	tst.w	r1, #32
 80094a0:	d00a      	beq.n	80094b8 <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 80094a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094a4:	b30b      	cbz	r3, 80094ea <HAL_UART_IRQHandler+0x6a>
        huart->RxISR(huart);
 80094a6:	4620      	mov	r0, r4
 80094a8:	4798      	blx	r3
      return;
 80094aa:	e01e      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094ac:	f010 0501 	ands.w	r5, r0, #1
 80094b0:	d11c      	bne.n	80094ec <HAL_UART_IRQHandler+0x6c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094b2:	4e92      	ldr	r6, [pc, #584]	@ (80096fc <HAL_UART_IRQHandler+0x27c>)
 80094b4:	4231      	tst	r1, r6
 80094b6:	d119      	bne.n	80094ec <HAL_UART_IRQHandler+0x6c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b8:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80094ba:	2d01      	cmp	r5, #1
 80094bc:	f000 809c 	beq.w	80095f8 <HAL_UART_IRQHandler+0x178>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094c0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80094c4:	d003      	beq.n	80094ce <HAL_UART_IRQHandler+0x4e>
 80094c6:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 80094ca:	f040 8104 	bne.w	80096d6 <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80094ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094d2:	d003      	beq.n	80094dc <HAL_UART_IRQHandler+0x5c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80094d4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80094d8:	f040 8104 	bne.w	80096e4 <HAL_UART_IRQHandler+0x264>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x6a>
 80094e2:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80094e6:	f040 8104 	bne.w	80096f2 <HAL_UART_IRQHandler+0x272>
}
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ec:	f013 0f01 	tst.w	r3, #1
 80094f0:	d009      	beq.n	8009506 <HAL_UART_IRQHandler+0x86>
 80094f2:	f411 7f80 	tst.w	r1, #256	@ 0x100
 80094f6:	d006      	beq.n	8009506 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094f8:	2001      	movs	r0, #1
 80094fa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094fc:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009500:	4302      	orrs	r2, r0
 8009502:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009506:	f013 0f02 	tst.w	r3, #2
 800950a:	d009      	beq.n	8009520 <HAL_UART_IRQHandler+0xa0>
 800950c:	b145      	cbz	r5, 8009520 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	2002      	movs	r0, #2
 8009512:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009514:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009518:	f042 0204 	orr.w	r2, r2, #4
 800951c:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009520:	f013 0f04 	tst.w	r3, #4
 8009524:	d009      	beq.n	800953a <HAL_UART_IRQHandler+0xba>
 8009526:	b145      	cbz	r5, 800953a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	2004      	movs	r0, #4
 800952c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800952e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009532:	f042 0202 	orr.w	r2, r2, #2
 8009536:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800953a:	f013 0f08 	tst.w	r3, #8
 800953e:	d00b      	beq.n	8009558 <HAL_UART_IRQHandler+0xd8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009540:	f011 0f20 	tst.w	r1, #32
 8009544:	d100      	bne.n	8009548 <HAL_UART_IRQHandler+0xc8>
 8009546:	b13d      	cbz	r5, 8009558 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	2008      	movs	r0, #8
 800954c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800954e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009552:	4302      	orrs	r2, r0
 8009554:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009558:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800955c:	d00c      	beq.n	8009578 <HAL_UART_IRQHandler+0xf8>
 800955e:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 8009562:	d009      	beq.n	8009578 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800956a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800956c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009570:	f042 0220 	orr.w	r2, r2, #32
 8009574:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009578:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800957c:	2a00      	cmp	r2, #0
 800957e:	d0b4      	beq.n	80094ea <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009580:	f013 0f20 	tst.w	r3, #32
 8009584:	d006      	beq.n	8009594 <HAL_UART_IRQHandler+0x114>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009586:	f011 0f20 	tst.w	r1, #32
 800958a:	d003      	beq.n	8009594 <HAL_UART_IRQHandler+0x114>
        if (huart->RxISR != NULL)
 800958c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800958e:	b10b      	cbz	r3, 8009594 <HAL_UART_IRQHandler+0x114>
          huart->RxISR(huart);
 8009590:	4620      	mov	r0, r4
 8009592:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009594:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80095a0:	d102      	bne.n	80095a8 <HAL_UART_IRQHandler+0x128>
 80095a2:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80095a6:	d020      	beq.n	80095ea <HAL_UART_IRQHandler+0x16a>
        UART_EndRxTransfer(huart);
 80095a8:	4620      	mov	r0, r4
 80095aa:	f7ff ff36 	bl	800941a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80095b6:	d014      	beq.n	80095e2 <HAL_UART_IRQHandler+0x162>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095b8:	689a      	ldr	r2, [r3, #8]
 80095ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095be:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80095c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80095c2:	b153      	cbz	r3, 80095da <HAL_UART_IRQHandler+0x15a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095c4:	4a4e      	ldr	r2, [pc, #312]	@ (8009700 <HAL_UART_IRQHandler+0x280>)
 80095c6:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095c8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80095ca:	f7fd fb3e 	bl	8006c4a <HAL_DMA_Abort_IT>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d08b      	beq.n	80094ea <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095d2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80095d4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80095d6:	4798      	blx	r3
 80095d8:	e787      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80095da:	4620      	mov	r0, r4
 80095dc:	f7ff ff44 	bl	8009468 <HAL_UART_ErrorCallback>
 80095e0:	e783      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
          HAL_UART_ErrorCallback(huart);
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7ff ff40 	bl	8009468 <HAL_UART_ErrorCallback>
 80095e8:	e77f      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff ff3c 	bl	8009468 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return;
 80095f6:	e778      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80095f8:	f013 0f10 	tst.w	r3, #16
 80095fc:	f43f af60 	beq.w	80094c0 <HAL_UART_IRQHandler+0x40>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009600:	f011 0f10 	tst.w	r1, #16
 8009604:	f43f af5c 	beq.w	80094c0 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009608:	2310      	movs	r3, #16
 800960a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	6893      	ldr	r3, [r2, #8]
 8009610:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009614:	d038      	beq.n	8009688 <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009616:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8009618:	680b      	ldr	r3, [r1, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800961e:	2b00      	cmp	r3, #0
 8009620:	f43f af63 	beq.w	80094ea <HAL_UART_IRQHandler+0x6a>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009624:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
 8009628:	4298      	cmp	r0, r3
 800962a:	f67f af5e 	bls.w	80094ea <HAL_UART_IRQHandler+0x6a>
        huart->RxXferCount = nb_remaining_rx_data;
 800962e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009632:	680b      	ldr	r3, [r1, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f013 0f20 	tst.w	r3, #32
 800963a:	d00a      	beq.n	8009652 <HAL_UART_IRQHandler+0x1d2>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800963c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8009640:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8009644:	b29b      	uxth	r3, r3
 8009646:	1ac9      	subs	r1, r1, r3
 8009648:	b289      	uxth	r1, r1
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff ff17 	bl	800947e <HAL_UARTEx_RxEventCallback>
      return;
 8009650:	e74b      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009658:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	6893      	ldr	r3, [r2, #8]
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009664:	6822      	ldr	r2, [r4, #0]
 8009666:	6893      	ldr	r3, [r2, #8]
 8009668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800966c:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800966e:	2320      	movs	r3, #32
 8009670:	67e3      	str	r3, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009672:	2300      	movs	r3, #0
 8009674:	6623      	str	r3, [r4, #96]	@ 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	6813      	ldr	r3, [r2, #0]
 800967a:	f023 0310 	bic.w	r3, r3, #16
 800967e:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009680:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8009682:	f7fd fabd 	bl	8006c00 <HAL_DMA_Abort>
 8009686:	e7d9      	b.n	800963c <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009688:	f8b4 3058 	ldrh.w	r3, [r4, #88]	@ 0x58
 800968c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8009690:	b289      	uxth	r1, r1
 8009692:	1a5b      	subs	r3, r3, r1
 8009694:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8009696:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	f43f af24 	beq.w	80094ea <HAL_UART_IRQHandler+0x6a>
          &&(nb_rx_data > 0U) )
 80096a2:	2900      	cmp	r1, #0
 80096a4:	f43f af21 	beq.w	80094ea <HAL_UART_IRQHandler+0x6a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a8:	6813      	ldr	r3, [r2, #0]
 80096aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096ae:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	6893      	ldr	r3, [r2, #8]
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80096ba:	2320      	movs	r3, #32
 80096bc:	67e3      	str	r3, [r4, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096be:	2300      	movs	r3, #0
 80096c0:	6623      	str	r3, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 80096c2:	6663      	str	r3, [r4, #100]	@ 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	6813      	ldr	r3, [r2, #0]
 80096c8:	f023 0310 	bic.w	r3, r3, #16
 80096cc:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff fed5 	bl	800947e <HAL_UARTEx_RxEventCallback>
      return;
 80096d4:	e709      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80096da:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 fb33 	bl	8009d48 <HAL_UARTEx_WakeupCallback>
    return;
 80096e2:	e702      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
    if (huart->TxISR != NULL)
 80096e4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f43f aeff 	beq.w	80094ea <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 80096ec:	4620      	mov	r0, r4
 80096ee:	4798      	blx	r3
    return;
 80096f0:	e6fb      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
    UART_EndTransmit_IT(huart);
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7ff feab 	bl	800944e <UART_EndTransmit_IT>
    return;
 80096f8:	e6f7      	b.n	80094ea <HAL_UART_IRQHandler+0x6a>
 80096fa:	bf00      	nop
 80096fc:	04000120 	.word	0x04000120
 8009700:	0800946b 	.word	0x0800946b

08009704 <UART_SetConfig>:
{
 8009704:	b510      	push	{r4, lr}
 8009706:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009708:	6883      	ldr	r3, [r0, #8]
 800970a:	6902      	ldr	r2, [r0, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	6942      	ldr	r2, [r0, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	69c2      	ldr	r2, [r0, #28]
 8009714:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009716:	6801      	ldr	r1, [r0, #0]
 8009718:	6808      	ldr	r0, [r1, #0]
 800971a:	4a8f      	ldr	r2, [pc, #572]	@ (8009958 <UART_SetConfig+0x254>)
 800971c:	4002      	ands	r2, r0
 800971e:	431a      	orrs	r2, r3
 8009720:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	6853      	ldr	r3, [r2, #4]
 8009726:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800972a:	68e1      	ldr	r1, [r4, #12]
 800972c:	430b      	orrs	r3, r1
 800972e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009730:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	4b89      	ldr	r3, [pc, #548]	@ (800995c <UART_SetConfig+0x258>)
 8009736:	429a      	cmp	r2, r3
 8009738:	d001      	beq.n	800973e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800973a:	6a23      	ldr	r3, [r4, #32]
 800973c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800973e:	6893      	ldr	r3, [r2, #8]
 8009740:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009744:	430b      	orrs	r3, r1
 8009746:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	4a85      	ldr	r2, [pc, #532]	@ (8009960 <UART_SetConfig+0x25c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d026      	beq.n	800979e <UART_SetConfig+0x9a>
 8009750:	4a84      	ldr	r2, [pc, #528]	@ (8009964 <UART_SetConfig+0x260>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d037      	beq.n	80097c6 <UART_SetConfig+0xc2>
 8009756:	4a84      	ldr	r2, [pc, #528]	@ (8009968 <UART_SetConfig+0x264>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d04d      	beq.n	80097f8 <UART_SetConfig+0xf4>
 800975c:	4a83      	ldr	r2, [pc, #524]	@ (800996c <UART_SetConfig+0x268>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d05d      	beq.n	800981e <UART_SetConfig+0x11a>
 8009762:	4a83      	ldr	r2, [pc, #524]	@ (8009970 <UART_SetConfig+0x26c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d06c      	beq.n	8009842 <UART_SetConfig+0x13e>
 8009768:	4a7c      	ldr	r2, [pc, #496]	@ (800995c <UART_SetConfig+0x258>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d07e      	beq.n	800986c <UART_SetConfig+0x168>
 800976e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8009770:	497a      	ldr	r1, [pc, #488]	@ (800995c <UART_SetConfig+0x258>)
 8009772:	428b      	cmp	r3, r1
 8009774:	f000 80b3 	beq.w	80098de <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009778:	69e0      	ldr	r0, [r4, #28]
 800977a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800977e:	f000 80e0 	beq.w	8009942 <UART_SetConfig+0x23e>
    switch (clocksource)
 8009782:	2a08      	cmp	r2, #8
 8009784:	f200 814b 	bhi.w	8009a1e <UART_SetConfig+0x31a>
 8009788:	e8df f012 	tbh	[pc, r2, lsl #1]
 800978c:	0130011a 	.word	0x0130011a
 8009790:	01490118 	.word	0x01490118
 8009794:	01490133 	.word	0x01490133
 8009798:	01490149 	.word	0x01490149
 800979c:	0136      	.short	0x0136
  UART_GETCLOCKSOURCE(huart, clocksource);
 800979e:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80097a2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80097a6:	f002 0203 	and.w	r2, r2, #3
 80097aa:	2a03      	cmp	r2, #3
 80097ac:	d809      	bhi.n	80097c2 <UART_SetConfig+0xbe>
 80097ae:	e8df f002 	tbb	[pc, r2]
 80097b2:	0402      	.short	0x0402
 80097b4:	0672      	.short	0x0672
 80097b6:	2201      	movs	r2, #1
 80097b8:	e7da      	b.n	8009770 <UART_SetConfig+0x6c>
 80097ba:	2204      	movs	r2, #4
 80097bc:	e7d8      	b.n	8009770 <UART_SetConfig+0x6c>
 80097be:	2208      	movs	r2, #8
 80097c0:	e7d6      	b.n	8009770 <UART_SetConfig+0x6c>
 80097c2:	2210      	movs	r2, #16
 80097c4:	e7d4      	b.n	8009770 <UART_SetConfig+0x6c>
 80097c6:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80097ca:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80097ce:	f002 020c 	and.w	r2, r2, #12
 80097d2:	2a0c      	cmp	r2, #12
 80097d4:	d80e      	bhi.n	80097f4 <UART_SetConfig+0xf0>
 80097d6:	e8df f002 	tbb	[pc, r2]
 80097da:	0d07      	.short	0x0d07
 80097dc:	0d090d0d 	.word	0x0d090d0d
 80097e0:	0d600d0d 	.word	0x0d600d0d
 80097e4:	0d0d      	.short	0x0d0d
 80097e6:	0b          	.byte	0x0b
 80097e7:	00          	.byte	0x00
 80097e8:	2200      	movs	r2, #0
 80097ea:	e7c1      	b.n	8009770 <UART_SetConfig+0x6c>
 80097ec:	2204      	movs	r2, #4
 80097ee:	e7bf      	b.n	8009770 <UART_SetConfig+0x6c>
 80097f0:	2208      	movs	r2, #8
 80097f2:	e7bd      	b.n	8009770 <UART_SetConfig+0x6c>
 80097f4:	2210      	movs	r2, #16
 80097f6:	e7bb      	b.n	8009770 <UART_SetConfig+0x6c>
 80097f8:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80097fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009800:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8009804:	2a20      	cmp	r2, #32
 8009806:	d04a      	beq.n	800989e <UART_SetConfig+0x19a>
 8009808:	d805      	bhi.n	8009816 <UART_SetConfig+0x112>
 800980a:	2a00      	cmp	r2, #0
 800980c:	d049      	beq.n	80098a2 <UART_SetConfig+0x19e>
 800980e:	2a10      	cmp	r2, #16
 8009810:	d149      	bne.n	80098a6 <UART_SetConfig+0x1a2>
 8009812:	2204      	movs	r2, #4
 8009814:	e7ac      	b.n	8009770 <UART_SetConfig+0x6c>
 8009816:	2a30      	cmp	r2, #48	@ 0x30
 8009818:	d147      	bne.n	80098aa <UART_SetConfig+0x1a6>
 800981a:	2208      	movs	r2, #8
 800981c:	e7a8      	b.n	8009770 <UART_SetConfig+0x6c>
 800981e:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8009822:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009826:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800982a:	2a80      	cmp	r2, #128	@ 0x80
 800982c:	d03f      	beq.n	80098ae <UART_SetConfig+0x1aa>
 800982e:	d804      	bhi.n	800983a <UART_SetConfig+0x136>
 8009830:	b3fa      	cbz	r2, 80098b2 <UART_SetConfig+0x1ae>
 8009832:	2a40      	cmp	r2, #64	@ 0x40
 8009834:	d13f      	bne.n	80098b6 <UART_SetConfig+0x1b2>
 8009836:	2204      	movs	r2, #4
 8009838:	e79a      	b.n	8009770 <UART_SetConfig+0x6c>
 800983a:	2ac0      	cmp	r2, #192	@ 0xc0
 800983c:	d13d      	bne.n	80098ba <UART_SetConfig+0x1b6>
 800983e:	2208      	movs	r2, #8
 8009840:	e796      	b.n	8009770 <UART_SetConfig+0x6c>
 8009842:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8009846:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800984a:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800984e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8009852:	d034      	beq.n	80098be <UART_SetConfig+0x1ba>
 8009854:	d805      	bhi.n	8009862 <UART_SetConfig+0x15e>
 8009856:	b3a2      	cbz	r2, 80098c2 <UART_SetConfig+0x1be>
 8009858:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800985c:	d133      	bne.n	80098c6 <UART_SetConfig+0x1c2>
 800985e:	2204      	movs	r2, #4
 8009860:	e786      	b.n	8009770 <UART_SetConfig+0x6c>
 8009862:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8009866:	d130      	bne.n	80098ca <UART_SetConfig+0x1c6>
 8009868:	2208      	movs	r2, #8
 800986a:	e781      	b.n	8009770 <UART_SetConfig+0x6c>
 800986c:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8009870:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009874:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8009878:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800987c:	d027      	beq.n	80098ce <UART_SetConfig+0x1ca>
 800987e:	d805      	bhi.n	800988c <UART_SetConfig+0x188>
 8009880:	b33a      	cbz	r2, 80098d2 <UART_SetConfig+0x1ce>
 8009882:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009886:	d126      	bne.n	80098d6 <UART_SetConfig+0x1d2>
 8009888:	2204      	movs	r2, #4
 800988a:	e771      	b.n	8009770 <UART_SetConfig+0x6c>
 800988c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8009890:	d123      	bne.n	80098da <UART_SetConfig+0x1d6>
 8009892:	2208      	movs	r2, #8
 8009894:	e76c      	b.n	8009770 <UART_SetConfig+0x6c>
 8009896:	2202      	movs	r2, #2
 8009898:	e76a      	b.n	8009770 <UART_SetConfig+0x6c>
 800989a:	2202      	movs	r2, #2
 800989c:	e768      	b.n	8009770 <UART_SetConfig+0x6c>
 800989e:	2202      	movs	r2, #2
 80098a0:	e766      	b.n	8009770 <UART_SetConfig+0x6c>
 80098a2:	2200      	movs	r2, #0
 80098a4:	e764      	b.n	8009770 <UART_SetConfig+0x6c>
 80098a6:	2210      	movs	r2, #16
 80098a8:	e762      	b.n	8009770 <UART_SetConfig+0x6c>
 80098aa:	2210      	movs	r2, #16
 80098ac:	e760      	b.n	8009770 <UART_SetConfig+0x6c>
 80098ae:	2202      	movs	r2, #2
 80098b0:	e75e      	b.n	8009770 <UART_SetConfig+0x6c>
 80098b2:	2200      	movs	r2, #0
 80098b4:	e75c      	b.n	8009770 <UART_SetConfig+0x6c>
 80098b6:	2210      	movs	r2, #16
 80098b8:	e75a      	b.n	8009770 <UART_SetConfig+0x6c>
 80098ba:	2210      	movs	r2, #16
 80098bc:	e758      	b.n	8009770 <UART_SetConfig+0x6c>
 80098be:	2202      	movs	r2, #2
 80098c0:	e756      	b.n	8009770 <UART_SetConfig+0x6c>
 80098c2:	2200      	movs	r2, #0
 80098c4:	e754      	b.n	8009770 <UART_SetConfig+0x6c>
 80098c6:	2210      	movs	r2, #16
 80098c8:	e752      	b.n	8009770 <UART_SetConfig+0x6c>
 80098ca:	2210      	movs	r2, #16
 80098cc:	e750      	b.n	8009770 <UART_SetConfig+0x6c>
 80098ce:	2202      	movs	r2, #2
 80098d0:	e74e      	b.n	8009770 <UART_SetConfig+0x6c>
 80098d2:	2200      	movs	r2, #0
 80098d4:	e74c      	b.n	8009770 <UART_SetConfig+0x6c>
 80098d6:	2210      	movs	r2, #16
 80098d8:	e74a      	b.n	8009770 <UART_SetConfig+0x6c>
 80098da:	2210      	movs	r2, #16
 80098dc:	e748      	b.n	8009770 <UART_SetConfig+0x6c>
    switch (clocksource)
 80098de:	2a08      	cmp	r2, #8
 80098e0:	f200 808d 	bhi.w	80099fe <UART_SetConfig+0x2fa>
 80098e4:	e8df f002 	tbb	[pc, r2]
 80098e8:	8b2b8b08 	.word	0x8b2b8b08
 80098ec:	8b8b8b28 	.word	0x8b8b8b28
 80098f0:	05          	.byte	0x05
 80098f1:	00          	.byte	0x00
 80098f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80098f6:	e004      	b.n	8009902 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80098f8:	f7fd fff6 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f000 8080 	beq.w	8009a02 <UART_SetConfig+0x2fe>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009902:	6862      	ldr	r2, [r4, #4]
 8009904:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8009908:	4283      	cmp	r3, r0
 800990a:	d87c      	bhi.n	8009a06 <UART_SetConfig+0x302>
 800990c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8009910:	d87b      	bhi.n	8009a0a <UART_SetConfig+0x306>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009912:	0e01      	lsrs	r1, r0, #24
 8009914:	0200      	lsls	r0, r0, #8
 8009916:	0853      	lsrs	r3, r2, #1
 8009918:	18c0      	adds	r0, r0, r3
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	f141 0100 	adc.w	r1, r1, #0
 8009922:	f7fb f923 	bl	8004b6c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009926:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800992a:	4b12      	ldr	r3, [pc, #72]	@ (8009974 <UART_SetConfig+0x270>)
 800992c:	429a      	cmp	r2, r3
 800992e:	d86e      	bhi.n	8009a0e <UART_SetConfig+0x30a>
          huart->Instance->BRR = usartdiv;
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	60d8      	str	r0, [r3, #12]
 8009934:	2000      	movs	r0, #0
 8009936:	e055      	b.n	80099e4 <UART_SetConfig+0x2e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8009938:	f7fd fbb8 	bl	80070ac <HAL_RCC_GetSysClockFreq>
        break;
 800993c:	e7de      	b.n	80098fc <UART_SetConfig+0x1f8>
        pclk = (uint32_t) HSI_VALUE;
 800993e:	480e      	ldr	r0, [pc, #56]	@ (8009978 <UART_SetConfig+0x274>)
 8009940:	e7df      	b.n	8009902 <UART_SetConfig+0x1fe>
    switch (clocksource)
 8009942:	2a08      	cmp	r2, #8
 8009944:	d865      	bhi.n	8009a12 <UART_SetConfig+0x30e>
 8009946:	e8df f002 	tbb	[pc, r2]
 800994a:	3319      	.short	0x3319
 800994c:	64366405 	.word	0x64366405
 8009950:	6464      	.short	0x6464
 8009952:	1d          	.byte	0x1d
 8009953:	00          	.byte	0x00
 8009954:	4808      	ldr	r0, [pc, #32]	@ (8009978 <UART_SetConfig+0x274>)
 8009956:	e015      	b.n	8009984 <UART_SetConfig+0x280>
 8009958:	efff69f3 	.word	0xefff69f3
 800995c:	40008000 	.word	0x40008000
 8009960:	40013800 	.word	0x40013800
 8009964:	40004400 	.word	0x40004400
 8009968:	40004800 	.word	0x40004800
 800996c:	40004c00 	.word	0x40004c00
 8009970:	40005000 	.word	0x40005000
 8009974:	000ffcff 	.word	0x000ffcff
 8009978:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 800997c:	f7fd ffb4 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009980:	2800      	cmp	r0, #0
 8009982:	d048      	beq.n	8009a16 <UART_SetConfig+0x312>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009984:	6862      	ldr	r2, [r4, #4]
 8009986:	0853      	lsrs	r3, r2, #1
 8009988:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800998c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009990:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009992:	f1a3 0110 	sub.w	r1, r3, #16
 8009996:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800999a:	4291      	cmp	r1, r2
 800999c:	d83d      	bhi.n	8009a1a <UART_SetConfig+0x316>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800999e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099a2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80099a6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	60d3      	str	r3, [r2, #12]
 80099ac:	2000      	movs	r0, #0
 80099ae:	e019      	b.n	80099e4 <UART_SetConfig+0x2e0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80099b0:	f7fd ffac 	bl	800790c <HAL_RCC_GetPCLK2Freq>
        break;
 80099b4:	e7e4      	b.n	8009980 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 80099b6:	f7fd fb79 	bl	80070ac <HAL_RCC_GetSysClockFreq>
        break;
 80099ba:	e7e1      	b.n	8009980 <UART_SetConfig+0x27c>
    switch (clocksource)
 80099bc:	481b      	ldr	r0, [pc, #108]	@ (8009a2c <UART_SetConfig+0x328>)
 80099be:	e002      	b.n	80099c6 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80099c0:	f7fd ff92 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80099c4:	b368      	cbz	r0, 8009a22 <UART_SetConfig+0x31e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80099cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80099d0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d2:	f1a0 0210 	sub.w	r2, r0, #16
 80099d6:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80099da:	429a      	cmp	r2, r3
 80099dc:	d823      	bhi.n	8009a26 <UART_SetConfig+0x322>
        huart->Instance->BRR = usartdiv;
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	60d8      	str	r0, [r3, #12]
 80099e2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	6663      	str	r3, [r4, #100]	@ 0x64
  huart->TxISR = NULL;
 80099e8:	66a3      	str	r3, [r4, #104]	@ 0x68
}
 80099ea:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80099ec:	f7fd ff8e 	bl	800790c <HAL_RCC_GetPCLK2Freq>
        break;
 80099f0:	e7e8      	b.n	80099c4 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 80099f2:	f7fd fb5b 	bl	80070ac <HAL_RCC_GetSysClockFreq>
        break;
 80099f6:	e7e5      	b.n	80099c4 <UART_SetConfig+0x2c0>
        pclk = (uint32_t) LSE_VALUE;
 80099f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80099fc:	e7e3      	b.n	80099c6 <UART_SetConfig+0x2c2>
    switch (clocksource)
 80099fe:	2001      	movs	r0, #1
 8009a00:	e7f0      	b.n	80099e4 <UART_SetConfig+0x2e0>
 8009a02:	2000      	movs	r0, #0
 8009a04:	e7ee      	b.n	80099e4 <UART_SetConfig+0x2e0>
        ret = HAL_ERROR;
 8009a06:	2001      	movs	r0, #1
 8009a08:	e7ec      	b.n	80099e4 <UART_SetConfig+0x2e0>
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	e7ea      	b.n	80099e4 <UART_SetConfig+0x2e0>
          ret = HAL_ERROR;
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7e8      	b.n	80099e4 <UART_SetConfig+0x2e0>
    switch (clocksource)
 8009a12:	2001      	movs	r0, #1
 8009a14:	e7e6      	b.n	80099e4 <UART_SetConfig+0x2e0>
 8009a16:	2000      	movs	r0, #0
 8009a18:	e7e4      	b.n	80099e4 <UART_SetConfig+0x2e0>
        ret = HAL_ERROR;
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	e7e2      	b.n	80099e4 <UART_SetConfig+0x2e0>
    switch (clocksource)
 8009a1e:	2001      	movs	r0, #1
 8009a20:	e7e0      	b.n	80099e4 <UART_SetConfig+0x2e0>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e7de      	b.n	80099e4 <UART_SetConfig+0x2e0>
        ret = HAL_ERROR;
 8009a26:	2001      	movs	r0, #1
 8009a28:	e7dc      	b.n	80099e4 <UART_SetConfig+0x2e0>
 8009a2a:	bf00      	nop
 8009a2c:	00f42400 	.word	0x00f42400

08009a30 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a32:	f013 0f01 	tst.w	r3, #1
 8009a36:	d006      	beq.n	8009a46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a38:	6802      	ldr	r2, [r0, #0]
 8009a3a:	6853      	ldr	r3, [r2, #4]
 8009a3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009a40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a42:	430b      	orrs	r3, r1
 8009a44:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a46:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a48:	f013 0f02 	tst.w	r3, #2
 8009a4c:	d006      	beq.n	8009a5c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a4e:	6802      	ldr	r2, [r0, #0]
 8009a50:	6853      	ldr	r3, [r2, #4]
 8009a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a56:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a5e:	f013 0f04 	tst.w	r3, #4
 8009a62:	d006      	beq.n	8009a72 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a64:	6802      	ldr	r2, [r0, #0]
 8009a66:	6853      	ldr	r3, [r2, #4]
 8009a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a6c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a72:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a74:	f013 0f08 	tst.w	r3, #8
 8009a78:	d006      	beq.n	8009a88 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a7a:	6802      	ldr	r2, [r0, #0]
 8009a7c:	6853      	ldr	r3, [r2, #4]
 8009a7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a82:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8009a84:	430b      	orrs	r3, r1
 8009a86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a88:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a8a:	f013 0f10 	tst.w	r3, #16
 8009a8e:	d006      	beq.n	8009a9e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a90:	6802      	ldr	r2, [r0, #0]
 8009a92:	6893      	ldr	r3, [r2, #8]
 8009a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a98:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009aa0:	f013 0f20 	tst.w	r3, #32
 8009aa4:	d006      	beq.n	8009ab4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aa6:	6802      	ldr	r2, [r0, #0]
 8009aa8:	6893      	ldr	r3, [r2, #8]
 8009aaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009aae:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ab4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ab6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009aba:	d00a      	beq.n	8009ad2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009abc:	6802      	ldr	r2, [r0, #0]
 8009abe:	6853      	ldr	r3, [r2, #4]
 8009ac0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ac4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ad0:	d00b      	beq.n	8009aea <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ad2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ad8:	d006      	beq.n	8009ae8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ada:	6802      	ldr	r2, [r0, #0]
 8009adc:	6853      	ldr	r3, [r2, #4]
 8009ade:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009ae2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	6053      	str	r3, [r2, #4]
}
 8009ae8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009aea:	6802      	ldr	r2, [r0, #0]
 8009aec:	6853      	ldr	r3, [r2, #4]
 8009aee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009af2:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8009af4:	430b      	orrs	r3, r1
 8009af6:	6053      	str	r3, [r2, #4]
 8009af8:	e7eb      	b.n	8009ad2 <UART_AdvFeatureConfig+0xa2>

08009afa <UART_WaitOnFlagUntilTimeout>:
{
 8009afa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009afe:	4605      	mov	r5, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	4616      	mov	r6, r2
 8009b04:	4699      	mov	r9, r3
 8009b06:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	69dc      	ldr	r4, [r3, #28]
 8009b0e:	ea37 0404 	bics.w	r4, r7, r4
 8009b12:	bf0c      	ite	eq
 8009b14:	2401      	moveq	r4, #1
 8009b16:	2400      	movne	r4, #0
 8009b18:	42b4      	cmp	r4, r6
 8009b1a:	d13d      	bne.n	8009b98 <UART_WaitOnFlagUntilTimeout+0x9e>
    if (Timeout != HAL_MAX_DELAY)
 8009b1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009b20:	d0f3      	beq.n	8009b0a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b22:	f7fc ffeb 	bl	8006afc <HAL_GetTick>
 8009b26:	eba0 0009 	sub.w	r0, r0, r9
 8009b2a:	4540      	cmp	r0, r8
 8009b2c:	d822      	bhi.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x7a>
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	d01f      	beq.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x7a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	f012 0f04 	tst.w	r2, #4
 8009b3c:	d0e5      	beq.n	8009b0a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8009b44:	d0e1      	beq.n	8009b0a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b4a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b4c:	682a      	ldr	r2, [r5, #0]
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b54:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b56:	682a      	ldr	r2, [r5, #0]
 8009b58:	6893      	ldr	r3, [r2, #8]
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009b60:	2320      	movs	r3, #32
 8009b62:	67ab      	str	r3, [r5, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009b64:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b66:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
          return HAL_TIMEOUT;
 8009b70:	2003      	movs	r0, #3
 8009b72:	e012      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b74:	682a      	ldr	r2, [r5, #0]
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b7c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	682a      	ldr	r2, [r5, #0]
 8009b80:	6893      	ldr	r3, [r2, #8]
 8009b82:	f023 0301 	bic.w	r3, r3, #1
 8009b86:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009b88:	2320      	movs	r3, #32
 8009b8a:	67ab      	str	r3, [r5, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	67eb      	str	r3, [r5, #124]	@ 0x7c
        __HAL_UNLOCK(huart);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
        return HAL_TIMEOUT;
 8009b94:	2003      	movs	r0, #3
 8009b96:	e000      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0xa0>
  return HAL_OK;
 8009b98:	2000      	movs	r0, #0
}
 8009b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009b9e <HAL_UART_Transmit>:
{
 8009b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d156      	bne.n	8009c5a <HAL_UART_Transmit+0xbc>
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009bb2:	2900      	cmp	r1, #0
 8009bb4:	d055      	beq.n	8009c62 <HAL_UART_Transmit+0xc4>
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	d055      	beq.n	8009c66 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8009bba:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d053      	beq.n	8009c6a <HAL_UART_Transmit+0xcc>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bce:	2321      	movs	r3, #33	@ 0x21
 8009bd0:	6783      	str	r3, [r0, #120]	@ 0x78
    tickstart = HAL_GetTick();
 8009bd2:	f7fc ff93 	bl	8006afc <HAL_GetTick>
 8009bd6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8009bd8:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009bdc:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009be6:	d005      	beq.n	8009bf4 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8009be8:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8009bec:	2300      	movs	r3, #0
 8009bee:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    while (huart->TxXferCount > 0U)
 8009bf2:	e014      	b.n	8009c1e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	b113      	cbz	r3, 8009bfe <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8009bf8:	f04f 0800 	mov.w	r8, #0
 8009bfc:	e7f6      	b.n	8009bec <HAL_UART_Transmit+0x4e>
      pdata16bits = (uint16_t *) pData;
 8009bfe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009c00:	2500      	movs	r5, #0
 8009c02:	e7f3      	b.n	8009bec <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c04:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8009c10:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8009c14:	b292      	uxth	r2, r2
 8009c16:	3a01      	subs	r2, #1
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009c1e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	b173      	cbz	r3, 8009c44 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c26:	9600      	str	r6, [sp, #0]
 8009c28:	463b      	mov	r3, r7
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2180      	movs	r1, #128	@ 0x80
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f7ff ff63 	bl	8009afa <UART_WaitOnFlagUntilTimeout>
 8009c34:	b9d8      	cbnz	r0, 8009c6e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8009c36:	2d00      	cmp	r5, #0
 8009c38:	d0e4      	beq.n	8009c04 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c3a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c42:	e7e5      	b.n	8009c10 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c44:	9600      	str	r6, [sp, #0]
 8009c46:	463b      	mov	r3, r7
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2140      	movs	r1, #64	@ 0x40
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f7ff ff54 	bl	8009afa <UART_WaitOnFlagUntilTimeout>
 8009c52:	b970      	cbnz	r0, 8009c72 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8009c54:	2320      	movs	r3, #32
 8009c56:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_OK;
 8009c58:	e000      	b.n	8009c5c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8009c5a:	2002      	movs	r0, #2
}
 8009c5c:	b002      	add	sp, #8
 8009c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009c62:	2001      	movs	r0, #1
 8009c64:	e7fa      	b.n	8009c5c <HAL_UART_Transmit+0xbe>
 8009c66:	2001      	movs	r0, #1
 8009c68:	e7f8      	b.n	8009c5c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8009c6a:	2002      	movs	r0, #2
 8009c6c:	e7f6      	b.n	8009c5c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8009c6e:	2003      	movs	r0, #3
 8009c70:	e7f4      	b.n	8009c5c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8009c72:	2003      	movs	r0, #3
 8009c74:	e7f2      	b.n	8009c5c <HAL_UART_Transmit+0xbe>

08009c76 <UART_CheckIdleState>:
{
 8009c76:	b530      	push	{r4, r5, lr}
 8009c78:	b083      	sub	sp, #12
 8009c7a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 8009c82:	f7fc ff3b 	bl	8006afc <HAL_GetTick>
 8009c86:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c88:	6822      	ldr	r2, [r4, #0]
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	f012 0f08 	tst.w	r2, #8
 8009c90:	d10d      	bne.n	8009cae <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f013 0f04 	tst.w	r3, #4
 8009c9a:	d116      	bne.n	8009cca <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8009c9c:	2320      	movs	r3, #32
 8009c9e:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ca0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(huart);
 8009ca6:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
}
 8009caa:	b003      	add	sp, #12
 8009cac:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff ff1c 	bl	8009afa <UART_WaitOnFlagUntilTimeout>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0e5      	beq.n	8009c92 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8009cc6:	2003      	movs	r0, #3
 8009cc8:	e7ef      	b.n	8009caa <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff ff0e 	bl	8009afa <UART_WaitOnFlagUntilTimeout>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0dc      	beq.n	8009c9c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8009ce2:	2003      	movs	r0, #3
 8009ce4:	e7e1      	b.n	8009caa <UART_CheckIdleState+0x34>

08009ce6 <HAL_UART_Init>:
  if (huart == NULL)
 8009ce6:	b368      	cbz	r0, 8009d44 <HAL_UART_Init+0x5e>
{
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009cec:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8009cee:	b303      	cbz	r3, 8009d32 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8009cf0:	2324      	movs	r3, #36	@ 0x24
 8009cf2:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	6813      	ldr	r3, [r2, #0]
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff fd00 	bl	8009704 <UART_SetConfig>
 8009d04:	2801      	cmp	r0, #1
 8009d06:	d013      	beq.n	8009d30 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009d0a:	b9bb      	cbnz	r3, 8009d3c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	6853      	ldr	r3, [r2, #4]
 8009d10:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8009d14:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	6893      	ldr	r3, [r2, #8]
 8009d1a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009d1e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f7ff ffa3 	bl	8009c76 <UART_CheckIdleState>
}
 8009d30:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009d32:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 8009d36:	f7fc fc45 	bl	80065c4 <HAL_UART_MspInit>
 8009d3a:	e7d9      	b.n	8009cf0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7ff fe77 	bl	8009a30 <UART_AdvFeatureConfig>
 8009d42:	e7e3      	b.n	8009d0c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8009d44:	2001      	movs	r0, #1
}
 8009d46:	4770      	bx	lr

08009d48 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d48:	4770      	bx	lr

08009d4a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	b08a      	sub	sp, #40	@ 0x28
 8009d4e:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009d50:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 8009d54:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 8009d58:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	9101      	str	r1, [sp, #4]
 8009d60:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d64:	9104      	str	r1, [sp, #16]
 8009d66:	9105      	str	r1, [sp, #20]
 8009d68:	9106      	str	r1, [sp, #24]
 8009d6a:	9107      	str	r1, [sp, #28]
 8009d6c:	9108      	str	r1, [sp, #32]
 8009d6e:	9109      	str	r1, [sp, #36]	@ 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8009d70:	233f      	movs	r3, #63	@ 0x3f
 8009d72:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8009d76:	238a      	movs	r3, #138	@ 0x8a
 8009d78:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8009d7c:	ab03      	add	r3, sp, #12
 8009d7e:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8009d80:	2303      	movs	r3, #3
 8009d82:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 8009d84:	ab01      	add	r3, sp, #4
 8009d86:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8009d88:	2307      	movs	r3, #7
 8009d8a:	9309      	str	r3, [sp, #36]	@ 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009d8c:	a804      	add	r0, sp, #16
 8009d8e:	f000 fbf9 	bl	800a584 <hci_send_req>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	db0f      	blt.n	8009db6 <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009d96:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009d9a:	b950      	cbnz	r0, 8009db2 <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8009d9c:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8009da0:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009da2:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 8009da6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009da8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009daa:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 8009dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009db0:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8009db2:	b00a      	add	sp, #40	@ 0x28
 8009db4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8009db6:	20ff      	movs	r0, #255	@ 0xff
 8009db8:	e7fb      	b.n	8009db2 <aci_gap_init_IDB05A1+0x68>

08009dba <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009dba:	b570      	push	{r4, r5, r6, lr}
 8009dbc:	b092      	sub	sp, #72	@ 0x48
 8009dbe:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009dc2:	f89d 4064 	ldrb.w	r4, [sp, #100]	@ 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009dc6:	192e      	adds	r6, r5, r4
 8009dc8:	360e      	adds	r6, #14
 8009dca:	2e28      	cmp	r6, #40	@ 0x28
 8009dcc:	d851      	bhi.n	8009e72 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8009dce:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009dd2:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009dd6:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8009dda:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8009dde:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009de2:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 8009de6:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009dea:	ae01      	add	r6, sp, #4
 8009dec:	462a      	mov	r2, r5
 8009dee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009df0:	a803      	add	r0, sp, #12
 8009df2:	f000 ff1b 	bl	800ac2c <memcpy>
  indx +=  LocalNameLen;
 8009df6:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8009dfa:	aa12      	add	r2, sp, #72	@ 0x48
 8009dfc:	fa52 f383 	uxtab	r3, r2, r3
 8009e00:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 8009e04:	3509      	adds	r5, #9
 8009e06:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009e08:	4622      	mov	r2, r4
 8009e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e0c:	1970      	adds	r0, r6, r5
 8009e0e:	f000 ff0d 	bl	800ac2c <memcpy>
  indx +=  ServiceUUIDLen;  
 8009e12:	442c      	add	r4, r5
 8009e14:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009e16:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8009e1a:	446b      	add	r3, sp
 8009e1c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 8009e20:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 8009e24:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009e26:	aa12      	add	r2, sp, #72	@ 0x48
 8009e28:	fa52 f383 	uxtab	r3, r2, r3
 8009e2c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 8009e30:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 8009e34:	3404      	adds	r4, #4
 8009e36:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009e38:	2100      	movs	r1, #0
 8009e3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009e3c:	910d      	str	r1, [sp, #52]	@ 0x34
 8009e3e:	910e      	str	r1, [sp, #56]	@ 0x38
 8009e40:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009e42:	9110      	str	r1, [sp, #64]	@ 0x40
 8009e44:	9111      	str	r1, [sp, #68]	@ 0x44
  rq.ogf = OGF_VENDOR_CMD;
 8009e46:	233f      	movs	r3, #63	@ 0x3f
 8009e48:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009e4c:	2383      	movs	r3, #131	@ 0x83
 8009e4e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
  rq.cparam = (void *)buffer;
 8009e52:	960e      	str	r6, [sp, #56]	@ 0x38
  rq.clen = indx;
 8009e54:	940f      	str	r4, [sp, #60]	@ 0x3c
  rq.rparam = &status;
 8009e56:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8009e5a:	9310      	str	r3, [sp, #64]	@ 0x40
  rq.rlen = 1;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9311      	str	r3, [sp, #68]	@ 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8009e60:	a80c      	add	r0, sp, #48	@ 0x30
 8009e62:	f000 fb8f 	bl	800a584 <hci_send_req>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	db05      	blt.n	8009e76 <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009e6a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
    return status;
  }

  return 0;
}
 8009e6e:	b012      	add	sp, #72	@ 0x48
 8009e70:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009e72:	2042      	movs	r0, #66	@ 0x42
 8009e74:	e7fb      	b.n	8009e6e <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 8009e76:	20ff      	movs	r0, #255	@ 0xff
 8009e78:	e7f9      	b.n	8009e6e <aci_gap_set_discoverable+0xb4>

08009e7a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009e7a:	b500      	push	{lr}
 8009e7c:	b08f      	sub	sp, #60	@ 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009e7e:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 8009e82:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009e86:	b161      	cbz	r1, 8009ea2 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009e88:	f8d2 c000 	ldr.w	ip, [r2]
 8009e8c:	6850      	ldr	r0, [r2, #4]
 8009e8e:	6891      	ldr	r1, [r2, #8]
 8009e90:	68d2      	ldr	r2, [r2, #12]
 8009e92:	f8cd c006 	str.w	ip, [sp, #6]
 8009e96:	f8cd 000a 	str.w	r0, [sp, #10]
 8009e9a:	f8cd 100e 	str.w	r1, [sp, #14]
 8009e9e:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009ea2:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009ea6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8009eaa:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 8009eae:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8009eb2:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 8009eb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009eb8:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 8009ebc:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009ec0:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	9108      	str	r1, [sp, #32]
 8009ec8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009eca:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ecc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ece:	910c      	str	r1, [sp, #48]	@ 0x30
 8009ed0:	910d      	str	r1, [sp, #52]	@ 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8009ed2:	233f      	movs	r3, #63	@ 0x3f
 8009ed4:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009ed8:	2386      	movs	r3, #134	@ 0x86
 8009eda:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
  rq.cparam = &cp;
 8009ede:	ab01      	add	r3, sp, #4
 8009ee0:	930a      	str	r3, [sp, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009ee2:	231a      	movs	r3, #26
 8009ee4:	930b      	str	r3, [sp, #44]	@ 0x2c
  rq.rparam = &status;
 8009ee6:	f10d 0303 	add.w	r3, sp, #3
 8009eea:	930c      	str	r3, [sp, #48]	@ 0x30
  rq.rlen = 1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	930d      	str	r3, [sp, #52]	@ 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009ef0:	a808      	add	r0, sp, #32
 8009ef2:	f000 fb47 	bl	800a584 <hci_send_req>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	db04      	blt.n	8009f04 <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009efa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 8009efe:	b00f      	add	sp, #60	@ 0x3c
 8009f00:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009f04:	20ff      	movs	r0, #255	@ 0xff
 8009f06:	e7fa      	b.n	8009efe <aci_gap_set_auth_requirement+0x84>

08009f08 <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 8009f08:	281f      	cmp	r0, #31
 8009f0a:	d829      	bhi.n	8009f60 <aci_gap_update_adv_data+0x58>
{
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	b090      	sub	sp, #64	@ 0x40
 8009f10:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 8009f12:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009f16:	4602      	mov	r2, r0
 8009f18:	f10d 0005 	add.w	r0, sp, #5
 8009f1c:	f000 fe86 	bl	800ac2c <memcpy>
  indx +=  AdvLen;
 8009f20:	3401      	adds	r4, #1
 8009f22:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f24:	2100      	movs	r1, #0
 8009f26:	910a      	str	r1, [sp, #40]	@ 0x28
 8009f28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009f2c:	910d      	str	r1, [sp, #52]	@ 0x34
 8009f2e:	910e      	str	r1, [sp, #56]	@ 0x38
 8009f30:	910f      	str	r1, [sp, #60]	@ 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 8009f32:	233f      	movs	r3, #63	@ 0x3f
 8009f34:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009f38:	238e      	movs	r3, #142	@ 0x8e
 8009f3a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
  rq.cparam = (void *)buffer;
 8009f3e:	ab01      	add	r3, sp, #4
 8009f40:	930c      	str	r3, [sp, #48]	@ 0x30
  rq.clen = indx;
 8009f42:	940d      	str	r4, [sp, #52]	@ 0x34
  rq.rparam = &status;
 8009f44:	f10d 0327 	add.w	r3, sp, #39	@ 0x27
 8009f48:	930e      	str	r3, [sp, #56]	@ 0x38
  rq.rlen = 1;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	930f      	str	r3, [sp, #60]	@ 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009f4e:	a80a      	add	r0, sp, #40	@ 0x28
 8009f50:	f000 fb18 	bl	800a584 <hci_send_req>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	db05      	blt.n	8009f64 <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8009f58:	f89d 0027 	ldrb.w	r0, [sp, #39]	@ 0x27
}
 8009f5c:	b010      	add	sp, #64	@ 0x40
 8009f5e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009f60:	2042      	movs	r0, #66	@ 0x42
}
 8009f62:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8009f64:	20ff      	movs	r0, #255	@ 0xff
 8009f66:	e7f9      	b.n	8009f5c <aci_gap_update_adv_data+0x54>

08009f68 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009f68:	b500      	push	{lr}
 8009f6a:	b089      	sub	sp, #36	@ 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	9102      	str	r1, [sp, #8]
 8009f70:	9103      	str	r1, [sp, #12]
 8009f72:	9104      	str	r1, [sp, #16]
 8009f74:	9105      	str	r1, [sp, #20]
 8009f76:	9106      	str	r1, [sp, #24]
 8009f78:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 8009f7a:	233f      	movs	r3, #63	@ 0x3f
 8009f7c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8009f80:	f240 1301 	movw	r3, #257	@ 0x101
 8009f84:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8009f88:	f10d 0307 	add.w	r3, sp, #7
 8009f8c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009f92:	a802      	add	r0, sp, #8
 8009f94:	f000 faf6 	bl	800a584 <hci_send_req>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	db04      	blt.n	8009fa6 <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009f9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009fa0:	b009      	add	sp, #36	@ 0x24
 8009fa2:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009fa6:	20ff      	movs	r0, #255	@ 0xff
 8009fa8:	e7fa      	b.n	8009fa0 <aci_gatt_init+0x38>

08009faa <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009faa:	b570      	push	{r4, r5, r6, lr}
 8009fac:	b08c      	sub	sp, #48	@ 0x30
 8009fae:	4616      	mov	r6, r2
 8009fb0:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 8009fb2:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 8009fb6:	2801      	cmp	r0, #1
 8009fb8:	d038      	beq.n	800a02c <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8009fba:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	f10d 0001 	add.w	r0, sp, #1
 8009fc2:	f000 fe33 	bl	800ac2c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8009fc6:	f104 0331 	add.w	r3, r4, #49	@ 0x31
 8009fca:	446b      	add	r3, sp
 8009fcc:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 8009fd0:	f104 0332 	add.w	r3, r4, #50	@ 0x32
 8009fd4:	eb0d 0203 	add.w	r2, sp, r3
 8009fd8:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 8009fdc:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009fde:	ab05      	add	r3, sp, #20
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009fe6:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fea:	9106      	str	r1, [sp, #24]
 8009fec:	9107      	str	r1, [sp, #28]
 8009fee:	9108      	str	r1, [sp, #32]
 8009ff0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ff2:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ff4:	910b      	str	r1, [sp, #44]	@ 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 8009ff6:	223f      	movs	r2, #63	@ 0x3f
 8009ff8:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8009ffc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a000:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 800a004:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 800a008:	9409      	str	r4, [sp, #36]	@ 0x24
  rq.rparam = &resp;
 800a00a:	930a      	str	r3, [sp, #40]	@ 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a00c:	2303      	movs	r3, #3
 800a00e:	930b      	str	r3, [sp, #44]	@ 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800a010:	a806      	add	r0, sp, #24
 800a012:	f000 fab7 	bl	800a584 <hci_send_req>
 800a016:	2800      	cmp	r0, #0
 800a018:	db0a      	blt.n	800a030 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a01a:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800a01e:	b918      	cbnz	r0, 800a028 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800a020:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 800a024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a026:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800a028:	b00c      	add	sp, #48	@ 0x30
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 800a02c:	2402      	movs	r4, #2
 800a02e:	e7c5      	b.n	8009fbc <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 800a030:	20ff      	movs	r0, #255	@ 0xff
 800a032:	e7f9      	b.n	800a028 <aci_gatt_add_serv+0x7e>

0800a034 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a034:	b530      	push	{r4, r5, lr}
 800a036:	b08f      	sub	sp, #60	@ 0x3c
 800a038:	460c      	mov	r4, r1
 800a03a:	4611      	mov	r1, r2
 800a03c:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a03e:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800a042:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 800a046:	2c01      	cmp	r4, #1
 800a048:	d056      	beq.n	800a0f8 <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a04a:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a04c:	4622      	mov	r2, r4
 800a04e:	f10d 0003 	add.w	r0, sp, #3
 800a052:	f000 fdeb 	bl	800ac2c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800a056:	f104 033b 	add.w	r3, r4, #59	@ 0x3b
 800a05a:	eb0d 0203 	add.w	r2, sp, r3
 800a05e:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 800a062:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800a066:	446b      	add	r3, sp
 800a068:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 800a06c:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 800a070:	f104 033d 	add.w	r3, r4, #61	@ 0x3d
 800a074:	446b      	add	r3, sp
 800a076:	f89d 204c 	ldrb.w	r2, [sp, #76]	@ 0x4c
 800a07a:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800a07e:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800a082:	446b      	add	r3, sp
 800a084:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 800a088:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 800a08c:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 800a090:	446b      	add	r3, sp
 800a092:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 800a096:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 800a09a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800a09e:	446b      	add	r3, sp
 800a0a0:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 800a0a4:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 800a0a8:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a0aa:	ab07      	add	r3, sp, #28
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a0b2:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a0b6:	9108      	str	r1, [sp, #32]
 800a0b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ba:	910a      	str	r1, [sp, #40]	@ 0x28
 800a0bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a0be:	910c      	str	r1, [sp, #48]	@ 0x30
 800a0c0:	910d      	str	r1, [sp, #52]	@ 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800a0c2:	223f      	movs	r2, #63	@ 0x3f
 800a0c4:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800a0c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a0cc:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
  rq.cparam = (void *)buffer;
 800a0d0:	f8cd d028 	str.w	sp, [sp, #40]	@ 0x28
  rq.clen = indx;
 800a0d4:	940b      	str	r4, [sp, #44]	@ 0x2c
  rq.rparam = &resp;
 800a0d6:	930c      	str	r3, [sp, #48]	@ 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	930d      	str	r3, [sp, #52]	@ 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800a0dc:	a808      	add	r0, sp, #32
 800a0de:	f000 fa51 	bl	800a584 <hci_send_req>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	db0a      	blt.n	800a0fc <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a0e6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a0ea:	b918      	cbnz	r0, 800a0f4 <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800a0ec:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 800a0f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0f2:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800a0f4:	b00f      	add	sp, #60	@ 0x3c
 800a0f6:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 800a0f8:	2402      	movs	r4, #2
 800a0fa:	e7a7      	b.n	800a04c <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 800a0fc:	20ff      	movs	r0, #255	@ 0xff
 800a0fe:	e7f9      	b.n	800a0f4 <aci_gatt_add_char+0xc0>

0800a100 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a100:	2b7a      	cmp	r3, #122	@ 0x7a
 800a102:	d831      	bhi.n	800a168 <aci_gatt_update_char_value+0x68>
{
 800a104:	b510      	push	{r4, lr}
 800a106:	b0a8      	sub	sp, #160	@ 0xa0
 800a108:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800a10a:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800a10e:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 800a112:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 800a116:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a11a:	461a      	mov	r2, r3
 800a11c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800a11e:	f10d 000a 	add.w	r0, sp, #10
 800a122:	f000 fd83 	bl	800ac2c <memcpy>
  indx +=  charValueLen;
 800a126:	3406      	adds	r4, #6
 800a128:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a12a:	2100      	movs	r1, #0
 800a12c:	9122      	str	r1, [sp, #136]	@ 0x88
 800a12e:	9123      	str	r1, [sp, #140]	@ 0x8c
 800a130:	9124      	str	r1, [sp, #144]	@ 0x90
 800a132:	9125      	str	r1, [sp, #148]	@ 0x94
 800a134:	9126      	str	r1, [sp, #152]	@ 0x98
 800a136:	9127      	str	r1, [sp, #156]	@ 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800a138:	233f      	movs	r3, #63	@ 0x3f
 800a13a:	f8ad 3088 	strh.w	r3, [sp, #136]	@ 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800a13e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a142:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
  rq.cparam = (void *)buffer;
 800a146:	ab01      	add	r3, sp, #4
 800a148:	9324      	str	r3, [sp, #144]	@ 0x90
  rq.clen = indx;
 800a14a:	9425      	str	r4, [sp, #148]	@ 0x94
  rq.rparam = &status;
 800a14c:	f10d 0387 	add.w	r3, sp, #135	@ 0x87
 800a150:	9326      	str	r3, [sp, #152]	@ 0x98
  rq.rlen = 1;
 800a152:	2301      	movs	r3, #1
 800a154:	9327      	str	r3, [sp, #156]	@ 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800a156:	a822      	add	r0, sp, #136	@ 0x88
 800a158:	f000 fa14 	bl	800a584 <hci_send_req>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	db05      	blt.n	800a16c <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a160:	f89d 0087 	ldrb.w	r0, [sp, #135]	@ 0x87
    return status;
  }

  return 0;
}
 800a164:	b028      	add	sp, #160	@ 0xa0
 800a166:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a168:	2042      	movs	r0, #66	@ 0x42
}
 800a16a:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800a16c:	20ff      	movs	r0, #255	@ 0xff
 800a16e:	e7f9      	b.n	800a164 <aci_gatt_update_char_value+0x64>

0800a170 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800a170:	b500      	push	{lr}
 800a172:	b089      	sub	sp, #36	@ 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800a174:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800a178:	2100      	movs	r1, #0
 800a17a:	9102      	str	r1, [sp, #8]
 800a17c:	9103      	str	r1, [sp, #12]
 800a17e:	9104      	str	r1, [sp, #16]
 800a180:	9105      	str	r1, [sp, #20]
 800a182:	9106      	str	r1, [sp, #24]
 800a184:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 800a186:	233f      	movs	r3, #63	@ 0x3f
 800a188:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800a18c:	f240 1327 	movw	r3, #295	@ 0x127
 800a190:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 800a194:	ab01      	add	r3, sp, #4
 800a196:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800a198:	2302      	movs	r3, #2
 800a19a:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 800a19c:	f10d 0303 	add.w	r3, sp, #3
 800a1a0:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 800a1a6:	a802      	add	r0, sp, #8
 800a1a8:	f000 f9ec 	bl	800a584 <hci_send_req>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	db04      	blt.n	800a1ba <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 800a1b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800a1b4:	b009      	add	sp, #36	@ 0x24
 800a1b6:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 800a1ba:	20ff      	movs	r0, #255	@ 0xff
 800a1bc:	e7fa      	b.n	800a1b4 <aci_gatt_allow_read+0x44>

0800a1be <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	b0a8      	sub	sp, #160	@ 0xa0
 800a1c2:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800a1c4:	297e      	cmp	r1, #126	@ 0x7e
 800a1c6:	d829      	bhi.n	800a21c <aci_hal_write_config_data+0x5e>
 800a1c8:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 800a1ca:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 800a1ce:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	f10d 0006 	add.w	r0, sp, #6
 800a1d8:	f000 fd28 	bl	800ac2c <memcpy>
  indx +=  len;
 800a1dc:	3402      	adds	r4, #2
 800a1de:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	9122      	str	r1, [sp, #136]	@ 0x88
 800a1e4:	9123      	str	r1, [sp, #140]	@ 0x8c
 800a1e6:	9124      	str	r1, [sp, #144]	@ 0x90
 800a1e8:	9125      	str	r1, [sp, #148]	@ 0x94
 800a1ea:	9126      	str	r1, [sp, #152]	@ 0x98
 800a1ec:	9127      	str	r1, [sp, #156]	@ 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800a1ee:	233f      	movs	r3, #63	@ 0x3f
 800a1f0:	f8ad 3088 	strh.w	r3, [sp, #136]	@ 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
  rq.cparam = (void *)buffer;
 800a1fa:	ab01      	add	r3, sp, #4
 800a1fc:	9324      	str	r3, [sp, #144]	@ 0x90
  rq.clen = indx;
 800a1fe:	9425      	str	r4, [sp, #148]	@ 0x94
  rq.rparam = &status;
 800a200:	f10d 0387 	add.w	r3, sp, #135	@ 0x87
 800a204:	9326      	str	r3, [sp, #152]	@ 0x98
  rq.rlen = 1;
 800a206:	2301      	movs	r3, #1
 800a208:	9327      	str	r3, [sp, #156]	@ 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800a20a:	a822      	add	r0, sp, #136	@ 0x88
 800a20c:	f000 f9ba 	bl	800a584 <hci_send_req>
 800a210:	2800      	cmp	r0, #0
 800a212:	db05      	blt.n	800a220 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a214:	f89d 0087 	ldrb.w	r0, [sp, #135]	@ 0x87
}
 800a218:	b028      	add	sp, #160	@ 0xa0
 800a21a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a21c:	2042      	movs	r0, #66	@ 0x42
 800a21e:	e7fb      	b.n	800a218 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a220:	20ff      	movs	r0, #255	@ 0xff
 800a222:	e7f9      	b.n	800a218 <aci_hal_write_config_data+0x5a>

0800a224 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	b0a9      	sub	sp, #164	@ 0xa4
 800a228:	460c      	mov	r4, r1
 800a22a:	4616      	mov	r6, r2
 800a22c:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a22e:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a232:	2100      	movs	r1, #0
 800a234:	9122      	str	r1, [sp, #136]	@ 0x88
 800a236:	9123      	str	r1, [sp, #140]	@ 0x8c
 800a238:	9124      	str	r1, [sp, #144]	@ 0x90
 800a23a:	9125      	str	r1, [sp, #148]	@ 0x94
 800a23c:	9126      	str	r1, [sp, #152]	@ 0x98
 800a23e:	9127      	str	r1, [sp, #156]	@ 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800a240:	233f      	movs	r3, #63	@ 0x3f
 800a242:	f8ad 3088 	strh.w	r3, [sp, #136]	@ 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a246:	230d      	movs	r3, #13
 800a248:	f8ad 308a 	strh.w	r3, [sp, #138]	@ 0x8a
  rq.cparam = &cp;
 800a24c:	ab21      	add	r3, sp, #132	@ 0x84
 800a24e:	9324      	str	r3, [sp, #144]	@ 0x90
  rq.clen = sizeof(cp);
 800a250:	2301      	movs	r3, #1
 800a252:	9325      	str	r3, [sp, #148]	@ 0x94
  rq.rparam = &rp;
 800a254:	ab01      	add	r3, sp, #4
 800a256:	9326      	str	r3, [sp, #152]	@ 0x98
  rq.rlen = sizeof(rp);
 800a258:	2380      	movs	r3, #128	@ 0x80
 800a25a:	9327      	str	r3, [sp, #156]	@ 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a25c:	a822      	add	r0, sp, #136	@ 0x88
 800a25e:	f000 f991 	bl	800a584 <hci_send_req>
 800a262:	2800      	cmp	r0, #0
 800a264:	db16      	blt.n	800a294 <aci_hal_read_config_data+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800a266:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800a26a:	b977      	cbnz	r7, 800a28a <aci_hal_read_config_data+0x66>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 800a26c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a26e:	f103 3cff 	add.w	ip, r3, #4294967295
 800a272:	fa5f fc8c 	uxtb.w	ip, ip
 800a276:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a27a:	45a4      	cmp	ip, r4
 800a27c:	d908      	bls.n	800a290 <aci_hal_read_config_data+0x6c>
 800a27e:	4622      	mov	r2, r4
 800a280:	f10d 0105 	add.w	r1, sp, #5
 800a284:	4628      	mov	r0, r5
 800a286:	f000 fcd1 	bl	800ac2c <memcpy>
  
  return 0;
}
 800a28a:	4638      	mov	r0, r7
 800a28c:	b029      	add	sp, #164	@ 0xa4
 800a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a290:	4662      	mov	r2, ip
 800a292:	e7f5      	b.n	800a280 <aci_hal_read_config_data+0x5c>
    return BLE_STATUS_TIMEOUT;
 800a294:	27ff      	movs	r7, #255	@ 0xff
 800a296:	e7f8      	b.n	800a28a <aci_hal_read_config_data+0x66>

0800a298 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a298:	b500      	push	{lr}
 800a29a:	b089      	sub	sp, #36	@ 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a29c:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800a2a0:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	9102      	str	r1, [sp, #8]
 800a2a8:	9103      	str	r1, [sp, #12]
 800a2aa:	9104      	str	r1, [sp, #16]
 800a2ac:	9105      	str	r1, [sp, #20]
 800a2ae:	9106      	str	r1, [sp, #24]
 800a2b0:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800a2b2:	233f      	movs	r3, #63	@ 0x3f
 800a2b4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a2b8:	230f      	movs	r3, #15
 800a2ba:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800a2be:	ab01      	add	r3, sp, #4
 800a2c0:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800a2c6:	f10d 0303 	add.w	r3, sp, #3
 800a2ca:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a2d0:	a802      	add	r0, sp, #8
 800a2d2:	f000 f957 	bl	800a584 <hci_send_req>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	db04      	blt.n	800a2e4 <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a2da:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800a2de:	b009      	add	sp, #36	@ 0x24
 800a2e0:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a2e4:	20ff      	movs	r0, #255	@ 0xff
 800a2e6:	e7fa      	b.n	800a2de <aci_hal_set_tx_power_level+0x46>

0800a2e8 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a2e8:	b530      	push	{r4, r5, lr}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a2f0:	ab02      	add	r3, sp, #8
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	f10d 030a 	add.w	r3, sp, #10
 800a2f8:	f10d 020e 	add.w	r2, sp, #14
 800a2fc:	a903      	add	r1, sp, #12
 800a2fe:	f10d 000f 	add.w	r0, sp, #15
 800a302:	f000 f837 	bl	800a374 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a306:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800a30a:	d112      	bne.n	800a332 <getBlueNRGVersion+0x4a>
    *hwVersion = hci_revision >> 8;
 800a30c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a310:	0a1b      	lsrs	r3, r3, #8
 800a312:	702b      	strb	r3, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a314:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8023      	strh	r3, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a31e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a322:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
 800a326:	430b      	orrs	r3, r1
 800a328:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a32a:	f002 020f 	and.w	r2, r2, #15
 800a32e:	4313      	orrs	r3, r2
 800a330:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800a332:	b005      	add	sp, #20
 800a334:	bd30      	pop	{r4, r5, pc}

0800a336 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a336:	b500      	push	{lr}
 800a338:	b089      	sub	sp, #36	@ 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a33a:	2100      	movs	r1, #0
 800a33c:	9102      	str	r1, [sp, #8]
 800a33e:	9103      	str	r1, [sp, #12]
 800a340:	9104      	str	r1, [sp, #16]
 800a342:	9105      	str	r1, [sp, #20]
 800a344:	9106      	str	r1, [sp, #24]
 800a346:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800a348:	2303      	movs	r3, #3
 800a34a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800a34e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800a352:	f10d 0307 	add.w	r3, sp, #7
 800a356:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800a358:	2301      	movs	r3, #1
 800a35a:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a35c:	a802      	add	r0, sp, #8
 800a35e:	f000 f911 	bl	800a584 <hci_send_req>
 800a362:	2800      	cmp	r0, #0
 800a364:	db04      	blt.n	800a370 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800a366:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a36a:	b009      	add	sp, #36	@ 0x24
 800a36c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a370:	20ff      	movs	r0, #255	@ 0xff
 800a372:	e7fa      	b.n	800a36a <hci_reset+0x34>

0800a374 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	b08a      	sub	sp, #40	@ 0x28
 800a37a:	4680      	mov	r8, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	4616      	mov	r6, r2
 800a380:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a382:	ac01      	add	r4, sp, #4
 800a384:	2100      	movs	r1, #0
 800a386:	9101      	str	r1, [sp, #4]
 800a388:	9102      	str	r1, [sp, #8]
 800a38a:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a38e:	9104      	str	r1, [sp, #16]
 800a390:	9105      	str	r1, [sp, #20]
 800a392:	9106      	str	r1, [sp, #24]
 800a394:	9107      	str	r1, [sp, #28]
 800a396:	9108      	str	r1, [sp, #32]
 800a398:	9109      	str	r1, [sp, #36]	@ 0x24
  rq.ogf = OGF_INFO_PARAM;
 800a39a:	2304      	movs	r3, #4
 800a39c:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800a3a6:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a3a8:	2309      	movs	r3, #9
 800a3aa:	9309      	str	r3, [sp, #36]	@ 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a3ac:	a804      	add	r0, sp, #16
 800a3ae:	f000 f8e9 	bl	800a584 <hci_send_req>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	db16      	blt.n	800a3e4 <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a3b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a3ba:	b980      	cbnz	r0, 800a3de <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800a3bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3c0:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800a3c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a3c8:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a3ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a3ce:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a3d0:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800a3d4:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a3d6:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800a3da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3dc:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800a3de:	b00a      	add	sp, #40	@ 0x28
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800a3e4:	20ff      	movs	r0, #255	@ 0xff
 800a3e6:	e7fa      	b.n	800a3de <hci_le_read_local_version+0x6a>

0800a3e8 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	b091      	sub	sp, #68	@ 0x44
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	2620      	movs	r6, #32
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f000 fbe3 	bl	800abc4 <memset>
  scan_resp_cp.length = length;
 800a3fe:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a402:	4622      	mov	r2, r4
 800a404:	2c1f      	cmp	r4, #31
 800a406:	bf28      	it	cs
 800a408:	221f      	movcs	r2, #31
 800a40a:	4629      	mov	r1, r5
 800a40c:	f10d 0009 	add.w	r0, sp, #9
 800a410:	f000 fc0c 	bl	800ac2c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a414:	2100      	movs	r1, #0
 800a416:	910a      	str	r1, [sp, #40]	@ 0x28
 800a418:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a41a:	910c      	str	r1, [sp, #48]	@ 0x30
 800a41c:	910d      	str	r1, [sp, #52]	@ 0x34
 800a41e:	910e      	str	r1, [sp, #56]	@ 0x38
 800a420:	910f      	str	r1, [sp, #60]	@ 0x3c
  rq.ogf = OGF_LE_CTL;
 800a422:	2308      	movs	r3, #8
 800a424:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a428:	2309      	movs	r3, #9
 800a42a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
  rq.cparam = &scan_resp_cp;
 800a42e:	970c      	str	r7, [sp, #48]	@ 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a430:	960d      	str	r6, [sp, #52]	@ 0x34
  rq.rparam = &status;
 800a432:	f10d 0307 	add.w	r3, sp, #7
 800a436:	930e      	str	r3, [sp, #56]	@ 0x38
  rq.rlen = 1;
 800a438:	2301      	movs	r3, #1
 800a43a:	930f      	str	r3, [sp, #60]	@ 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a43c:	a80a      	add	r0, sp, #40	@ 0x28
 800a43e:	f000 f8a1 	bl	800a584 <hci_send_req>
 800a442:	2800      	cmp	r0, #0
 800a444:	db03      	blt.n	800a44e <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800a446:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a44a:	b011      	add	sp, #68	@ 0x44
 800a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800a44e:	20ff      	movs	r0, #255	@ 0xff
 800a450:	e7fb      	b.n	800a44a <hci_le_set_scan_resp_data+0x62>

0800a452 <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a452:	7a03      	ldrb	r3, [r0, #8]
 800a454:	2b04      	cmp	r3, #4
 800a456:	d107      	bne.n	800a468 <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a458:	7a82      	ldrb	r2, [r0, #10]
 800a45a:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 800a45e:	3b03      	subs	r3, #3
 800a460:	429a      	cmp	r2, r3
 800a462:	d103      	bne.n	800a46c <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 800a464:	2000      	movs	r0, #0
 800a466:	4770      	bx	lr
    return 1; /* Incorrect type */
 800a468:	2001      	movs	r0, #1
 800a46a:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 800a46c:	2002      	movs	r0, #2
}
 800a46e:	4770      	bx	lr

0800a470 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a470:	b510      	push	{r4, lr}
 800a472:	b0a2      	sub	sp, #136	@ 0x88
 800a474:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a476:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800a47a:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 800a47e:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 800a482:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 800a486:	2101      	movs	r1, #1
 800a488:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a48c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800a490:	b2d1      	uxtb	r1, r2
 800a492:	f8ad 0009 	strh.w	r0, [sp, #9]
 800a496:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a49a:	4619      	mov	r1, r3
 800a49c:	a803      	add	r0, sp, #12
 800a49e:	f000 fbc5 	bl	800ac2c <memcpy>
  
  if (hciContext.io.Send)
 800a4a2:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <send_cmd+0x44>)
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	b113      	cbz	r3, 800a4ae <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a4a8:	1d21      	adds	r1, r4, #4
 800a4aa:	a802      	add	r0, sp, #8
 800a4ac:	4798      	blx	r3
  }
}
 800a4ae:	b022      	add	sp, #136	@ 0x88
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000574 	.word	0x20000574

0800a4b8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a4bc:	e00a      	b.n	800a4d4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a4be:	4c09      	ldr	r4, [pc, #36]	@ (800a4e4 <free_event_list+0x2c>)
 800a4c0:	a901      	add	r1, sp, #4
 800a4c2:	f104 0020 	add.w	r0, r4, #32
 800a4c6:	f000 f997 	bl	800a7f8 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a4ca:	9901      	ldr	r1, [sp, #4]
 800a4cc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a4d0:	f000 f97b 	bl	800a7ca <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a4d4:	4804      	ldr	r0, [pc, #16]	@ (800a4e8 <free_event_list+0x30>)
 800a4d6:	f000 f9b1 	bl	800a83c <list_get_size>
 800a4da:	2801      	cmp	r0, #1
 800a4dc:	ddef      	ble.n	800a4be <free_event_list+0x6>
  }
}
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000574 	.word	0x20000574
 800a4e8:	2000059c 	.word	0x2000059c

0800a4ec <move_list>:
{
 800a4ec:	b530      	push	{r4, r5, lr}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 800a4f4:	e007      	b.n	800a506 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800a4f6:	a901      	add	r1, sp, #4
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f98e 	bl	800a81a <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a4fe:	9901      	ldr	r1, [sp, #4]
 800a500:	4628      	mov	r0, r5
 800a502:	f000 f956 	bl	800a7b2 <list_insert_head>
  while (!list_is_empty(src_list))
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f947 	bl	800a79a <list_is_empty>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0f2      	beq.n	800a4f6 <move_list+0xa>
}
 800a510:	b003      	add	sp, #12
 800a512:	bd30      	pop	{r4, r5, pc}

0800a514 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a514:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800a516:	b108      	cbz	r0, 800a51c <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a518:	4a12      	ldr	r2, [pc, #72]	@ (800a564 <hci_init+0x50>)
 800a51a:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a51c:	4c11      	ldr	r4, [pc, #68]	@ (800a564 <hci_init+0x50>)
 800a51e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a522:	f000 f937 	bl	800a794 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a526:	f104 0020 	add.w	r0, r4, #32
 800a52a:	f000 f933 	bl	800a794 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a52e:	f7fb f883 	bl	8005638 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a532:	2400      	movs	r4, #0
 800a534:	e00a      	b.n	800a54c <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a536:	480b      	ldr	r0, [pc, #44]	@ (800a564 <hci_init+0x50>)
 800a538:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a53c:	218c      	movs	r1, #140	@ 0x8c
 800a53e:	fb01 3104 	mla	r1, r1, r4, r3
 800a542:	3028      	adds	r0, #40	@ 0x28
 800a544:	f000 f941 	bl	800a7ca <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a548:	3401      	adds	r4, #1
 800a54a:	b2e4      	uxtb	r4, r4
 800a54c:	2c04      	cmp	r4, #4
 800a54e:	d9f2      	bls.n	800a536 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a550:	4b04      	ldr	r3, [pc, #16]	@ (800a564 <hci_init+0x50>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	b10b      	cbz	r3, 800a55a <hci_init+0x46>
 800a556:	2000      	movs	r0, #0
 800a558:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a55a:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <hci_init+0x50>)
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	b103      	cbz	r3, 800a562 <hci_init+0x4e>
 800a560:	4798      	blx	r3
}
 800a562:	bd10      	pop	{r4, pc}
 800a564:	20000574 	.word	0x20000574

0800a568 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a568:	6802      	ldr	r2, [r0, #0]
 800a56a:	4b05      	ldr	r3, [pc, #20]	@ (800a580 <hci_register_io_bus+0x18>)
 800a56c:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800a56e:	68c2      	ldr	r2, [r0, #12]
 800a570:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800a572:	6902      	ldr	r2, [r0, #16]
 800a574:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a576:	6982      	ldr	r2, [r0, #24]
 800a578:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800a57a:	6882      	ldr	r2, [r0, #8]
 800a57c:	609a      	str	r2, [r3, #8]
}
 800a57e:	4770      	bx	lr
 800a580:	20000574 	.word	0x20000574

0800a584 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	4605      	mov	r5, r0
 800a58a:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a58c:	8843      	ldrh	r3, [r0, #2]
 800a58e:	8802      	ldrh	r2, [r0, #0]
 800a590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a594:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a598:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a59e:	a801      	add	r0, sp, #4
 800a5a0:	f000 f8f8 	bl	800a794 <list_init_head>

  free_event_list();
 800a5a4:	f7ff ff88 	bl	800a4b8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a5a8:	68ab      	ldr	r3, [r5, #8]
 800a5aa:	7b2a      	ldrb	r2, [r5, #12]
 800a5ac:	8869      	ldrh	r1, [r5, #2]
 800a5ae:	8828      	ldrh	r0, [r5, #0]
 800a5b0:	f7ff ff5e 	bl	800a470 <send_cmd>
  
  if (async)
 800a5b4:	2c00      	cmp	r4, #0
 800a5b6:	f040 8087 	bne.w	800a6c8 <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a5ba:	f7fc fa9f 	bl	8006afc <HAL_GetTick>
 800a5be:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a5c0:	f7fc fa9c 	bl	8006afc <HAL_GetTick>
 800a5c4:	1b00      	subs	r0, r0, r4
 800a5c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a5ca:	d822      	bhi.n	800a612 <hci_send_req+0x8e>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a5cc:	483f      	ldr	r0, [pc, #252]	@ (800a6cc <hci_send_req+0x148>)
 800a5ce:	f000 f8e4 	bl	800a79a <list_is_empty>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d1f4      	bne.n	800a5c0 <hci_send_req+0x3c>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a5d6:	a903      	add	r1, sp, #12
 800a5d8:	483c      	ldr	r0, [pc, #240]	@ (800a6cc <hci_send_req+0x148>)
 800a5da:	f000 f90d 	bl	800a7f8 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a5de:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a5e0:	7a1a      	ldrb	r2, [r3, #8]
 800a5e2:	2a04      	cmp	r2, #4
 800a5e4:	d128      	bne.n	800a638 <hci_send_req+0xb4>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a5e6:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a5ea:	f893 0088 	ldrb.w	r0, [r3, #136]	@ 0x88
 800a5ee:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 800a5f0:	7a5a      	ldrb	r2, [r3, #9]
 800a5f2:	2a10      	cmp	r2, #16
 800a5f4:	d00d      	beq.n	800a612 <hci_send_req+0x8e>
 800a5f6:	d819      	bhi.n	800a62c <hci_send_req+0xa8>
 800a5f8:	2a0e      	cmp	r2, #14
 800a5fa:	d037      	beq.n	800a66c <hci_send_req+0xe8>
 800a5fc:	2a0f      	cmp	r2, #15
 800a5fe:	d11b      	bne.n	800a638 <hci_send_req+0xb4>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800a600:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800a604:	42b2      	cmp	r2, r6
 800a606:	d104      	bne.n	800a612 <hci_send_req+0x8e>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a608:	686a      	ldr	r2, [r5, #4]
 800a60a:	2a0f      	cmp	r2, #15
 800a60c:	d024      	beq.n	800a658 <hci_send_req+0xd4>
          if (cs->status) {
 800a60e:	7adb      	ldrb	r3, [r3, #11]
 800a610:	b193      	cbz	r3, 800a638 <hci_send_req+0xb4>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a612:	9903      	ldr	r1, [sp, #12]
 800a614:	b111      	cbz	r1, 800a61c <hci_send_req+0x98>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a616:	482e      	ldr	r0, [pc, #184]	@ (800a6d0 <hci_send_req+0x14c>)
 800a618:	f000 f8cb 	bl	800a7b2 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a61c:	a901      	add	r1, sp, #4
 800a61e:	482b      	ldr	r0, [pc, #172]	@ (800a6cc <hci_send_req+0x148>)
 800a620:	f7ff ff64 	bl	800a4ec <move_list>

  return -1;
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800a628:	b004      	add	sp, #16
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 800a62c:	2a3e      	cmp	r2, #62	@ 0x3e
 800a62e:	d103      	bne.n	800a638 <hci_send_req+0xb4>
        if (me->subevent != r->event)
 800a630:	7ad9      	ldrb	r1, [r3, #11]
 800a632:	686a      	ldr	r2, [r5, #4]
 800a634:	4291      	cmp	r1, r2
 800a636:	d034      	beq.n	800a6a2 <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a638:	4825      	ldr	r0, [pc, #148]	@ (800a6d0 <hci_send_req+0x14c>)
 800a63a:	f000 f8ae 	bl	800a79a <list_is_empty>
 800a63e:	b120      	cbz	r0, 800a64a <hci_send_req+0xc6>
 800a640:	4822      	ldr	r0, [pc, #136]	@ (800a6cc <hci_send_req+0x148>)
 800a642:	f000 f8aa 	bl	800a79a <list_is_empty>
 800a646:	2800      	cmp	r0, #0
 800a648:	d137      	bne.n	800a6ba <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a64a:	9903      	ldr	r1, [sp, #12]
 800a64c:	a801      	add	r0, sp, #4
 800a64e:	f000 f8bc 	bl	800a7ca <list_insert_tail>
      hciReadPacket=NULL;
 800a652:	2300      	movs	r3, #0
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	e7b0      	b.n	800a5ba <hci_send_req+0x36>
        r->rlen = MIN(len, r->rlen);
 800a658:	696b      	ldr	r3, [r5, #20]
 800a65a:	42a3      	cmp	r3, r4
 800a65c:	bf28      	it	cs
 800a65e:	4623      	movcs	r3, r4
 800a660:	461a      	mov	r2, r3
 800a662:	616b      	str	r3, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a664:	6928      	ldr	r0, [r5, #16]
 800a666:	f000 fae1 	bl	800ac2c <memcpy>
        goto done;
 800a66a:	e00d      	b.n	800a688 <hci_send_req+0x104>
        if (cc->opcode != opcode)
 800a66c:	899a      	ldrh	r2, [r3, #12]
 800a66e:	42b2      	cmp	r2, r6
 800a670:	d1cf      	bne.n	800a612 <hci_send_req+0x8e>
        len -= EVT_CMD_COMPLETE_SIZE;
 800a672:	1f82      	subs	r2, r0, #6
        r->rlen = MIN(len, r->rlen);
 800a674:	6969      	ldr	r1, [r5, #20]
 800a676:	428a      	cmp	r2, r1
 800a678:	bf28      	it	cs
 800a67a:	460a      	movcs	r2, r1
 800a67c:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a67e:	f103 010e 	add.w	r1, r3, #14
 800a682:	6928      	ldr	r0, [r5, #16]
 800a684:	f000 fad2 	bl	800ac2c <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a688:	4c12      	ldr	r4, [pc, #72]	@ (800a6d4 <hci_send_req+0x150>)
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a690:	f000 f88f 	bl	800a7b2 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a694:	a901      	add	r1, sp, #4
 800a696:	f104 0020 	add.w	r0, r4, #32
 800a69a:	f7ff ff27 	bl	800a4ec <move_list>
  return 0;
 800a69e:	2000      	movs	r0, #0
 800a6a0:	e7c2      	b.n	800a628 <hci_send_req+0xa4>
        len -= 1;
 800a6a2:	1f02      	subs	r2, r0, #4
        r->rlen = MIN(len, r->rlen);
 800a6a4:	6969      	ldr	r1, [r5, #20]
 800a6a6:	428a      	cmp	r2, r1
 800a6a8:	bf28      	it	cs
 800a6aa:	460a      	movcs	r2, r1
 800a6ac:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a6ae:	f103 010c 	add.w	r1, r3, #12
 800a6b2:	6928      	ldr	r0, [r5, #16]
 800a6b4:	f000 faba 	bl	800ac2c <memcpy>
        goto done;
 800a6b8:	e7e6      	b.n	800a688 <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a6ba:	9903      	ldr	r1, [sp, #12]
 800a6bc:	4804      	ldr	r0, [pc, #16]	@ (800a6d0 <hci_send_req+0x14c>)
 800a6be:	f000 f884 	bl	800a7ca <list_insert_tail>
      hciReadPacket=NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	e778      	b.n	800a5ba <hci_send_req+0x36>
    return 0;
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e7ad      	b.n	800a628 <hci_send_req+0xa4>
 800a6cc:	20000594 	.word	0x20000594
 800a6d0:	2000059c 	.word	0x2000059c
 800a6d4:	20000574 	.word	0x20000574

0800a6d8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a6e0:	e006      	b.n	800a6f0 <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a6e2:	9801      	ldr	r0, [sp, #4]
 800a6e4:	3008      	adds	r0, #8
 800a6e6:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a6e8:	9901      	ldr	r1, [sp, #4]
 800a6ea:	4809      	ldr	r0, [pc, #36]	@ (800a710 <hci_user_evt_proc+0x38>)
 800a6ec:	f000 f86d 	bl	800a7ca <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a6f0:	4808      	ldr	r0, [pc, #32]	@ (800a714 <hci_user_evt_proc+0x3c>)
 800a6f2:	f000 f852 	bl	800a79a <list_is_empty>
 800a6f6:	b948      	cbnz	r0, 800a70c <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a6f8:	4c07      	ldr	r4, [pc, #28]	@ (800a718 <hci_user_evt_proc+0x40>)
 800a6fa:	a901      	add	r1, sp, #4
 800a6fc:	f104 0020 	add.w	r0, r4, #32
 800a700:	f000 f87a 	bl	800a7f8 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800a704:	69e3      	ldr	r3, [r4, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1eb      	bne.n	800a6e2 <hci_user_evt_proc+0xa>
 800a70a:	e7ed      	b.n	800a6e8 <hci_user_evt_proc+0x10>
  }
}
 800a70c:	b002      	add	sp, #8
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	2000059c 	.word	0x2000059c
 800a714:	20000594 	.word	0x20000594
 800a718:	20000574 	.word	0x20000574

0800a71c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a71c:	b530      	push	{r4, r5, lr}
 800a71e:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a724:	4818      	ldr	r0, [pc, #96]	@ (800a788 <hci_notify_asynch_evt+0x6c>)
 800a726:	f000 f838 	bl	800a79a <list_is_empty>
 800a72a:	b118      	cbz	r0, 800a734 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 800a72c:	2401      	movs	r4, #1
  }
  return ret;

}
 800a72e:	4620      	mov	r0, r4
 800a730:	b003      	add	sp, #12
 800a732:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a734:	4c15      	ldr	r4, [pc, #84]	@ (800a78c <hci_notify_asynch_evt+0x70>)
 800a736:	a901      	add	r1, sp, #4
 800a738:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a73c:	f000 f85c 	bl	800a7f8 <list_remove_head>
    if (hciContext.io.Receive)
 800a740:	68e3      	ldr	r3, [r4, #12]
 800a742:	b1fb      	cbz	r3, 800a784 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a744:	2180      	movs	r1, #128	@ 0x80
 800a746:	9801      	ldr	r0, [sp, #4]
 800a748:	3008      	adds	r0, #8
 800a74a:	4798      	blx	r3
      if (data_len > 0)
 800a74c:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800a750:	d012      	beq.n	800a778 <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 800a752:	9d01      	ldr	r5, [sp, #4]
 800a754:	f885 0088 	strb.w	r0, [r5, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a758:	4628      	mov	r0, r5
 800a75a:	f7ff fe7a 	bl	800a452 <verify_packet>
 800a75e:	4604      	mov	r4, r0
 800a760:	b920      	cbnz	r0, 800a76c <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a762:	4629      	mov	r1, r5
 800a764:	480a      	ldr	r0, [pc, #40]	@ (800a790 <hci_notify_asynch_evt+0x74>)
 800a766:	f000 f830 	bl	800a7ca <list_insert_tail>
 800a76a:	e7e0      	b.n	800a72e <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a76c:	4629      	mov	r1, r5
 800a76e:	4806      	ldr	r0, [pc, #24]	@ (800a788 <hci_notify_asynch_evt+0x6c>)
 800a770:	f000 f81f 	bl	800a7b2 <list_insert_head>
  int32_t ret = 0;
 800a774:	2400      	movs	r4, #0
 800a776:	e7da      	b.n	800a72e <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a778:	9901      	ldr	r1, [sp, #4]
 800a77a:	4803      	ldr	r0, [pc, #12]	@ (800a788 <hci_notify_asynch_evt+0x6c>)
 800a77c:	f000 f819 	bl	800a7b2 <list_insert_head>
  int32_t ret = 0;
 800a780:	2400      	movs	r4, #0
 800a782:	e7d4      	b.n	800a72e <hci_notify_asynch_evt+0x12>
 800a784:	2400      	movs	r4, #0
  return ret;
 800a786:	e7d2      	b.n	800a72e <hci_notify_asynch_evt+0x12>
 800a788:	2000059c 	.word	0x2000059c
 800a78c:	20000574 	.word	0x20000574
 800a790:	20000594 	.word	0x20000594

0800a794 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800a794:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800a796:	6040      	str	r0, [r0, #4]
}
 800a798:	4770      	bx	lr

0800a79a <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a79a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a79e:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a7a0:	6802      	ldr	r2, [r0, #0]
 800a7a2:	4282      	cmp	r2, r0
 800a7a4:	d003      	beq.n	800a7ae <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 800a7a6:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a8:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800a7ac:	4770      	bx	lr
    return_value = 1;
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	e7fa      	b.n	800a7a8 <list_is_empty+0xe>

0800a7b2 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b6:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a7b8:	6802      	ldr	r2, [r0, #0]
 800a7ba:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800a7bc:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800a7be:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800a7c0:	680a      	ldr	r2, [r1, #0]
 800a7c2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c4:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a7c8:	4770      	bx	lr

0800a7ca <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ca:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ce:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a7d0:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800a7d2:	6842      	ldr	r2, [r0, #4]
 800a7d4:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800a7d6:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800a7d8:	684a      	ldr	r2, [r1, #4]
 800a7da:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7dc:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a7e0:	4770      	bx	lr

0800a7e2 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e6:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a7e8:	6841      	ldr	r1, [r0, #4]
 800a7ea:	6803      	ldr	r3, [r0, #0]
 800a7ec:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 800a7ee:	6841      	ldr	r1, [r0, #4]
 800a7f0:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f2:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a7f6:	4770      	bx	lr

0800a7f8 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a800:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a802:	6800      	ldr	r0, [r0, #0]
 800a804:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800a806:	f7ff ffec 	bl	800a7e2 <list_remove_node>
  (*node)->next = NULL;
 800a80a:	6822      	ldr	r2, [r4, #0]
 800a80c:	2300      	movs	r3, #0
 800a80e:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800a810:	6822      	ldr	r2, [r4, #0]
 800a812:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a814:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a818:	bd38      	pop	{r3, r4, r5, pc}

0800a81a <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a81a:	b538      	push	{r3, r4, r5, lr}
 800a81c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a81e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a822:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a824:	6840      	ldr	r0, [r0, #4]
 800a826:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800a828:	f7ff ffdb 	bl	800a7e2 <list_remove_node>
  (*node)->next = NULL;
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	2300      	movs	r3, #0
 800a830:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a836:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a83a:	bd38      	pop	{r3, r4, r5, pc}

0800a83c <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a83c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a83e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a842:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a844:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800a846:	2000      	movs	r0, #0
  while (temp != listHead)
 800a848:	e001      	b.n	800a84e <list_get_size+0x12>
  {
    size++;
 800a84a:	3001      	adds	r0, #1
    temp = temp->next;		
 800a84c:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d1fb      	bne.n	800a84a <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a852:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800a856:	4770      	bx	lr

0800a858 <atan>:
 800a858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	4bbc      	ldr	r3, [pc, #752]	@ (800ab50 <atan+0x2f8>)
 800a85e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a862:	429e      	cmp	r6, r3
 800a864:	4604      	mov	r4, r0
 800a866:	460d      	mov	r5, r1
 800a868:	468b      	mov	fp, r1
 800a86a:	d918      	bls.n	800a89e <atan+0x46>
 800a86c:	4bb9      	ldr	r3, [pc, #740]	@ (800ab54 <atan+0x2fc>)
 800a86e:	429e      	cmp	r6, r3
 800a870:	d801      	bhi.n	800a876 <atan+0x1e>
 800a872:	d109      	bne.n	800a888 <atan+0x30>
 800a874:	b140      	cbz	r0, 800a888 <atan+0x30>
 800a876:	4622      	mov	r2, r4
 800a878:	462b      	mov	r3, r5
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f9 fcfd 	bl	800427c <__adddf3>
 800a882:	4604      	mov	r4, r0
 800a884:	460d      	mov	r5, r1
 800a886:	e006      	b.n	800a896 <atan+0x3e>
 800a888:	f1bb 0f00 	cmp.w	fp, #0
 800a88c:	f340 8123 	ble.w	800aad6 <atan+0x27e>
 800a890:	a593      	add	r5, pc, #588	@ (adr r5, 800aae0 <atan+0x288>)
 800a892:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	4bae      	ldr	r3, [pc, #696]	@ (800ab58 <atan+0x300>)
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	d811      	bhi.n	800a8c8 <atan+0x70>
 800a8a4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	d80a      	bhi.n	800a8c2 <atan+0x6a>
 800a8ac:	a38e      	add	r3, pc, #568	@ (adr r3, 800aae8 <atan+0x290>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f9 fce3 	bl	800427c <__adddf3>
 800a8b6:	4ba9      	ldr	r3, [pc, #676]	@ (800ab5c <atan+0x304>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f7fa f925 	bl	8004b08 <__aeabi_dcmpgt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1e9      	bne.n	800a896 <atan+0x3e>
 800a8c2:	f04f 3aff 	mov.w	sl, #4294967295
 800a8c6:	e027      	b.n	800a918 <atan+0xc0>
 800a8c8:	f000 f956 	bl	800ab78 <fabs>
 800a8cc:	4ba4      	ldr	r3, [pc, #656]	@ (800ab60 <atan+0x308>)
 800a8ce:	429e      	cmp	r6, r3
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	f200 80b8 	bhi.w	800aa48 <atan+0x1f0>
 800a8d8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a8dc:	429e      	cmp	r6, r3
 800a8de:	f200 809c 	bhi.w	800aa1a <atan+0x1c2>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	f7f9 fcc9 	bl	800427c <__adddf3>
 800a8ea:	4b9c      	ldr	r3, [pc, #624]	@ (800ab5c <atan+0x304>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f7f9 fcc3 	bl	8004278 <__aeabi_dsub>
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	f7f9 fcbc 	bl	800427c <__adddf3>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f9 ff96 	bl	800483c <__aeabi_ddiv>
 800a910:	f04f 0a00 	mov.w	sl, #0
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f9 fe62 	bl	80045e8 <__aeabi_dmul>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4680      	mov	r8, r0
 800a92a:	4689      	mov	r9, r1
 800a92c:	f7f9 fe5c 	bl	80045e8 <__aeabi_dmul>
 800a930:	a36f      	add	r3, pc, #444	@ (adr r3, 800aaf0 <atan+0x298>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	f7f9 fe55 	bl	80045e8 <__aeabi_dmul>
 800a93e:	a36e      	add	r3, pc, #440	@ (adr r3, 800aaf8 <atan+0x2a0>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f9 fc9a 	bl	800427c <__adddf3>
 800a948:	4632      	mov	r2, r6
 800a94a:	463b      	mov	r3, r7
 800a94c:	f7f9 fe4c 	bl	80045e8 <__aeabi_dmul>
 800a950:	a36b      	add	r3, pc, #428	@ (adr r3, 800ab00 <atan+0x2a8>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f9 fc91 	bl	800427c <__adddf3>
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	f7f9 fe43 	bl	80045e8 <__aeabi_dmul>
 800a962:	a369      	add	r3, pc, #420	@ (adr r3, 800ab08 <atan+0x2b0>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f9 fc88 	bl	800427c <__adddf3>
 800a96c:	4632      	mov	r2, r6
 800a96e:	463b      	mov	r3, r7
 800a970:	f7f9 fe3a 	bl	80045e8 <__aeabi_dmul>
 800a974:	a366      	add	r3, pc, #408	@ (adr r3, 800ab10 <atan+0x2b8>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f9 fc7f 	bl	800427c <__adddf3>
 800a97e:	4632      	mov	r2, r6
 800a980:	463b      	mov	r3, r7
 800a982:	f7f9 fe31 	bl	80045e8 <__aeabi_dmul>
 800a986:	a364      	add	r3, pc, #400	@ (adr r3, 800ab18 <atan+0x2c0>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f9 fc76 	bl	800427c <__adddf3>
 800a990:	4642      	mov	r2, r8
 800a992:	464b      	mov	r3, r9
 800a994:	f7f9 fe28 	bl	80045e8 <__aeabi_dmul>
 800a998:	a361      	add	r3, pc, #388	@ (adr r3, 800ab20 <atan+0x2c8>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	4680      	mov	r8, r0
 800a9a0:	4689      	mov	r9, r1
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f9 fe1f 	bl	80045e8 <__aeabi_dmul>
 800a9aa:	a35f      	add	r3, pc, #380	@ (adr r3, 800ab28 <atan+0x2d0>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f9 fc62 	bl	8004278 <__aeabi_dsub>
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	f7f9 fe16 	bl	80045e8 <__aeabi_dmul>
 800a9bc:	a35c      	add	r3, pc, #368	@ (adr r3, 800ab30 <atan+0x2d8>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	f7f9 fc59 	bl	8004278 <__aeabi_dsub>
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	f7f9 fe0d 	bl	80045e8 <__aeabi_dmul>
 800a9ce:	a35a      	add	r3, pc, #360	@ (adr r3, 800ab38 <atan+0x2e0>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f9 fc50 	bl	8004278 <__aeabi_dsub>
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	f7f9 fe04 	bl	80045e8 <__aeabi_dmul>
 800a9e0:	a357      	add	r3, pc, #348	@ (adr r3, 800ab40 <atan+0x2e8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f9 fc47 	bl	8004278 <__aeabi_dsub>
 800a9ea:	4632      	mov	r2, r6
 800a9ec:	463b      	mov	r3, r7
 800a9ee:	f7f9 fdfb 	bl	80045e8 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	f7f9 fc3f 	bl	800427c <__adddf3>
 800a9fe:	4622      	mov	r2, r4
 800aa00:	462b      	mov	r3, r5
 800aa02:	f7f9 fdf1 	bl	80045e8 <__aeabi_dmul>
 800aa06:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	d144      	bne.n	800aa9a <atan+0x242>
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f9 fc30 	bl	8004278 <__aeabi_dsub>
 800aa18:	e733      	b.n	800a882 <atan+0x2a>
 800aa1a:	4b50      	ldr	r3, [pc, #320]	@ (800ab5c <atan+0x304>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f7f9 fc2b 	bl	8004278 <__aeabi_dsub>
 800aa22:	4b4e      	ldr	r3, [pc, #312]	@ (800ab5c <atan+0x304>)
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7f9 fc25 	bl	800427c <__adddf3>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	4630      	mov	r0, r6
 800aa38:	4639      	mov	r1, r7
 800aa3a:	f7f9 feff 	bl	800483c <__aeabi_ddiv>
 800aa3e:	f04f 0a01 	mov.w	sl, #1
 800aa42:	4604      	mov	r4, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	e767      	b.n	800a918 <atan+0xc0>
 800aa48:	4b46      	ldr	r3, [pc, #280]	@ (800ab64 <atan+0x30c>)
 800aa4a:	429e      	cmp	r6, r3
 800aa4c:	d21a      	bcs.n	800aa84 <atan+0x22c>
 800aa4e:	4b46      	ldr	r3, [pc, #280]	@ (800ab68 <atan+0x310>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	f7f9 fc11 	bl	8004278 <__aeabi_dsub>
 800aa56:	4b44      	ldr	r3, [pc, #272]	@ (800ab68 <atan+0x310>)
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7f9 fdc1 	bl	80045e8 <__aeabi_dmul>
 800aa66:	4b3d      	ldr	r3, [pc, #244]	@ (800ab5c <atan+0x304>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f7f9 fc07 	bl	800427c <__adddf3>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4630      	mov	r0, r6
 800aa74:	4639      	mov	r1, r7
 800aa76:	f7f9 fee1 	bl	800483c <__aeabi_ddiv>
 800aa7a:	f04f 0a02 	mov.w	sl, #2
 800aa7e:	4604      	mov	r4, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	e749      	b.n	800a918 <atan+0xc0>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	2000      	movs	r0, #0
 800aa8a:	4938      	ldr	r1, [pc, #224]	@ (800ab6c <atan+0x314>)
 800aa8c:	f7f9 fed6 	bl	800483c <__aeabi_ddiv>
 800aa90:	f04f 0a03 	mov.w	sl, #3
 800aa94:	4604      	mov	r4, r0
 800aa96:	460d      	mov	r5, r1
 800aa98:	e73e      	b.n	800a918 <atan+0xc0>
 800aa9a:	4b35      	ldr	r3, [pc, #212]	@ (800ab70 <atan+0x318>)
 800aa9c:	4e35      	ldr	r6, [pc, #212]	@ (800ab74 <atan+0x31c>)
 800aa9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f9 fbe7 	bl	8004278 <__aeabi_dsub>
 800aaaa:	4622      	mov	r2, r4
 800aaac:	462b      	mov	r3, r5
 800aaae:	f7f9 fbe3 	bl	8004278 <__aeabi_dsub>
 800aab2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aabe:	f7f9 fbdb 	bl	8004278 <__aeabi_dsub>
 800aac2:	f1bb 0f00 	cmp.w	fp, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	460d      	mov	r5, r1
 800aaca:	f6bf aee4 	bge.w	800a896 <atan+0x3e>
 800aace:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aad2:	461d      	mov	r5, r3
 800aad4:	e6df      	b.n	800a896 <atan+0x3e>
 800aad6:	a51c      	add	r5, pc, #112	@ (adr r5, 800ab48 <atan+0x2f0>)
 800aad8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aadc:	e6db      	b.n	800a896 <atan+0x3e>
 800aade:	bf00      	nop
 800aae0:	54442d18 	.word	0x54442d18
 800aae4:	3ff921fb 	.word	0x3ff921fb
 800aae8:	8800759c 	.word	0x8800759c
 800aaec:	7e37e43c 	.word	0x7e37e43c
 800aaf0:	e322da11 	.word	0xe322da11
 800aaf4:	3f90ad3a 	.word	0x3f90ad3a
 800aaf8:	24760deb 	.word	0x24760deb
 800aafc:	3fa97b4b 	.word	0x3fa97b4b
 800ab00:	a0d03d51 	.word	0xa0d03d51
 800ab04:	3fb10d66 	.word	0x3fb10d66
 800ab08:	c54c206e 	.word	0xc54c206e
 800ab0c:	3fb745cd 	.word	0x3fb745cd
 800ab10:	920083ff 	.word	0x920083ff
 800ab14:	3fc24924 	.word	0x3fc24924
 800ab18:	5555550d 	.word	0x5555550d
 800ab1c:	3fd55555 	.word	0x3fd55555
 800ab20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ab24:	bfa2b444 	.word	0xbfa2b444
 800ab28:	52defd9a 	.word	0x52defd9a
 800ab2c:	3fadde2d 	.word	0x3fadde2d
 800ab30:	af749a6d 	.word	0xaf749a6d
 800ab34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ab38:	fe231671 	.word	0xfe231671
 800ab3c:	3fbc71c6 	.word	0x3fbc71c6
 800ab40:	9998ebc4 	.word	0x9998ebc4
 800ab44:	3fc99999 	.word	0x3fc99999
 800ab48:	54442d18 	.word	0x54442d18
 800ab4c:	bff921fb 	.word	0xbff921fb
 800ab50:	440fffff 	.word	0x440fffff
 800ab54:	7ff00000 	.word	0x7ff00000
 800ab58:	3fdbffff 	.word	0x3fdbffff
 800ab5c:	3ff00000 	.word	0x3ff00000
 800ab60:	3ff2ffff 	.word	0x3ff2ffff
 800ab64:	40038000 	.word	0x40038000
 800ab68:	3ff80000 	.word	0x3ff80000
 800ab6c:	bff00000 	.word	0xbff00000
 800ab70:	0800b7a0 	.word	0x0800b7a0
 800ab74:	0800b7c0 	.word	0x0800b7c0

0800ab78 <fabs>:
 800ab78:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4770      	bx	lr

0800ab80 <siprintf>:
 800ab80:	b40e      	push	{r1, r2, r3}
 800ab82:	b510      	push	{r4, lr}
 800ab84:	b09d      	sub	sp, #116	@ 0x74
 800ab86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ab88:	9002      	str	r0, [sp, #8]
 800ab8a:	9006      	str	r0, [sp, #24]
 800ab8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab90:	480a      	ldr	r0, [pc, #40]	@ (800abbc <siprintf+0x3c>)
 800ab92:	9107      	str	r1, [sp, #28]
 800ab94:	9104      	str	r1, [sp, #16]
 800ab96:	490a      	ldr	r1, [pc, #40]	@ (800abc0 <siprintf+0x40>)
 800ab98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9c:	9105      	str	r1, [sp, #20]
 800ab9e:	2400      	movs	r4, #0
 800aba0:	a902      	add	r1, sp, #8
 800aba2:	6800      	ldr	r0, [r0, #0]
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aba8:	f000 f9a2 	bl	800aef0 <_svfiprintf_r>
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	701c      	strb	r4, [r3, #0]
 800abb0:	b01d      	add	sp, #116	@ 0x74
 800abb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb6:	b003      	add	sp, #12
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	2000002c 	.word	0x2000002c
 800abc0:	ffff0208 	.word	0xffff0208

0800abc4 <memset>:
 800abc4:	4402      	add	r2, r0
 800abc6:	4603      	mov	r3, r0
 800abc8:	4293      	cmp	r3, r2
 800abca:	d100      	bne.n	800abce <memset+0xa>
 800abcc:	4770      	bx	lr
 800abce:	f803 1b01 	strb.w	r1, [r3], #1
 800abd2:	e7f9      	b.n	800abc8 <memset+0x4>

0800abd4 <__errno>:
 800abd4:	4b01      	ldr	r3, [pc, #4]	@ (800abdc <__errno+0x8>)
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	2000002c 	.word	0x2000002c

0800abe0 <__libc_init_array>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	4d0d      	ldr	r5, [pc, #52]	@ (800ac18 <__libc_init_array+0x38>)
 800abe4:	4c0d      	ldr	r4, [pc, #52]	@ (800ac1c <__libc_init_array+0x3c>)
 800abe6:	1b64      	subs	r4, r4, r5
 800abe8:	10a4      	asrs	r4, r4, #2
 800abea:	2600      	movs	r6, #0
 800abec:	42a6      	cmp	r6, r4
 800abee:	d109      	bne.n	800ac04 <__libc_init_array+0x24>
 800abf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ac20 <__libc_init_array+0x40>)
 800abf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ac24 <__libc_init_array+0x44>)
 800abf4:	f000 fc64 	bl	800b4c0 <_init>
 800abf8:	1b64      	subs	r4, r4, r5
 800abfa:	10a4      	asrs	r4, r4, #2
 800abfc:	2600      	movs	r6, #0
 800abfe:	42a6      	cmp	r6, r4
 800ac00:	d105      	bne.n	800ac0e <__libc_init_array+0x2e>
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac08:	4798      	blx	r3
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	e7ee      	b.n	800abec <__libc_init_array+0xc>
 800ac0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac12:	4798      	blx	r3
 800ac14:	3601      	adds	r6, #1
 800ac16:	e7f2      	b.n	800abfe <__libc_init_array+0x1e>
 800ac18:	0800b820 	.word	0x0800b820
 800ac1c:	0800b820 	.word	0x0800b820
 800ac20:	0800b820 	.word	0x0800b820
 800ac24:	0800b824 	.word	0x0800b824

0800ac28 <__retarget_lock_acquire_recursive>:
 800ac28:	4770      	bx	lr

0800ac2a <__retarget_lock_release_recursive>:
 800ac2a:	4770      	bx	lr

0800ac2c <memcpy>:
 800ac2c:	440a      	add	r2, r1
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac34:	d100      	bne.n	800ac38 <memcpy+0xc>
 800ac36:	4770      	bx	lr
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac42:	4291      	cmp	r1, r2
 800ac44:	d1f9      	bne.n	800ac3a <memcpy+0xe>
 800ac46:	bd10      	pop	{r4, pc}

0800ac48 <_free_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4605      	mov	r5, r0
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	d041      	beq.n	800acd4 <_free_r+0x8c>
 800ac50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac54:	1f0c      	subs	r4, r1, #4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bfb8      	it	lt
 800ac5a:	18e4      	addlt	r4, r4, r3
 800ac5c:	f000 f8e0 	bl	800ae20 <__malloc_lock>
 800ac60:	4a1d      	ldr	r2, [pc, #116]	@ (800acd8 <_free_r+0x90>)
 800ac62:	6813      	ldr	r3, [r2, #0]
 800ac64:	b933      	cbnz	r3, 800ac74 <_free_r+0x2c>
 800ac66:	6063      	str	r3, [r4, #4]
 800ac68:	6014      	str	r4, [r2, #0]
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac70:	f000 b8dc 	b.w	800ae2c <__malloc_unlock>
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	d908      	bls.n	800ac8a <_free_r+0x42>
 800ac78:	6820      	ldr	r0, [r4, #0]
 800ac7a:	1821      	adds	r1, r4, r0
 800ac7c:	428b      	cmp	r3, r1
 800ac7e:	bf01      	itttt	eq
 800ac80:	6819      	ldreq	r1, [r3, #0]
 800ac82:	685b      	ldreq	r3, [r3, #4]
 800ac84:	1809      	addeq	r1, r1, r0
 800ac86:	6021      	streq	r1, [r4, #0]
 800ac88:	e7ed      	b.n	800ac66 <_free_r+0x1e>
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	b10b      	cbz	r3, 800ac94 <_free_r+0x4c>
 800ac90:	42a3      	cmp	r3, r4
 800ac92:	d9fa      	bls.n	800ac8a <_free_r+0x42>
 800ac94:	6811      	ldr	r1, [r2, #0]
 800ac96:	1850      	adds	r0, r2, r1
 800ac98:	42a0      	cmp	r0, r4
 800ac9a:	d10b      	bne.n	800acb4 <_free_r+0x6c>
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	4401      	add	r1, r0
 800aca0:	1850      	adds	r0, r2, r1
 800aca2:	4283      	cmp	r3, r0
 800aca4:	6011      	str	r1, [r2, #0]
 800aca6:	d1e0      	bne.n	800ac6a <_free_r+0x22>
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	6053      	str	r3, [r2, #4]
 800acae:	4408      	add	r0, r1
 800acb0:	6010      	str	r0, [r2, #0]
 800acb2:	e7da      	b.n	800ac6a <_free_r+0x22>
 800acb4:	d902      	bls.n	800acbc <_free_r+0x74>
 800acb6:	230c      	movs	r3, #12
 800acb8:	602b      	str	r3, [r5, #0]
 800acba:	e7d6      	b.n	800ac6a <_free_r+0x22>
 800acbc:	6820      	ldr	r0, [r4, #0]
 800acbe:	1821      	adds	r1, r4, r0
 800acc0:	428b      	cmp	r3, r1
 800acc2:	bf04      	itt	eq
 800acc4:	6819      	ldreq	r1, [r3, #0]
 800acc6:	685b      	ldreq	r3, [r3, #4]
 800acc8:	6063      	str	r3, [r4, #4]
 800acca:	bf04      	itt	eq
 800accc:	1809      	addeq	r1, r1, r0
 800acce:	6021      	streq	r1, [r4, #0]
 800acd0:	6054      	str	r4, [r2, #4]
 800acd2:	e7ca      	b.n	800ac6a <_free_r+0x22>
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	bf00      	nop
 800acd8:	200009a4 	.word	0x200009a4

0800acdc <sbrk_aligned>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	4e0f      	ldr	r6, [pc, #60]	@ (800ad1c <sbrk_aligned+0x40>)
 800ace0:	460c      	mov	r4, r1
 800ace2:	6831      	ldr	r1, [r6, #0]
 800ace4:	4605      	mov	r5, r0
 800ace6:	b911      	cbnz	r1, 800acee <sbrk_aligned+0x12>
 800ace8:	f000 fba4 	bl	800b434 <_sbrk_r>
 800acec:	6030      	str	r0, [r6, #0]
 800acee:	4621      	mov	r1, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 fb9f 	bl	800b434 <_sbrk_r>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	d103      	bne.n	800ad02 <sbrk_aligned+0x26>
 800acfa:	f04f 34ff 	mov.w	r4, #4294967295
 800acfe:	4620      	mov	r0, r4
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
 800ad02:	1cc4      	adds	r4, r0, #3
 800ad04:	f024 0403 	bic.w	r4, r4, #3
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d0f8      	beq.n	800acfe <sbrk_aligned+0x22>
 800ad0c:	1a21      	subs	r1, r4, r0
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 fb90 	bl	800b434 <_sbrk_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	d1f2      	bne.n	800acfe <sbrk_aligned+0x22>
 800ad18:	e7ef      	b.n	800acfa <sbrk_aligned+0x1e>
 800ad1a:	bf00      	nop
 800ad1c:	200009a0 	.word	0x200009a0

0800ad20 <_malloc_r>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	1ccd      	adds	r5, r1, #3
 800ad26:	f025 0503 	bic.w	r5, r5, #3
 800ad2a:	3508      	adds	r5, #8
 800ad2c:	2d0c      	cmp	r5, #12
 800ad2e:	bf38      	it	cc
 800ad30:	250c      	movcc	r5, #12
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	4606      	mov	r6, r0
 800ad36:	db01      	blt.n	800ad3c <_malloc_r+0x1c>
 800ad38:	42a9      	cmp	r1, r5
 800ad3a:	d904      	bls.n	800ad46 <_malloc_r+0x26>
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	6033      	str	r3, [r6, #0]
 800ad40:	2000      	movs	r0, #0
 800ad42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae1c <_malloc_r+0xfc>
 800ad4a:	f000 f869 	bl	800ae20 <__malloc_lock>
 800ad4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad52:	461c      	mov	r4, r3
 800ad54:	bb44      	cbnz	r4, 800ada8 <_malloc_r+0x88>
 800ad56:	4629      	mov	r1, r5
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff ffbf 	bl	800acdc <sbrk_aligned>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	4604      	mov	r4, r0
 800ad62:	d158      	bne.n	800ae16 <_malloc_r+0xf6>
 800ad64:	f8d8 4000 	ldr.w	r4, [r8]
 800ad68:	4627      	mov	r7, r4
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	d143      	bne.n	800adf6 <_malloc_r+0xd6>
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	d04b      	beq.n	800ae0a <_malloc_r+0xea>
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	4639      	mov	r1, r7
 800ad76:	4630      	mov	r0, r6
 800ad78:	eb04 0903 	add.w	r9, r4, r3
 800ad7c:	f000 fb5a 	bl	800b434 <_sbrk_r>
 800ad80:	4581      	cmp	r9, r0
 800ad82:	d142      	bne.n	800ae0a <_malloc_r+0xea>
 800ad84:	6821      	ldr	r1, [r4, #0]
 800ad86:	1a6d      	subs	r5, r5, r1
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7ff ffa6 	bl	800acdc <sbrk_aligned>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d03a      	beq.n	800ae0a <_malloc_r+0xea>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	442b      	add	r3, r5
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	bb62      	cbnz	r2, 800adfc <_malloc_r+0xdc>
 800ada2:	f8c8 7000 	str.w	r7, [r8]
 800ada6:	e00f      	b.n	800adc8 <_malloc_r+0xa8>
 800ada8:	6822      	ldr	r2, [r4, #0]
 800adaa:	1b52      	subs	r2, r2, r5
 800adac:	d420      	bmi.n	800adf0 <_malloc_r+0xd0>
 800adae:	2a0b      	cmp	r2, #11
 800adb0:	d917      	bls.n	800ade2 <_malloc_r+0xc2>
 800adb2:	1961      	adds	r1, r4, r5
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	6025      	str	r5, [r4, #0]
 800adb8:	bf18      	it	ne
 800adba:	6059      	strne	r1, [r3, #4]
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	bf08      	it	eq
 800adc0:	f8c8 1000 	streq.w	r1, [r8]
 800adc4:	5162      	str	r2, [r4, r5]
 800adc6:	604b      	str	r3, [r1, #4]
 800adc8:	4630      	mov	r0, r6
 800adca:	f000 f82f 	bl	800ae2c <__malloc_unlock>
 800adce:	f104 000b 	add.w	r0, r4, #11
 800add2:	1d23      	adds	r3, r4, #4
 800add4:	f020 0007 	bic.w	r0, r0, #7
 800add8:	1ac2      	subs	r2, r0, r3
 800adda:	bf1c      	itt	ne
 800addc:	1a1b      	subne	r3, r3, r0
 800adde:	50a3      	strne	r3, [r4, r2]
 800ade0:	e7af      	b.n	800ad42 <_malloc_r+0x22>
 800ade2:	6862      	ldr	r2, [r4, #4]
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	bf0c      	ite	eq
 800ade8:	f8c8 2000 	streq.w	r2, [r8]
 800adec:	605a      	strne	r2, [r3, #4]
 800adee:	e7eb      	b.n	800adc8 <_malloc_r+0xa8>
 800adf0:	4623      	mov	r3, r4
 800adf2:	6864      	ldr	r4, [r4, #4]
 800adf4:	e7ae      	b.n	800ad54 <_malloc_r+0x34>
 800adf6:	463c      	mov	r4, r7
 800adf8:	687f      	ldr	r7, [r7, #4]
 800adfa:	e7b6      	b.n	800ad6a <_malloc_r+0x4a>
 800adfc:	461a      	mov	r2, r3
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	42a3      	cmp	r3, r4
 800ae02:	d1fb      	bne.n	800adfc <_malloc_r+0xdc>
 800ae04:	2300      	movs	r3, #0
 800ae06:	6053      	str	r3, [r2, #4]
 800ae08:	e7de      	b.n	800adc8 <_malloc_r+0xa8>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	6033      	str	r3, [r6, #0]
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f000 f80c 	bl	800ae2c <__malloc_unlock>
 800ae14:	e794      	b.n	800ad40 <_malloc_r+0x20>
 800ae16:	6005      	str	r5, [r0, #0]
 800ae18:	e7d6      	b.n	800adc8 <_malloc_r+0xa8>
 800ae1a:	bf00      	nop
 800ae1c:	200009a4 	.word	0x200009a4

0800ae20 <__malloc_lock>:
 800ae20:	4801      	ldr	r0, [pc, #4]	@ (800ae28 <__malloc_lock+0x8>)
 800ae22:	f7ff bf01 	b.w	800ac28 <__retarget_lock_acquire_recursive>
 800ae26:	bf00      	nop
 800ae28:	2000099c 	.word	0x2000099c

0800ae2c <__malloc_unlock>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	@ (800ae34 <__malloc_unlock+0x8>)
 800ae2e:	f7ff befc 	b.w	800ac2a <__retarget_lock_release_recursive>
 800ae32:	bf00      	nop
 800ae34:	2000099c 	.word	0x2000099c

0800ae38 <__ssputs_r>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	688e      	ldr	r6, [r1, #8]
 800ae3e:	461f      	mov	r7, r3
 800ae40:	42be      	cmp	r6, r7
 800ae42:	680b      	ldr	r3, [r1, #0]
 800ae44:	4682      	mov	sl, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	4690      	mov	r8, r2
 800ae4a:	d82d      	bhi.n	800aea8 <__ssputs_r+0x70>
 800ae4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae54:	d026      	beq.n	800aea4 <__ssputs_r+0x6c>
 800ae56:	6965      	ldr	r5, [r4, #20]
 800ae58:	6909      	ldr	r1, [r1, #16]
 800ae5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae5e:	eba3 0901 	sub.w	r9, r3, r1
 800ae62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae66:	1c7b      	adds	r3, r7, #1
 800ae68:	444b      	add	r3, r9
 800ae6a:	106d      	asrs	r5, r5, #1
 800ae6c:	429d      	cmp	r5, r3
 800ae6e:	bf38      	it	cc
 800ae70:	461d      	movcc	r5, r3
 800ae72:	0553      	lsls	r3, r2, #21
 800ae74:	d527      	bpl.n	800aec6 <__ssputs_r+0x8e>
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7ff ff52 	bl	800ad20 <_malloc_r>
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	b360      	cbz	r0, 800aeda <__ssputs_r+0xa2>
 800ae80:	6921      	ldr	r1, [r4, #16]
 800ae82:	464a      	mov	r2, r9
 800ae84:	f7ff fed2 	bl	800ac2c <memcpy>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	6126      	str	r6, [r4, #16]
 800ae96:	6165      	str	r5, [r4, #20]
 800ae98:	444e      	add	r6, r9
 800ae9a:	eba5 0509 	sub.w	r5, r5, r9
 800ae9e:	6026      	str	r6, [r4, #0]
 800aea0:	60a5      	str	r5, [r4, #8]
 800aea2:	463e      	mov	r6, r7
 800aea4:	42be      	cmp	r6, r7
 800aea6:	d900      	bls.n	800aeaa <__ssputs_r+0x72>
 800aea8:	463e      	mov	r6, r7
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	4632      	mov	r2, r6
 800aeae:	4641      	mov	r1, r8
 800aeb0:	f000 faa6 	bl	800b400 <memmove>
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	1b9b      	subs	r3, r3, r6
 800aeb8:	60a3      	str	r3, [r4, #8]
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	4433      	add	r3, r6
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	2000      	movs	r0, #0
 800aec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec6:	462a      	mov	r2, r5
 800aec8:	f000 fac4 	bl	800b454 <_realloc_r>
 800aecc:	4606      	mov	r6, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	d1e0      	bne.n	800ae94 <__ssputs_r+0x5c>
 800aed2:	6921      	ldr	r1, [r4, #16]
 800aed4:	4650      	mov	r0, sl
 800aed6:	f7ff feb7 	bl	800ac48 <_free_r>
 800aeda:	230c      	movs	r3, #12
 800aedc:	f8ca 3000 	str.w	r3, [sl]
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	e7e9      	b.n	800aec2 <__ssputs_r+0x8a>
	...

0800aef0 <_svfiprintf_r>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	4698      	mov	r8, r3
 800aef6:	898b      	ldrh	r3, [r1, #12]
 800aef8:	061b      	lsls	r3, r3, #24
 800aefa:	b09d      	sub	sp, #116	@ 0x74
 800aefc:	4607      	mov	r7, r0
 800aefe:	460d      	mov	r5, r1
 800af00:	4614      	mov	r4, r2
 800af02:	d510      	bpl.n	800af26 <_svfiprintf_r+0x36>
 800af04:	690b      	ldr	r3, [r1, #16]
 800af06:	b973      	cbnz	r3, 800af26 <_svfiprintf_r+0x36>
 800af08:	2140      	movs	r1, #64	@ 0x40
 800af0a:	f7ff ff09 	bl	800ad20 <_malloc_r>
 800af0e:	6028      	str	r0, [r5, #0]
 800af10:	6128      	str	r0, [r5, #16]
 800af12:	b930      	cbnz	r0, 800af22 <_svfiprintf_r+0x32>
 800af14:	230c      	movs	r3, #12
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	b01d      	add	sp, #116	@ 0x74
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af22:	2340      	movs	r3, #64	@ 0x40
 800af24:	616b      	str	r3, [r5, #20]
 800af26:	2300      	movs	r3, #0
 800af28:	9309      	str	r3, [sp, #36]	@ 0x24
 800af2a:	2320      	movs	r3, #32
 800af2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af30:	f8cd 800c 	str.w	r8, [sp, #12]
 800af34:	2330      	movs	r3, #48	@ 0x30
 800af36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0d4 <_svfiprintf_r+0x1e4>
 800af3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af3e:	f04f 0901 	mov.w	r9, #1
 800af42:	4623      	mov	r3, r4
 800af44:	469a      	mov	sl, r3
 800af46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4a:	b10a      	cbz	r2, 800af50 <_svfiprintf_r+0x60>
 800af4c:	2a25      	cmp	r2, #37	@ 0x25
 800af4e:	d1f9      	bne.n	800af44 <_svfiprintf_r+0x54>
 800af50:	ebba 0b04 	subs.w	fp, sl, r4
 800af54:	d00b      	beq.n	800af6e <_svfiprintf_r+0x7e>
 800af56:	465b      	mov	r3, fp
 800af58:	4622      	mov	r2, r4
 800af5a:	4629      	mov	r1, r5
 800af5c:	4638      	mov	r0, r7
 800af5e:	f7ff ff6b 	bl	800ae38 <__ssputs_r>
 800af62:	3001      	adds	r0, #1
 800af64:	f000 80a7 	beq.w	800b0b6 <_svfiprintf_r+0x1c6>
 800af68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6a:	445a      	add	r2, fp
 800af6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af6e:	f89a 3000 	ldrb.w	r3, [sl]
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 809f 	beq.w	800b0b6 <_svfiprintf_r+0x1c6>
 800af78:	2300      	movs	r3, #0
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295
 800af7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af82:	f10a 0a01 	add.w	sl, sl, #1
 800af86:	9304      	str	r3, [sp, #16]
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af90:	4654      	mov	r4, sl
 800af92:	2205      	movs	r2, #5
 800af94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af98:	484e      	ldr	r0, [pc, #312]	@ (800b0d4 <_svfiprintf_r+0x1e4>)
 800af9a:	f7f9 f919 	bl	80041d0 <memchr>
 800af9e:	9a04      	ldr	r2, [sp, #16]
 800afa0:	b9d8      	cbnz	r0, 800afda <_svfiprintf_r+0xea>
 800afa2:	06d0      	lsls	r0, r2, #27
 800afa4:	bf44      	itt	mi
 800afa6:	2320      	movmi	r3, #32
 800afa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afac:	0711      	lsls	r1, r2, #28
 800afae:	bf44      	itt	mi
 800afb0:	232b      	movmi	r3, #43	@ 0x2b
 800afb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afb6:	f89a 3000 	ldrb.w	r3, [sl]
 800afba:	2b2a      	cmp	r3, #42	@ 0x2a
 800afbc:	d015      	beq.n	800afea <_svfiprintf_r+0xfa>
 800afbe:	9a07      	ldr	r2, [sp, #28]
 800afc0:	4654      	mov	r4, sl
 800afc2:	2000      	movs	r0, #0
 800afc4:	f04f 0c0a 	mov.w	ip, #10
 800afc8:	4621      	mov	r1, r4
 800afca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afce:	3b30      	subs	r3, #48	@ 0x30
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d94b      	bls.n	800b06c <_svfiprintf_r+0x17c>
 800afd4:	b1b0      	cbz	r0, 800b004 <_svfiprintf_r+0x114>
 800afd6:	9207      	str	r2, [sp, #28]
 800afd8:	e014      	b.n	800b004 <_svfiprintf_r+0x114>
 800afda:	eba0 0308 	sub.w	r3, r0, r8
 800afde:	fa09 f303 	lsl.w	r3, r9, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	46a2      	mov	sl, r4
 800afe8:	e7d2      	b.n	800af90 <_svfiprintf_r+0xa0>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	1d19      	adds	r1, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9103      	str	r1, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfbb      	ittet	lt
 800aff6:	425b      	neglt	r3, r3
 800aff8:	f042 0202 	orrlt.w	r2, r2, #2
 800affc:	9307      	strge	r3, [sp, #28]
 800affe:	9307      	strlt	r3, [sp, #28]
 800b000:	bfb8      	it	lt
 800b002:	9204      	strlt	r2, [sp, #16]
 800b004:	7823      	ldrb	r3, [r4, #0]
 800b006:	2b2e      	cmp	r3, #46	@ 0x2e
 800b008:	d10a      	bne.n	800b020 <_svfiprintf_r+0x130>
 800b00a:	7863      	ldrb	r3, [r4, #1]
 800b00c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b00e:	d132      	bne.n	800b076 <_svfiprintf_r+0x186>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	1d1a      	adds	r2, r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	9203      	str	r2, [sp, #12]
 800b018:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b01c:	3402      	adds	r4, #2
 800b01e:	9305      	str	r3, [sp, #20]
 800b020:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0e4 <_svfiprintf_r+0x1f4>
 800b024:	7821      	ldrb	r1, [r4, #0]
 800b026:	2203      	movs	r2, #3
 800b028:	4650      	mov	r0, sl
 800b02a:	f7f9 f8d1 	bl	80041d0 <memchr>
 800b02e:	b138      	cbz	r0, 800b040 <_svfiprintf_r+0x150>
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	eba0 000a 	sub.w	r0, r0, sl
 800b036:	2240      	movs	r2, #64	@ 0x40
 800b038:	4082      	lsls	r2, r0
 800b03a:	4313      	orrs	r3, r2
 800b03c:	3401      	adds	r4, #1
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b044:	4824      	ldr	r0, [pc, #144]	@ (800b0d8 <_svfiprintf_r+0x1e8>)
 800b046:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b04a:	2206      	movs	r2, #6
 800b04c:	f7f9 f8c0 	bl	80041d0 <memchr>
 800b050:	2800      	cmp	r0, #0
 800b052:	d036      	beq.n	800b0c2 <_svfiprintf_r+0x1d2>
 800b054:	4b21      	ldr	r3, [pc, #132]	@ (800b0dc <_svfiprintf_r+0x1ec>)
 800b056:	bb1b      	cbnz	r3, 800b0a0 <_svfiprintf_r+0x1b0>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	3307      	adds	r3, #7
 800b05c:	f023 0307 	bic.w	r3, r3, #7
 800b060:	3308      	adds	r3, #8
 800b062:	9303      	str	r3, [sp, #12]
 800b064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b066:	4433      	add	r3, r6
 800b068:	9309      	str	r3, [sp, #36]	@ 0x24
 800b06a:	e76a      	b.n	800af42 <_svfiprintf_r+0x52>
 800b06c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b070:	460c      	mov	r4, r1
 800b072:	2001      	movs	r0, #1
 800b074:	e7a8      	b.n	800afc8 <_svfiprintf_r+0xd8>
 800b076:	2300      	movs	r3, #0
 800b078:	3401      	adds	r4, #1
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	4619      	mov	r1, r3
 800b07e:	f04f 0c0a 	mov.w	ip, #10
 800b082:	4620      	mov	r0, r4
 800b084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b088:	3a30      	subs	r2, #48	@ 0x30
 800b08a:	2a09      	cmp	r2, #9
 800b08c:	d903      	bls.n	800b096 <_svfiprintf_r+0x1a6>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0c6      	beq.n	800b020 <_svfiprintf_r+0x130>
 800b092:	9105      	str	r1, [sp, #20]
 800b094:	e7c4      	b.n	800b020 <_svfiprintf_r+0x130>
 800b096:	fb0c 2101 	mla	r1, ip, r1, r2
 800b09a:	4604      	mov	r4, r0
 800b09c:	2301      	movs	r3, #1
 800b09e:	e7f0      	b.n	800b082 <_svfiprintf_r+0x192>
 800b0a0:	ab03      	add	r3, sp, #12
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e0 <_svfiprintf_r+0x1f0>)
 800b0a8:	a904      	add	r1, sp, #16
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f3af 8000 	nop.w
 800b0b0:	1c42      	adds	r2, r0, #1
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	d1d6      	bne.n	800b064 <_svfiprintf_r+0x174>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	065b      	lsls	r3, r3, #25
 800b0ba:	f53f af2d 	bmi.w	800af18 <_svfiprintf_r+0x28>
 800b0be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c0:	e72c      	b.n	800af1c <_svfiprintf_r+0x2c>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4b05      	ldr	r3, [pc, #20]	@ (800b0e0 <_svfiprintf_r+0x1f0>)
 800b0ca:	a904      	add	r1, sp, #16
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f000 f879 	bl	800b1c4 <_printf_i>
 800b0d2:	e7ed      	b.n	800b0b0 <_svfiprintf_r+0x1c0>
 800b0d4:	0800b7e0 	.word	0x0800b7e0
 800b0d8:	0800b7ea 	.word	0x0800b7ea
 800b0dc:	00000000 	.word	0x00000000
 800b0e0:	0800ae39 	.word	0x0800ae39
 800b0e4:	0800b7e6 	.word	0x0800b7e6

0800b0e8 <_printf_common>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	4698      	mov	r8, r3
 800b0f0:	688a      	ldr	r2, [r1, #8]
 800b0f2:	690b      	ldr	r3, [r1, #16]
 800b0f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	bfb8      	it	lt
 800b0fc:	4613      	movlt	r3, r2
 800b0fe:	6033      	str	r3, [r6, #0]
 800b100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b104:	4607      	mov	r7, r0
 800b106:	460c      	mov	r4, r1
 800b108:	b10a      	cbz	r2, 800b10e <_printf_common+0x26>
 800b10a:	3301      	adds	r3, #1
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	0699      	lsls	r1, r3, #26
 800b112:	bf42      	ittt	mi
 800b114:	6833      	ldrmi	r3, [r6, #0]
 800b116:	3302      	addmi	r3, #2
 800b118:	6033      	strmi	r3, [r6, #0]
 800b11a:	6825      	ldr	r5, [r4, #0]
 800b11c:	f015 0506 	ands.w	r5, r5, #6
 800b120:	d106      	bne.n	800b130 <_printf_common+0x48>
 800b122:	f104 0a19 	add.w	sl, r4, #25
 800b126:	68e3      	ldr	r3, [r4, #12]
 800b128:	6832      	ldr	r2, [r6, #0]
 800b12a:	1a9b      	subs	r3, r3, r2
 800b12c:	42ab      	cmp	r3, r5
 800b12e:	dc26      	bgt.n	800b17e <_printf_common+0x96>
 800b130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	3b00      	subs	r3, #0
 800b138:	bf18      	it	ne
 800b13a:	2301      	movne	r3, #1
 800b13c:	0692      	lsls	r2, r2, #26
 800b13e:	d42b      	bmi.n	800b198 <_printf_common+0xb0>
 800b140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b144:	4641      	mov	r1, r8
 800b146:	4638      	mov	r0, r7
 800b148:	47c8      	blx	r9
 800b14a:	3001      	adds	r0, #1
 800b14c:	d01e      	beq.n	800b18c <_printf_common+0xa4>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	6922      	ldr	r2, [r4, #16]
 800b152:	f003 0306 	and.w	r3, r3, #6
 800b156:	2b04      	cmp	r3, #4
 800b158:	bf02      	ittt	eq
 800b15a:	68e5      	ldreq	r5, [r4, #12]
 800b15c:	6833      	ldreq	r3, [r6, #0]
 800b15e:	1aed      	subeq	r5, r5, r3
 800b160:	68a3      	ldr	r3, [r4, #8]
 800b162:	bf0c      	ite	eq
 800b164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b168:	2500      	movne	r5, #0
 800b16a:	4293      	cmp	r3, r2
 800b16c:	bfc4      	itt	gt
 800b16e:	1a9b      	subgt	r3, r3, r2
 800b170:	18ed      	addgt	r5, r5, r3
 800b172:	2600      	movs	r6, #0
 800b174:	341a      	adds	r4, #26
 800b176:	42b5      	cmp	r5, r6
 800b178:	d11a      	bne.n	800b1b0 <_printf_common+0xc8>
 800b17a:	2000      	movs	r0, #0
 800b17c:	e008      	b.n	800b190 <_printf_common+0xa8>
 800b17e:	2301      	movs	r3, #1
 800b180:	4652      	mov	r2, sl
 800b182:	4641      	mov	r1, r8
 800b184:	4638      	mov	r0, r7
 800b186:	47c8      	blx	r9
 800b188:	3001      	adds	r0, #1
 800b18a:	d103      	bne.n	800b194 <_printf_common+0xac>
 800b18c:	f04f 30ff 	mov.w	r0, #4294967295
 800b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b194:	3501      	adds	r5, #1
 800b196:	e7c6      	b.n	800b126 <_printf_common+0x3e>
 800b198:	18e1      	adds	r1, r4, r3
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	2030      	movs	r0, #48	@ 0x30
 800b19e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1a2:	4422      	add	r2, r4
 800b1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	e7c7      	b.n	800b140 <_printf_common+0x58>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4641      	mov	r1, r8
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	47c8      	blx	r9
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	d0e6      	beq.n	800b18c <_printf_common+0xa4>
 800b1be:	3601      	adds	r6, #1
 800b1c0:	e7d9      	b.n	800b176 <_printf_common+0x8e>
	...

0800b1c4 <_printf_i>:
 800b1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	7e0f      	ldrb	r7, [r1, #24]
 800b1ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1cc:	2f78      	cmp	r7, #120	@ 0x78
 800b1ce:	4691      	mov	r9, r2
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	469a      	mov	sl, r3
 800b1d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1da:	d807      	bhi.n	800b1ec <_printf_i+0x28>
 800b1dc:	2f62      	cmp	r7, #98	@ 0x62
 800b1de:	d80a      	bhi.n	800b1f6 <_printf_i+0x32>
 800b1e0:	2f00      	cmp	r7, #0
 800b1e2:	f000 80d1 	beq.w	800b388 <_printf_i+0x1c4>
 800b1e6:	2f58      	cmp	r7, #88	@ 0x58
 800b1e8:	f000 80b8 	beq.w	800b35c <_printf_i+0x198>
 800b1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1f4:	e03a      	b.n	800b26c <_printf_i+0xa8>
 800b1f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1fa:	2b15      	cmp	r3, #21
 800b1fc:	d8f6      	bhi.n	800b1ec <_printf_i+0x28>
 800b1fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b204 <_printf_i+0x40>)
 800b200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b204:	0800b25d 	.word	0x0800b25d
 800b208:	0800b271 	.word	0x0800b271
 800b20c:	0800b1ed 	.word	0x0800b1ed
 800b210:	0800b1ed 	.word	0x0800b1ed
 800b214:	0800b1ed 	.word	0x0800b1ed
 800b218:	0800b1ed 	.word	0x0800b1ed
 800b21c:	0800b271 	.word	0x0800b271
 800b220:	0800b1ed 	.word	0x0800b1ed
 800b224:	0800b1ed 	.word	0x0800b1ed
 800b228:	0800b1ed 	.word	0x0800b1ed
 800b22c:	0800b1ed 	.word	0x0800b1ed
 800b230:	0800b36f 	.word	0x0800b36f
 800b234:	0800b29b 	.word	0x0800b29b
 800b238:	0800b329 	.word	0x0800b329
 800b23c:	0800b1ed 	.word	0x0800b1ed
 800b240:	0800b1ed 	.word	0x0800b1ed
 800b244:	0800b391 	.word	0x0800b391
 800b248:	0800b1ed 	.word	0x0800b1ed
 800b24c:	0800b29b 	.word	0x0800b29b
 800b250:	0800b1ed 	.word	0x0800b1ed
 800b254:	0800b1ed 	.word	0x0800b1ed
 800b258:	0800b331 	.word	0x0800b331
 800b25c:	6833      	ldr	r3, [r6, #0]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6032      	str	r2, [r6, #0]
 800b264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b26c:	2301      	movs	r3, #1
 800b26e:	e09c      	b.n	800b3aa <_printf_i+0x1e6>
 800b270:	6833      	ldr	r3, [r6, #0]
 800b272:	6820      	ldr	r0, [r4, #0]
 800b274:	1d19      	adds	r1, r3, #4
 800b276:	6031      	str	r1, [r6, #0]
 800b278:	0606      	lsls	r6, r0, #24
 800b27a:	d501      	bpl.n	800b280 <_printf_i+0xbc>
 800b27c:	681d      	ldr	r5, [r3, #0]
 800b27e:	e003      	b.n	800b288 <_printf_i+0xc4>
 800b280:	0645      	lsls	r5, r0, #25
 800b282:	d5fb      	bpl.n	800b27c <_printf_i+0xb8>
 800b284:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b288:	2d00      	cmp	r5, #0
 800b28a:	da03      	bge.n	800b294 <_printf_i+0xd0>
 800b28c:	232d      	movs	r3, #45	@ 0x2d
 800b28e:	426d      	negs	r5, r5
 800b290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b294:	4858      	ldr	r0, [pc, #352]	@ (800b3f8 <_printf_i+0x234>)
 800b296:	230a      	movs	r3, #10
 800b298:	e011      	b.n	800b2be <_printf_i+0xfa>
 800b29a:	6821      	ldr	r1, [r4, #0]
 800b29c:	6833      	ldr	r3, [r6, #0]
 800b29e:	0608      	lsls	r0, r1, #24
 800b2a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2a4:	d402      	bmi.n	800b2ac <_printf_i+0xe8>
 800b2a6:	0649      	lsls	r1, r1, #25
 800b2a8:	bf48      	it	mi
 800b2aa:	b2ad      	uxthmi	r5, r5
 800b2ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2ae:	4852      	ldr	r0, [pc, #328]	@ (800b3f8 <_printf_i+0x234>)
 800b2b0:	6033      	str	r3, [r6, #0]
 800b2b2:	bf14      	ite	ne
 800b2b4:	230a      	movne	r3, #10
 800b2b6:	2308      	moveq	r3, #8
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2be:	6866      	ldr	r6, [r4, #4]
 800b2c0:	60a6      	str	r6, [r4, #8]
 800b2c2:	2e00      	cmp	r6, #0
 800b2c4:	db05      	blt.n	800b2d2 <_printf_i+0x10e>
 800b2c6:	6821      	ldr	r1, [r4, #0]
 800b2c8:	432e      	orrs	r6, r5
 800b2ca:	f021 0104 	bic.w	r1, r1, #4
 800b2ce:	6021      	str	r1, [r4, #0]
 800b2d0:	d04b      	beq.n	800b36a <_printf_i+0x1a6>
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2d8:	fb03 5711 	mls	r7, r3, r1, r5
 800b2dc:	5dc7      	ldrb	r7, [r0, r7]
 800b2de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2e2:	462f      	mov	r7, r5
 800b2e4:	42bb      	cmp	r3, r7
 800b2e6:	460d      	mov	r5, r1
 800b2e8:	d9f4      	bls.n	800b2d4 <_printf_i+0x110>
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d10b      	bne.n	800b306 <_printf_i+0x142>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	07df      	lsls	r7, r3, #31
 800b2f2:	d508      	bpl.n	800b306 <_printf_i+0x142>
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	6861      	ldr	r1, [r4, #4]
 800b2f8:	4299      	cmp	r1, r3
 800b2fa:	bfde      	ittt	le
 800b2fc:	2330      	movle	r3, #48	@ 0x30
 800b2fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b302:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b306:	1b92      	subs	r2, r2, r6
 800b308:	6122      	str	r2, [r4, #16]
 800b30a:	f8cd a000 	str.w	sl, [sp]
 800b30e:	464b      	mov	r3, r9
 800b310:	aa03      	add	r2, sp, #12
 800b312:	4621      	mov	r1, r4
 800b314:	4640      	mov	r0, r8
 800b316:	f7ff fee7 	bl	800b0e8 <_printf_common>
 800b31a:	3001      	adds	r0, #1
 800b31c:	d14a      	bne.n	800b3b4 <_printf_i+0x1f0>
 800b31e:	f04f 30ff 	mov.w	r0, #4294967295
 800b322:	b004      	add	sp, #16
 800b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	f043 0320 	orr.w	r3, r3, #32
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	4832      	ldr	r0, [pc, #200]	@ (800b3fc <_printf_i+0x238>)
 800b332:	2778      	movs	r7, #120	@ 0x78
 800b334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	6831      	ldr	r1, [r6, #0]
 800b33c:	061f      	lsls	r7, r3, #24
 800b33e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b342:	d402      	bmi.n	800b34a <_printf_i+0x186>
 800b344:	065f      	lsls	r7, r3, #25
 800b346:	bf48      	it	mi
 800b348:	b2ad      	uxthmi	r5, r5
 800b34a:	6031      	str	r1, [r6, #0]
 800b34c:	07d9      	lsls	r1, r3, #31
 800b34e:	bf44      	itt	mi
 800b350:	f043 0320 	orrmi.w	r3, r3, #32
 800b354:	6023      	strmi	r3, [r4, #0]
 800b356:	b11d      	cbz	r5, 800b360 <_printf_i+0x19c>
 800b358:	2310      	movs	r3, #16
 800b35a:	e7ad      	b.n	800b2b8 <_printf_i+0xf4>
 800b35c:	4826      	ldr	r0, [pc, #152]	@ (800b3f8 <_printf_i+0x234>)
 800b35e:	e7e9      	b.n	800b334 <_printf_i+0x170>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	f023 0320 	bic.w	r3, r3, #32
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	e7f6      	b.n	800b358 <_printf_i+0x194>
 800b36a:	4616      	mov	r6, r2
 800b36c:	e7bd      	b.n	800b2ea <_printf_i+0x126>
 800b36e:	6833      	ldr	r3, [r6, #0]
 800b370:	6825      	ldr	r5, [r4, #0]
 800b372:	6961      	ldr	r1, [r4, #20]
 800b374:	1d18      	adds	r0, r3, #4
 800b376:	6030      	str	r0, [r6, #0]
 800b378:	062e      	lsls	r6, r5, #24
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	d501      	bpl.n	800b382 <_printf_i+0x1be>
 800b37e:	6019      	str	r1, [r3, #0]
 800b380:	e002      	b.n	800b388 <_printf_i+0x1c4>
 800b382:	0668      	lsls	r0, r5, #25
 800b384:	d5fb      	bpl.n	800b37e <_printf_i+0x1ba>
 800b386:	8019      	strh	r1, [r3, #0]
 800b388:	2300      	movs	r3, #0
 800b38a:	6123      	str	r3, [r4, #16]
 800b38c:	4616      	mov	r6, r2
 800b38e:	e7bc      	b.n	800b30a <_printf_i+0x146>
 800b390:	6833      	ldr	r3, [r6, #0]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	6032      	str	r2, [r6, #0]
 800b396:	681e      	ldr	r6, [r3, #0]
 800b398:	6862      	ldr	r2, [r4, #4]
 800b39a:	2100      	movs	r1, #0
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7f8 ff17 	bl	80041d0 <memchr>
 800b3a2:	b108      	cbz	r0, 800b3a8 <_printf_i+0x1e4>
 800b3a4:	1b80      	subs	r0, r0, r6
 800b3a6:	6060      	str	r0, [r4, #4]
 800b3a8:	6863      	ldr	r3, [r4, #4]
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b2:	e7aa      	b.n	800b30a <_printf_i+0x146>
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	47d0      	blx	sl
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d0ad      	beq.n	800b31e <_printf_i+0x15a>
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	079b      	lsls	r3, r3, #30
 800b3c6:	d413      	bmi.n	800b3f0 <_printf_i+0x22c>
 800b3c8:	68e0      	ldr	r0, [r4, #12]
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	4298      	cmp	r0, r3
 800b3ce:	bfb8      	it	lt
 800b3d0:	4618      	movlt	r0, r3
 800b3d2:	e7a6      	b.n	800b322 <_printf_i+0x15e>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	4649      	mov	r1, r9
 800b3da:	4640      	mov	r0, r8
 800b3dc:	47d0      	blx	sl
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d09d      	beq.n	800b31e <_printf_i+0x15a>
 800b3e2:	3501      	adds	r5, #1
 800b3e4:	68e3      	ldr	r3, [r4, #12]
 800b3e6:	9903      	ldr	r1, [sp, #12]
 800b3e8:	1a5b      	subs	r3, r3, r1
 800b3ea:	42ab      	cmp	r3, r5
 800b3ec:	dcf2      	bgt.n	800b3d4 <_printf_i+0x210>
 800b3ee:	e7eb      	b.n	800b3c8 <_printf_i+0x204>
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	f104 0619 	add.w	r6, r4, #25
 800b3f6:	e7f5      	b.n	800b3e4 <_printf_i+0x220>
 800b3f8:	0800b7f1 	.word	0x0800b7f1
 800b3fc:	0800b802 	.word	0x0800b802

0800b400 <memmove>:
 800b400:	4288      	cmp	r0, r1
 800b402:	b510      	push	{r4, lr}
 800b404:	eb01 0402 	add.w	r4, r1, r2
 800b408:	d902      	bls.n	800b410 <memmove+0x10>
 800b40a:	4284      	cmp	r4, r0
 800b40c:	4623      	mov	r3, r4
 800b40e:	d807      	bhi.n	800b420 <memmove+0x20>
 800b410:	1e43      	subs	r3, r0, #1
 800b412:	42a1      	cmp	r1, r4
 800b414:	d008      	beq.n	800b428 <memmove+0x28>
 800b416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b41e:	e7f8      	b.n	800b412 <memmove+0x12>
 800b420:	4402      	add	r2, r0
 800b422:	4601      	mov	r1, r0
 800b424:	428a      	cmp	r2, r1
 800b426:	d100      	bne.n	800b42a <memmove+0x2a>
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b42e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b432:	e7f7      	b.n	800b424 <memmove+0x24>

0800b434 <_sbrk_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	@ (800b450 <_sbrk_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7fb f970 	bl	8006724 <_sbrk>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_sbrk_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_sbrk_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20000998 	.word	0x20000998

0800b454 <_realloc_r>:
 800b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b458:	4607      	mov	r7, r0
 800b45a:	4614      	mov	r4, r2
 800b45c:	460d      	mov	r5, r1
 800b45e:	b921      	cbnz	r1, 800b46a <_realloc_r+0x16>
 800b460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b464:	4611      	mov	r1, r2
 800b466:	f7ff bc5b 	b.w	800ad20 <_malloc_r>
 800b46a:	b92a      	cbnz	r2, 800b478 <_realloc_r+0x24>
 800b46c:	f7ff fbec 	bl	800ac48 <_free_r>
 800b470:	4625      	mov	r5, r4
 800b472:	4628      	mov	r0, r5
 800b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b478:	f000 f81a 	bl	800b4b0 <_malloc_usable_size_r>
 800b47c:	4284      	cmp	r4, r0
 800b47e:	4606      	mov	r6, r0
 800b480:	d802      	bhi.n	800b488 <_realloc_r+0x34>
 800b482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b486:	d8f4      	bhi.n	800b472 <_realloc_r+0x1e>
 800b488:	4621      	mov	r1, r4
 800b48a:	4638      	mov	r0, r7
 800b48c:	f7ff fc48 	bl	800ad20 <_malloc_r>
 800b490:	4680      	mov	r8, r0
 800b492:	b908      	cbnz	r0, 800b498 <_realloc_r+0x44>
 800b494:	4645      	mov	r5, r8
 800b496:	e7ec      	b.n	800b472 <_realloc_r+0x1e>
 800b498:	42b4      	cmp	r4, r6
 800b49a:	4622      	mov	r2, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	bf28      	it	cs
 800b4a0:	4632      	movcs	r2, r6
 800b4a2:	f7ff fbc3 	bl	800ac2c <memcpy>
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff fbcd 	bl	800ac48 <_free_r>
 800b4ae:	e7f1      	b.n	800b494 <_realloc_r+0x40>

0800b4b0 <_malloc_usable_size_r>:
 800b4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b4:	1f18      	subs	r0, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bfbc      	itt	lt
 800b4ba:	580b      	ldrlt	r3, [r1, r0]
 800b4bc:	18c0      	addlt	r0, r0, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_init>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr

0800b4cc <_fini>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr
